{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///../zogra-engine/dist/2d/index.js","webpack:///../zogra-engine/dist/2d/physics/box-collider.js","webpack:///../zogra-engine/dist/2d/physics/collider2d.js","webpack:///../zogra-engine/dist/2d/physics/collision/box-box.js","webpack:///../zogra-engine/dist/2d/physics/collision/tilemap-box.js","webpack:///../zogra-engine/dist/2d/physics/physics-2d.js","webpack:///../zogra-engine/dist/2d/physics/polygon.js","webpack:///../zogra-engine/dist/2d/physics/rigidbody2d.js","webpack:///../zogra-engine/dist/2d/physics/tilemap-collider.js","webpack:///../zogra-engine/dist/2d/rendering/light-2d.js","webpack:///../zogra-engine/dist/2d/rendering/line-renderer.js","webpack:///../zogra-engine/dist/2d/rendering/materials.js","webpack:///../zogra-engine/dist/2d/rendering/sprite-object.js","webpack:///../zogra-engine/dist/2d/rendering/sprite.js","webpack:///../zogra-engine/dist/2d/rendering/tilemap.js","webpack:///../zogra-engine/dist/assets/index.js","webpack:///../zogra-engine/dist/engine/animation.js","webpack:///../zogra-engine/dist/engine/camera.js","webpack:///../zogra-engine/dist/engine/engine.js","webpack:///../zogra-engine/dist/engine/entity.js","webpack:///../zogra-engine/dist/engine/index.js","webpack:///../zogra-engine/dist/engine/input.js","webpack:///../zogra-engine/dist/engine/light.js","webpack:///../zogra-engine/dist/engine/particle-system.js","webpack:///../zogra-engine/dist/engine/render-object.js","webpack:///../zogra-engine/dist/engine/scene.js","webpack:///../zogra-engine/dist/engine/transform.js","webpack:///../zogra-engine/dist/index.js","webpack:///../zogra-engine/dist/physics/physics-generic.js","webpack:///../zogra-engine/dist/render-pipeline/2d-default.js","webpack:///../zogra-engine/dist/render-pipeline/default-materials.js","webpack:///../zogra-engine/dist/render-pipeline/index.js","webpack:///../zogra-engine/dist/render-pipeline/materials/index.js","webpack:///../zogra-engine/dist/render-pipeline/materials/lit.js","webpack:///../zogra-engine/dist/render-pipeline/materials/unlit.js","webpack:///../zogra-engine/dist/render-pipeline/post-process/bloom.js","webpack:///../zogra-engine/dist/render-pipeline/post-process/blur.js","webpack:///../zogra-engine/dist/render-pipeline/post-process/index.js","webpack:///../zogra-engine/dist/render-pipeline/post-process/post-process.js","webpack:///../zogra-engine/dist/render-pipeline/preview-renderer.js","webpack:///../zogra-engine/dist/render-pipeline/render-data.js","webpack:///../zogra-engine/dist/render-pipeline/render-pass.js","webpack:///../zogra-engine/dist/render-pipeline/render-pass/2d-light-pass.js","webpack:///../zogra-engine/dist/render-pipeline/render-pass/clear-pass.js","webpack:///../zogra-engine/dist/render-pipeline/render-pass/debug-layer.js","webpack:///../zogra-engine/dist/render-pipeline/render-pass/draw-scene.js","webpack:///../zogra-engine/dist/render-pipeline/render-pass/final-blit.js","webpack:///../zogra-engine/dist/render-pipeline/render-pass/grid.js","webpack:///../zogra-engine/dist/render-pipeline/render-pass/render-pass.js","webpack:///../zogra-engine/dist/render-pipeline/render-pipeline.js","webpack:///../zogra-engine/dist/utils/blur-renderer.js","webpack:///../zogra-engine/dist/utils/index.js","webpack:///../zogra-engine/dist/utils/util.js","webpack:///../zogra-renderer/dist/builtin-assets/assets.js","webpack:///../zogra-renderer/dist/builtin-assets/generated/index.js","webpack:///../zogra-renderer/dist/builtin-assets/materials.js","webpack:///../zogra-renderer/dist/builtin-assets/mesh.js","webpack:///../zogra-renderer/dist/builtin-assets/shaders.js","webpack:///../zogra-renderer/dist/builtin-assets/textures.js","webpack:///../zogra-renderer/dist/core/array-buffer.js","webpack:///../zogra-renderer/dist/core/asset.js","webpack:///../zogra-renderer/dist/core/debug.js","webpack:///../zogra-renderer/dist/core/event.js","webpack:///../zogra-renderer/dist/core/frame-buffer.js","webpack:///../zogra-renderer/dist/core/global.js","webpack:///../zogra-renderer/dist/core/index.js","webpack:///../zogra-renderer/dist/core/lines.js","webpack:///../zogra-renderer/dist/core/material-type.js","webpack:///../zogra-renderer/dist/core/material.js","webpack:///../zogra-renderer/dist/core/mesh.js","webpack:///../zogra-renderer/dist/core/render-buffer.js","webpack:///../zogra-renderer/dist/core/renderer.js","webpack:///../zogra-renderer/dist/core/shader.js","webpack:///../zogra-renderer/dist/core/texture-format.js","webpack:///../zogra-renderer/dist/core/texture.js","webpack:///../zogra-renderer/dist/index.js","webpack:///../zogra-renderer/dist/plugins/assets-importer/assets-importer.js","webpack:///../zogra-renderer/dist/plugins/assets-importer/types.js","webpack:///../zogra-renderer/dist/plugins/index.js","webpack:///../zogra-renderer/dist/plugins/texture-importer/texture-importer.js","webpack:///../zogra-renderer/dist/types/color.js","webpack:///../zogra-renderer/dist/types/index.js","webpack:///../zogra-renderer/dist/types/mat4.js","webpack:///../zogra-renderer/dist/types/math.js","webpack:///../zogra-renderer/dist/types/quat.js","webpack:///../zogra-renderer/dist/types/ray.js","webpack:///../zogra-renderer/dist/types/rect.js","webpack:///../zogra-renderer/dist/types/utils.js","webpack:///../zogra-renderer/dist/types/vec2.js","webpack:///../zogra-renderer/dist/types/vec3.js","webpack:///../zogra-renderer/dist/types/vec4.js","webpack:///../zogra-renderer/dist/utils/image-sizing.js","webpack:///../zogra-renderer/dist/utils/index.js","webpack:///../zogra-renderer/dist/utils/mesh-builder.js","webpack:///../zogra-renderer/dist/utils/object-pool.js","webpack:///../zogra-renderer/dist/utils/public-utils.js","webpack:///../zogra-renderer/dist/utils/util.js","webpack:///../zogra-renderer/node_modules/gl-matrix/esm/common.js","webpack:///../zogra-renderer/node_modules/gl-matrix/esm/index.js","webpack:///../zogra-renderer/node_modules/gl-matrix/esm/mat2.js","webpack:///../zogra-renderer/node_modules/gl-matrix/esm/mat2d.js","webpack:///../zogra-renderer/node_modules/gl-matrix/esm/mat3.js","webpack:///../zogra-renderer/node_modules/gl-matrix/esm/mat4.js","webpack:///../zogra-renderer/node_modules/gl-matrix/esm/quat.js","webpack:///../zogra-renderer/node_modules/gl-matrix/esm/quat2.js","webpack:///../zogra-renderer/node_modules/gl-matrix/esm/vec2.js","webpack:///../zogra-renderer/node_modules/gl-matrix/esm/vec3.js","webpack:///../zogra-renderer/node_modules/gl-matrix/esm/vec4.js","webpack:///../zogra-renderer/node_modules/reflect-metadata/Reflect.js","webpack:///./src/css/base.css","webpack:///./node_modules/css-loader/dist/runtime/api.js","webpack:///./node_modules/process/browser.js","webpack:///./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js","webpack:///(webpack)/buildin/global.js","webpack:///./src/css/base.css?6b6c","webpack:///./src/particle.ts"],"names":[],"mappings":";QAAA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;;;;;;;AClFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAuC;AACF;AACA;AACC;AACK;AACR;AACO;AACN;AACE;AACI;AACL;AACrC,iC;;;;;;;;;;;;ACXA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAsC;AACI;AACe;AACkC;AACtC;AAC9C,0BAA0B,sDAAU;AAC3C;AACA;AACA,sBAAsB,mDAAI;AAC1B,oBAAoB,mDAAI;AACxB;AACA;AACA;AACA,6BAA6B,iEAAe;AAC5C,mBAAmB,uFAAwB;AAC3C;AACA;AACA;AACA;AACA;AACA,6BAA6B,iEAAe;AAC5C,mBAAmB,qFAAsB;AACzC;AACA,mBAAmB,6EAAkB;AACrC;AACA;AACA;AACA;AACA,wC;;;;;;;;;;;;AC5BA;AAAA;AAAA;AAAA;AAA8C;AACe;AACtD,yBAAyB,qEAAY;AAC5C;AACA;AACA;AACA;AACA;AACA,kCAAkC,2DAAY;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sC;;;;;;;;;;;;AC1BA;AAAA;AAAA;AAAsC;AAC/B;AACP;AACA;AACA;AACA;AACA,mBAAmB,mDAAI,gBAAgB,mDAAI;AAC3C;AACA;AACA;AACA;AACA,mC;;;;;;;;;;;;ACXA;AAAA;AAAA;AAAA;AAAA;AAA+E;AACvB;AACjD;AACP;AACA;AACA;AACA;AACA,uBAAuB,mDAAI;AAC3B,yBAAyB,mDAAI,iBAAiB,mDAAI;AAClD,iCAAiC,qBAAqB;AACtD,qCAAqC,qBAAqB;AAC1D,+BAA+B,2DAAI;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA,qBAAqB,0DAAG,cAAc;AACtC;AACA,+BAA+B,4DAAK,oBAAoB;AACxD,yBAAyB,mDAAI;AAC7B,wBAAwB,mDAAI;AAC5B;AACA;AACA,oBAAoB,mDAAI;AACxB;AACA,iCAAiC,qBAAqB;AACtD,qCAAqC,qBAAqB;AAC1D,6BAA6B,mDAAI,CAAC,2DAAI,0BAA0B,2DAAI;AACpE,YAAY,6EAAK;AACjB,4CAA4C,iEAAU;AACtD,qEAAqE,0DAAG;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,4DAAK;AAC7B;AACA;AACA;AACA;AACA,uC;;;;;;;;;;;;ACvDA;AAAA;AAAA;AAAkD;AAC3C;AACP;AACA,uBAAuB,mDAAI;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,8BAA8B;AACrD;AACA,+BAA+B,8BAA8B;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,4DAAK,gHAAgH,mDAAI,uHAAuH,mDAAI;AAC3R;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,8BAA8B;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,0DAAG;AAC9B;AACA;AACA;AACA;AACA;AACA,sC;;;;;;;;;;;;AChFA;AAAA;AAAA;AAA4C;AACrC;AACP;AACA,yBAAyB,mDAAI,CAAC,mDAAI,SAAS,mDAAI;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mC;;;;;;;;;;;;ACdA;AAAA;AAAA;AAAsC;AAC/B;AACP;AACA;AACA;AACA,yBAAyB,mDAAI;AAC7B;AACA,6BAA6B,mDAAI;AACjC;AACA,uBAAuB,mDAAI;AAC3B;AACA;AACA,oBAAoB,uBAAuB;AAC3C,qBAAqB,uBAAuB;AAC5C,wBAAwB,2BAA2B;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uC;;;;;;;;;;;;AClCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAsC;AACS;AACF;AACH;AACiD;AACpF,8BAA8B,sDAAU;AAC/C;AACA;AACA;AACA;AACA,mBAAmB,sBAAsB;AACzC;AACA;AACA;AACA,8BAA8B,0DAAO;AACrC;AACA;AACA;AACA;AACA,6BAA6B,yDAAW;AACxC,mBAAmB,uFAAwB;AAC3C;AACA;AACA;AACA;AACA;AACA,6BAA6B,yDAAW;AACxC,mBAAmB,qFAAsB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,mDAAI;AACxB;AACA,2BAA2B,oCAAoC;AAC/D,+BAA+B,oCAAoC;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4C;;;;;;;;;;;;AC/CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAkB,SAAI,IAAI,SAAI;AAC9B;AACA;AACA,4CAA4C,QAAQ;AACpD;AACA;AACgN;AACpK;AACC;AACiB;AACvD;AACP;AACA;AACA;AACA,CAAC,gCAAgC;AACjC;AACO,2BAA2B,mEAAY,+BAA+B,EAAE,gEAAiB,IAAI,yBAAyB;AACtH,sBAAsB,qDAAM;AACnC;AACA;AACA;AACA;AACA;AACA,0BAA0B,oDAAK;AAC/B;AACA;AACA;AACA;AACA;AACA,iEAAiE,mDAAI;AACrE;AACA;AACA,kCAAkC,mDAAI;AACtC;AACA;AACA;AACA;AACA;AACA,kCAAkC,mDAAI;AACtC;AACA;AACA;AACA;AACA;AACA,iCAAiC,4DAAa,sEAAsE,4DAAa,KAAK,yDAAU;AAChJ;AACA,qFAAqF,8DAAe;AACpG;AACA;AACA,+BAA+B,oDAAK;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,2DAAI,iDAAiD,2DAAI;AAChF,gCAAgC,mDAAI;AACpC;AACA;AACA;AACA,oCAAoC,yEAAe;AACnD;AACA;AACA;AACA;AACA,gBAAgB,mDAAI;AACpB;AACA,mCAAmC,2BAA2B;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,mDAAI;AACvB,mBAAmB,mDAAI;AACvB,QAAQ,mDAAI;AACZ,QAAQ,mDAAI;AACZ,oBAAoB,mDAAI;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,mDAAI;AAChB,YAAY,mDAAI;AAChB;AACA;AACA,YAAY,mDAAI;AAChB,YAAY,mDAAI;AAChB;AACA;AACA,YAAY,mDAAI;AAChB;AACA;AACA;AACA;AACA;AACA,YAAY,mDAAI;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,mDAAI;AACvB,wBAAwB,mDAAI;AAC5B,QAAQ,mDAAI;AACZ,QAAQ,mDAAI;AACZ,QAAQ,mDAAI;AACZ,QAAQ,mDAAI;AACZ,QAAQ,mDAAI;AACZ,QAAQ,mDAAI;AACZ,QAAQ,mDAAI;AACZ,QAAQ,mDAAI;AACZ,QAAQ,mDAAI;AACZ,QAAQ,mDAAI;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,mDAAI,kBAAkB,mDAAI;AACzC;AACA,yDAAyD,mDAAI,SAAS,mDAAI;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,mDAAI;AACR;AACA;AACA;AACA;AACA;AACO,+BAA+B,yEAAkB,KAAK,qDAAM,IAAI,oDAAY;AACnF;AACA;AACA;AACA;AACA,KAAK;AACL,UAAU,sDAAO;AACjB,YAAY,uDAAQ,MAAM,uDAAQ;AAClC,CAAC;AACD;AACA;AACA,wBAAwB,mDAAI;AAC5B;AACA;AACA;AACA;AACA;AACA,IAAI,iEAAU;AACd;AACA;AACA,IAAI,iEAAU;AACd;AACA;AACA,IAAI,iEAAU;AACd;AACA,oC;;;;;;;;;;;;ACnRA;AAAA;AAAA;AAAA;AAA6D;AACH;AACnD,2BAA2B,kEAAY;AAC9C;AACA;AACA,wBAAwB,mDAAI;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,mDAAI;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,mDAAI;AACxB,uBAAuB,mDAAI;AAC3B,mBAAmB,mDAAI;AACvB,mBAAmB,mDAAI;AACvB,mBAAmB,mDAAI;AACvB,mBAAmB,mDAAI;AACvB,uBAAuB,4BAA4B;AACnD;AACA;AACA,YAAY,mDAAI;AAChB;AACA;AACA;AACA,YAAY,mDAAI;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,mDAAI;AACR,IAAI,mDAAI;AACR,oBAAoB,2DAAI;AACxB;AACA,QAAQ,mDAAI;AACZ,QAAQ,mDAAI;AACZ;AACA;AACA;AACA,QAAQ,mDAAI;AACZ;AACA;AACA;AACA,QAAQ,mDAAI;AACZ;AACA;AACA;AACA;AACA,4BAA4B,mDAAI,qCAAqC,0DAAG;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yC;;;;;;;;;;;;ACjHA;AAAA;AAAA;AAAA;AAAA,kBAAkB,SAAI,IAAI,SAAI;AAC9B;AACA;AACA,4CAA4C,QAAQ;AACpD;AACA;AAC6G;AACjE;AACrC,gCAAgC,yEAAkB,KAAK,qDAAM,IAAI,oDAAY;AACpF,UAAU,sDAAO;AACjB,WAAW,wDAAS;AACpB;AACA,YAAY,uDAAQ,WAAW,uDAAQ;AACvC,CAAC;AACD;AACA;AACA;AACA,qBAAqB,oDAAK;AAC1B;AACA;AACA;AACA,IAAI,iEAAU;AACd;AACA;AACA,IAAI,iEAAU;AACd;AACA,qC;;;;;;;;;;;;AC1BA;AAAA;AAAA;AAAA;AAAA;AAAgE;AACN;AACiB;AAC3E;AACA,IAAI,2DAAI;AACR,IAAI,2DAAI;AACR,IAAI,2DAAI;AACR,IAAI,2DAAI;AACR;AACO,2BAA2B,kEAAY;AAC9C;AACA;AACA,oBAAoB,0DAAW;AAC/B,wBAAwB,mFAAgB;AACxC;AACA,qBAAqB,mDAAI;AACzB,sBAAsB,oDAAK;AAC3B;AACA;AACA;AACA,gBAAgB,mBAAmB;AACnC;AACA;AACA,QAAQ,mDAAI;AACZ,QAAQ,mDAAI;AACZ,QAAQ,mDAAI;AACZ,QAAQ,mDAAI;AACZ;AACA;AACA,iBAAiB,oBAAoB;AACrC;AACA;AACA;AACA,YAAY,mDAAI;AAChB,YAAY,mDAAI;AAChB,YAAY,mDAAI;AAChB,YAAY,mDAAI;AAChB;AACA;AACA,YAAY,mDAAI;AAChB,YAAY,mDAAI;AAChB,YAAY,mDAAI;AAChB,YAAY,mDAAI;AAChB;AACA;AACA;AACA,kBAAkB,qBAAqB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yC;;;;;;;;;;;;AC7EA;AAAA;AAAA;AAAkD;AAC3C;AACP;AACA,qBAAqB,oDAAK;AAC1B;AACA,0BAA0B,mDAAI,CAAC,0DAAG,mBAAmB,0DAAG;AACxD;AACA;AACA,kC;;;;;;;;;;;;ACRA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAkB,SAAI,IAAI,SAAI;AAC9B;AACA;AACA,4CAA4C,QAAQ;AACpD;AACA;AACsL;AAC1I;AACc;AACb;AAC7C,iCAAiC,sEAAe;AAChD;AACA;AACA;AACA,CAAC;AACD,+BAA+B,sEAAe;AAC9C;AACA;AACA;AACA,CAAC;AACM,iCAAiC,mEAAY,+BAA+B;AAC5E,sBAAsB,kEAAY;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,4DAAa;AAC5C;AACA;AACA;AACA;AACA,yBAAyB,2DAAI;AAC7B,wCAAwC,4DAAK;AAC7C,wCAAwC,2DAAI;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,uBAAuB;AAC7D,0CAA0C,uBAAuB;AACjE,oDAAoD,2DAAI;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,mDAAI;AACnD;AACA;AACA;AACA;AACA,+CAA+C,mDAAI;AACnD;AACA;AACA;AACA;AACA,0CAA0C,mDAAI;AAC9C;AACA;AACA;AACA,yBAAyB,2DAAI;AAC7B,wCAAwC,4DAAK;AAC7C,wCAAwC,2DAAI;AAC5C,2BAA2B,2DAAI;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,mDAAI;AAC3B;AACA;AACA;AACA;AACA,gBAAgB,mDAAI,kBAAkB,0DAAG;AACzC,YAAY,mDAAI,+BAA+B,2DAAI;AACnD;AACA;AACA,yBAAyB,mDAAI;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,mDAAI;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,2DAAI;AAC5C;AACA;AACA;AACA;AACA;AACA,wCAAwC,2DAAI;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,2DAAI;AAC5C;AACA;AACA;AACA;AACA;AACA,wCAAwC,2DAAI;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,2DAAI;AAC5C;AACA;AACA;AACA;AACA;AACA,wCAAwC,2DAAI;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,2DAAI;AAC5C;AACA;AACA;AACA;AACA;AACA,wCAAwC,2DAAI;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,oBAAoB;AAC3C,2BAA2B,oBAAoB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,2DAAI;AACpC,+BAA+B,2DAAI;AACnC;AACA;AACA;AACA,gCAAgC,2DAAI;AACpC,+BAA+B,2DAAI;AACnC;AACA;AACA;AACA,gCAAgC,2DAAI;AACpC,+BAA+B,2DAAI;AACnC;AACA;AACA;AACA,gCAAgC,2DAAI;AACpC,+BAA+B,2DAAI;AACnC;AACA;AACA;AACA;AACA;AACA,wCAAwC,wDAAO;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,4DAAa;AACpC,mBAAmB,eAAe;AAClC,uBAAuB,eAAe;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,qCAAqC,yEAAkB,KAAK,qDAAM,IAAI,oDAAY;AACzF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,YAAY,uDAAQ,WAAW,uDAAQ;AACvC;AACA,WAAW,wDAAS;AACpB,CAAC;AACD;AACA;AACA;AACA,qBAAqB,oDAAK;AAC1B;AACA;AACA;AACA,IAAI,iEAAU;AACd;AACA;AACA,IAAI,iEAAU;AACd;AACA,mC;;;;;;;;;;;;AC7aA;AAAA;AAAA;AACA,iEAAiE,qBAAqB,mBAAmB,gBAAgB,oBAAoB,iCAAiC,8BAA8B,+BAA+B,gCAAgC,wBAAwB,kBAAkB,iBAAiB,qBAAqB,uBAAuB,wBAAwB,oDAAoD,2BAA2B,wBAAwB,kBAAkB,2DAA2D,sDAAsD,aAAa;AACjoB;AACA,iEAAiE,uBAAuB,iBAAiB,gBAAgB,mCAAmC,wBAAwB,2BAA2B,wBAAwB,oDAAoD,wCAAwC,2DAA2D,0CAA0C,KAAK;AAC7a;AACA,wEAAwE,qBAAqB,mBAAmB,gBAAgB,oBAAoB,4BAA4B,6BAA6B,0BAA0B,iCAAiC,8BAA8B,+BAA+B,gCAAgC,wBAAwB,kBAAkB,iBAAiB,qBAAqB,uBAAuB,gIAAgI,qCAAqC,uBAAuB,uBAAuB,uBAAuB,8BAA8B,0BAA0B,0BAA0B,0BAA0B,0BAA0B,0BAA0B,mBAAmB,2CAA2C,2CAA2C,2CAA2C,2CAA2C,iBAAiB,KAAK,kDAAkD,eAAe,uBAAuB,uBAAuB,uBAAuB,uBAAuB,yBAAyB,yBAAyB,yBAAyB,8BAA8B,0BAA0B,0BAA0B,0BAA0B,0BAA0B,0BAA0B,0BAA0B,0BAA0B,0BAA0B,wBAAwB,wBAAwB,wBAAwB,6CAA6C,iCAAiC,iCAAiC,sBAAsB,iCAAiC,yCAAyC,iCAAiC,sBAAsB,iCAAiC,iCAAiC,yCAAyC,sBAAsB,uBAAuB,uBAAuB,uBAAuB,sBAAsB,qBAAqB,KAAK,wBAAwB,+FAA+F,uEAAuE,uCAAuC,0CAA0C,2BAA2B,wBAAwB,kBAAkB,2DAA2D,sDAAsD,aAAa;AACvhF;AACA,wEAAwE,qBAAqB,mBAAmB,gBAAgB,oBAAoB,gBAAgB,gBAAgB,iCAAiC,8BAA8B,+BAA+B,gCAAgC,wBAAwB,kBAAkB,iBAAiB,qBAAqB,gBAAgB,iBAAiB,iBAAiB,wBAAwB,oDAAoD,2BAA2B,wBAAwB,kBAAkB,2DAA2D,kBAAkB,kBAAkB,kBAAkB,aAAa;AACnsB;AACA,sEAAsE,qBAAqB,gBAAgB,gBAAgB,eAAe,+BAA+B,8BAA8B,8BAA8B,4BAA4B,+KAA+K,mCAAmC,6FAA6F,6CAA6C,iCAAiC,wFAAwF,wFAAwF,qBAAqB,qBAAqB,oBAAoB,KAAK,yCAAyC,gDAAgD,KAAK,gCAAgC,kCAAkC,wCAAwC,4CAA4C,iDAAiD,iBAAiB,KAAK,kEAAkE,4CAA4C,uBAAuB,KAAK,wBAAwB,uBAAuB,oBAAoB,6BAA6B,6BAA6B,uDAAuD,uCAAuC,sCAAsC,oCAAoC,oCAAoC,uCAAuC,uBAAuB,kBAAkB,kBAAkB,SAAS,sFAAsF,iFAAiF,6CAA6C,iEAAiE,KAAK;AACpgE;AACA,wEAAwE,4BAA4B,0BAA0B,uBAAuB,2BAA2B,iCAAiC,8BAA8B,+BAA+B,gCAAgC,4BAA4B,sBAAsB,qBAAqB,yBAAyB,2BAA2B,wBAAwB,oDAAoD,2BAA2B,wBAAwB,kBAAkB,2DAA2D,sDAAsD,aAAa;AACxrB;AACA,+GAA+G,uCAAuC,8DAA8D,8CAA8C,4CAA4C,6CAA6C,2FAA2F,4BAA4B,+BAA+B,4EAA4E,8BAA8B,+DAA+D,sDAAsD,6CAA6C,sDAAsD,6CAA6C,SAAS,4CAA4C,sDAAsD,wBAAwB,qDAAqD,SAAS,cAAc,wCAAwC,SAAS,KAAK,wBAAwB,gFAAgF,uBAAuB,eAAe,cAAc,8DAA8D,uCAAuC,qEAAqE,sFAAsF,2CAA2C,kEAAkE,kCAAkC,8EAA8E,SAAS,2CAA2C,aAAa;AAC/xD;AACA,mEAAmE,uBAAuB,iBAAiB,gBAAgB,mCAAmC,0BAA0B,oDAAoD,2BAA2B,wBAAwB,yDAAyD,0WAA0W,+BAA+B,mCAAmC,KAAK;AACzwB;AACA,uEAAuE,oBAAoB,+BAA+B,6BAA6B,iCAAiC,2BAA2B,uGAAuG,iDAAiD,+DAA+D,iDAAiD,oDAAoD,4CAA4C,oDAAoD,oEAAoE,8CAA8C,yCAAyC,qDAAqD,KAAK;AACp0B;AACA,oEAAoE,oBAAoB,+BAA+B,2BAA2B,wBAAwB,gDAAgD,KAAK;AAC/N;AACA,wEAAwE,oBAAoB,mCAAmC,6BAA6B,2BAA2B,wBAAwB,6EAA6E,KAAK;AACjS;AACA,8EAA8E,qBAAqB,gBAAgB,wBAAwB,yBAAyB,iEAAiE,mCAAmC,6BAA6B,0BAA0B,wBAAwB,kBAAkB,iBAAiB,wBAAwB,gGAAgG,2BAA2B,kBAAkB,oCAAoC,kCAAkC,8BAA8B,KAAK;AACxoB;AACA,8EAA8E,4BAA4B,yBAAyB,4DAA4D,gBAAgB,2BAA2B,0FAA0F,oBAAoB,4BAA4B,sDAAsD,6CAA6C,sDAAsD,6CAA6C,SAAS,4CAA4C,sDAAsD,wBAAwB,qDAAqD,SAAS,cAAc,wCAAwC,SAAS,KAAK,wBAAwB,mEAAmE,gGAAgG,4CAA4C,sCAAsC,yDAAyD,uCAAuC,+BAA+B,KAAK;AAChtC;AACA,yEAAyE,sCAAsC,gBAAgB,oBAAoB,iDAAiD,oBAAoB,sBAAsB,iCAAiC,8BAA8B,+BAA+B,gCAAgC,sBAAsB,oBAAoB,iBAAiB,qBAAqB,uBAAuB,wBAAwB,yDAAyD,8CAA8C,2BAA2B,4BAA4B,4CAA4C,2DAA2D,gDAAgD,KAAK;AACryB;AACA,uEAAuE,qBAAqB,mBAAmB,gBAAgB,oBAAoB,iCAAiC,8BAA8B,+BAA+B,gCAAgC,wBAAwB,kBAAkB,iBAAiB,qBAAqB,uBAAuB,wBAAwB,oDAAoD,2BAA2B,wBAAwB,kBAAkB,2DAA2D,sDAAsD,aAAa;AACvoB;AACA,sEAAsE,mDAAmD,iBAAiB,gBAAgB,oBAAoB,sBAAsB,mCAAmC,wBAAwB,uCAAuC,4BAA4B,yCAAyC,2BAA2B,wBAAwB,sEAAsE,iCAAiC,uBAAuB,iBAAiB,cAAc,+FAA+F,gEAAgE,2DAA2D,SAAS,mCAAmC,8BAA8B,KAAK;AACp2B;AACA,sEAAsE,uBAAuB,iBAAiB,2BAA2B,wBAAwB,2BAA2B,KAAK;AACjM;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACwB;AACxB;AACA,iC;;;;;;;;;;;;ACpDA;AAAA;AAAA;AAAA;AAAA;AAA2C;AACpC;AACP,0DAA0D,8BAA8B;AACxF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,6DAA6D;AAChF,oBAAoB,iCAAiC;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,2BAA2B,iCAAiC;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,wDAAS;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,iCAAiC;AACrD;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,wBAAwB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qC;;;;;;;;;;;;ACxOA;AAAA;AAAA;AAAA;AAAA;AAA+C;AACA;AACT;AACJ;AACI;AACoB;AACnB;AACD;AACD;AACC;AAC/B;AACP;AACA;AACA;AACA,CAAC,gCAAgC;AAC1B,qBAAqB,8CAAM;AAClC,sBAAsB,oEAAa;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,oDAAK;AAC/B;AACA;AACA;AACA;AACA;AACA,mCAAmC,4DAAa;AAChD,mBAAmB,2DAAI;AACvB;AACA,mBAAmB,2DAAI;AACvB;AACA,uBAAuB,4CAA4C;AACnE;AACA;AACA;AACA,eAAe,mDAAI;AACnB;AACA;AACA;AACA,cAAc,mDAAI,wBAAwB,sDAAO;AACjD,cAAc,mDAAI;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,0DAAG,wBAAwB,4DAAK,CAAC,2DAAI;AACpD;AACA;AACA;AACA;AACA;AACA,qDAAqD,2DAAI,eAAe,2DAAI;AAC5E,qBAAqB,0DAAG,CAAC,2DAAI;AAC7B,yBAAyB,mDAAI;AAC7B,kBAAkB,mDAAI;AACtB,eAAe,2DAAI;AACnB;AACA;AACA;AACA,mBAAmB,0DAAG,MAAM,2DAAI;AAChC,wCAAwC,4DAAa;AACrD,mBAAmB,0DAAG,MAAM,2DAAI;AAChC;AACA;AACA,mBAAmB,mDAAI;AACvB;AACA;AACA,kC;;;;;;;;;;;;AClFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAgC;AACoC;AAClC;AACa;AACD;AACc;AACrD;AACP,yCAAyC,gEAAe;AACxD;AACA,sBAAsB;AACtB,4BAA4B,4DAAa;AACzC;AACA,0BAA0B,4CAAK,CAAC,uEAAc;AAC9C,gCAAgC,2DAAY;AAC5C;AACA,gBAAgB,mBAAmB;AACnC,iBAAiB,oBAAoB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,8CAAM;AAC3D,mCAAmC,8DAAa;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sEAAsE,8CAAM;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kC;;;;;;;;;;;;ACnEA;AAAA;AAAA;AAAA;AAAA;AAAwC;AACM;AACA;AACvC,qBAAqB,oDAAS;AACrC;AACA;AACA,uBAAuB,2DAAY;AACnC,8BAA8B,aAAa;AAC3C,gCAAgC,2DAAY;AAC5C;AACA;AACA;AACA,oBAAoB,uBAAuB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,wBAAwB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,2DAAY;AACxB;AACA,iBAAiB;AACjB,kBAAkB;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,2DAAY;AACxB;AACA;AACO;AACP;AACA;AACA;AACA;AACA,oBAAoB,uBAAuB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kC;;;;;;;;;;;;AC7FA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAyB;AACO;AACR;AACC;AACD;AACI;AACH;AACD;AACI;AACM;AAClC,iC;;;;;;;;;;;;ACVA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAqD;AACd;AACM;AACtC;AACP;AACA;AACA;AACA,CAAC,4BAA4B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,gCAAgC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,mDAAI;AAC5B,0BAA0B,mDAAI;AAC9B;AACA;AACA;AACA;AACA;AACO;AACP,4BAA4B;AAC5B;AACA;AACA;AACA,0BAA0B,wDAAY;AACtC;AACA;AACA;AACA,4CAA4C,oEAAa;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,+BAA+B,2DAAI;AACnC,4BAA4B,4DAAK,CAAC,2DAAI;AACtC;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,+BAA+B,2DAAI;AACnC,4BAA4B,4DAAK,CAAC,2DAAI;AACtC;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,2BAA2B,qCAAqC;AAChE,wBAAwB,uCAAuC;AAC/D,sBAAsB,uCAAuC;AAC7D,mBAAmB,sCAAsC;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,mDAAI;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,6BAA6B;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,oEAAa;AACzC;AACA;AACA;AACA,eAAe,2DAAI,yDAAyD,2DAAI;AAChF;AACA;AACA;AACA;AACA,4BAA4B,oEAAa;AACzC;AACA;AACA;AACA;AACA;AACA,oBAAoB,4DAAK,CAAC,2DAAI,oBAAoB,2DAAI;AACtD;AACA;AACA;AACA;AACA;AACA,8CAA8C,2DAAI;AACloBAAoB;AACrB,iC;;;;;;;;;;;;AC7VA;AAAA;AAAA;AAAA;AAAA;AAAkC;AACK;AAChC;AACP;AACA;AACA;AACA,CAAC,8BAA8B;AACxB,oBAAoB,8CAAM;AACjC;AACA;AACA;AACA,qBAAqB,oDAAK;AAC1B;AACA;AACA;AACA,iC;;;;;;;;;;;;ACfA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAkB,SAAI,IAAI,SAAI;AAC9B;AACA;AACA,4CAA4C,QAAQ;AACpD;AACA;AAC6K;AACpI;AACM;AAC/C,2BAA2B,mEAAY;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,4DAA4D,EAAE,0EAA2B,IAAI,yEAAyE;AAC/J,+BAA+B,yEAAkB,KAAK,qDAAM,IAAI,oDAAY;AACnF;AACA;AACA,CAAC;AACD;AACA;AACA,qBAAqB,oDAAK;AAC1B;AACA;AACA;AACA;AACA,IAAI,iEAAU;AACd;AACA;AACA,IAAI,iEAAU;AACd;AACO,6BAA6B,2DAAY;AAChD;AACA;AACA,oBAAoB,0DAAW;AAC/B;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B,8BAA8B;AAC9B;AACA,kCAAkC;AAClC,iDAAiD,mDAAI;AACrD;AACA,0BAA0B;AAC1B,6BAA6B;AAC7B;AACA,iCAAiC;AACjC,mCAAmC,4DAAa;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,oBAAoB,oCAAoC;AACxD,yBAAyB,oCAAoC;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,WAAW;AAClC;AACA;AACA;AACA,uBAAuB,wBAAwB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,mDAAI;AAC3B,kBAAkB,mDAAI;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,mDAAI;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,wDAAS;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,wDAAS;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,mDAAI;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,mDAAI;AAChB;AACA;AACA;AACA;AACA;AACA,2C;;;;;;;;;;;;AC3QA;AAAA;AAAA;AAAA;AAA+C;AACb;AAC3B,2BAA2B,8CAAM;AACxC,sBAAsB,oEAAa;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,wBAAwB;AAC/C;AACA;AACA;AACA;AACA,yC;;;;;;;;;;;;ACvBA;AAAA;AAAA;AAAA;AAAyC;AACK;AACA;AACvC,oBAAoB,qDAAa;AACxC;AACA;AACA;AACA;AACA;AACA,gCAAgC,2DAAY;AAC5C;AACA;AACA,uBAAuB,2DAAY;AACnC,6BAA6B,aAAa;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8HAA8H;AAC9H;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iC;;;;;;;;;;;;ACtGA;AAAA;AAAA;AAAsC;AACA;AACA;AAC/B;AACP;AACA;AACA;AACA,8BAA8B,mDAAI;AAClC,8BAA8B,mDAAI;AAClC,6BAA6B,mDAAI;AACjC,yBAAyB,mDAAI;AAC7B,6BAA6B,mDAAI;AACjC,6BAA6B,mDAAI;AACjC,6BAA6B,mDAAI;AACjC;AACA;AACA,yBAAyB,4BAA4B;AACrD,yBAAyB,4BAA4B;AACrD,wBAAwB,2BAA2B;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,oBAAoB;AACrC;AACA;AACA;AACA,eAAe,mDAAI;AACnB;AACA;AACA;AACA;AACA;AACA,YAAY,mDAAI;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,mDAAI;AAChB;AACA,YAAY,mDAAI;AAChB,YAAY,mDAAI;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,2BAA2B;AACzD,8BAA8B,2BAA2B;AACzD,kBAAkB,qBAAqB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,mDAAI;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,mDAAI;AACZ;AACA,YAAY,mDAAI;AAChB,YAAY,mDAAI;AAChB;AACA,QAAQ,mDAAI;AACZ,QAAQ,mDAAI;AACZ;AACA;AACA;AACA;AACA,qb;AACG;AACgB;AACjC,uBAAuB,oDAAY;AAC1C,iC;;;;;;;;;;;;ACPA;AAAA;AAAA;AAAO;AACP;AACA,qBAAqB;AACrB;AACA,wBAAwB;AACxB,sBAAsB,WAAW;AACjC,cAAc;AACd;AACO;AACP;AACA;AACA;AACA;AACA,mBAAmB,4BAA4B;AAC/C,kBAAkB,qBAAqB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2C;;;;;;;;;;;;ACnCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA0E;AAClB;AACjB;AACM;AACkB;AACL;AACL;AACJ;AACI;AACA;AAC9C;AACP;AACA;AACA,4BAA4B,4DAAa;AACzC,8BAA8B,2EAAkB;AAChD,qCAAqC,oDAAK;AAC1C;AACA;AACA,QAAQ,4DAAK;AACb;AACA;AACA;AACA;AACA,yBAAyB,uDAAU;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,0DAAW;AACvC,qCAAqC,2DAAY;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,2DAAI;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,iEAAS;AACzB,gBAAgB,iEAAS,CAAC,wDAAW;AACrC,gBAAgB,sEAAW;AAC3B,gBAAgB,6DAAe;AAC/B,gBAAgB,iEAAS;AACzB;AACA;AACA;AACA,sC;;;;;;;;;;;;AC/EA;AAAA;AAAA;AAAA;AAA8D;AACD;AACtD;AACP,uBAAuB,yEAAiB;AACxC,wBAAwB,yEAAiB;AACzC,yBAAyB,wEAAgB;AACzC;AACA,6C;;;;;;;;;;;;ACPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAmC;AACL;AACI;AACL;AACE;AACD;AACF;AAC5B,iC;;;;;;;;;;;;ACPA;AAAA;AAAA;AAAA;AAAsB;AACtB,iC;;;;;;;;;;;;ACDA;AAAA;AAAA;AAAA;AAAA,kBAAkB,SAAI,IAAI,SAAI;AAC9B;AACA;AACA,4CAA4C,QAAQ;AACpD;AACA;AAC+E;AACnC;AACrC,4BAA4B,yEAAkB,KAAK,qDAAM,CAAC,oDAAY,cAAc,oDAAY,eAAe;AACtH;AACA;AACA,qBAAqB,oDAAK;AAC1B;AACA;AACA;AACA;AACA,IAAI,iEAAU;AACd;AACA;AACA,IAAI,iEAAU;AACd;AACA,+B;;;;;;;;;;;;ACrBA;AAAA;AAAA;AAAA;AAAA;AAAiF;AACrC;AACrC,yBAAyB,yEAAkB,KAAK,qDAAM,IAAI,oDAAY;AAC7E,YAAY,uDAAQ,WAAW,uDAAQ;AACvC,CAAC;AACD;AACO,gCAAgC,yEAAkB,KAAK,qDAAM,IAAI,oDAAY;AACpF,WAAW,wDAAS;AACpB,YAAY,uDAAQ,WAAW,uDAAQ;AACvC,CAAC;AACD;AACA,iC;;;;;;;;;;;;ACXA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAkB,SAAI,IAAI,SAAI;AAC9B;AACA;AACA,4CAA4C,QAAQ;AACpD;AACA;AAC4I;AAChG;AACuB;AACtB;AAC7C,kCAAkC,yEAAkB,KAAK,qDAAM,IAAI,oDAAY;AAC/E,WAAW,wDAAS;AACpB;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,iEAAU;AACd;AACA;AACA,IAAI,iEAAU;AACd;AACA;AACA,IAAI,iEAAU;AACd;AACA,mCAAmC,yEAAkB,KAAK,qDAAM,IAAI,oDAAY;AAChF,eAAe,uDAAQ,MAAM,uDAAQ;AACrC,iBAAiB,uDAAQ,OAAO,uDAAQ;AACxC,WAAW,wDAAS;AACpB;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,iEAAU;AACd;AACO,oBAAoB,yDAAW;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,2EAAsB;AACtD;AACA;AACA;AACA,gCAAgC,4DAAa,sEAAsE,4DAAa;AAChI;AACA,oBAAoB,uDAAQ,MAAM,uDAAQ;AAC1C,SAAS;AACT;AACA;AACA;AACA,4DAA4D,8DAAe;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iC;;;;;;;;;;;;AC7EA;AAAA;AAAA;AAAA;AAAA;AAAmE;AACtB;AACtC;AACP;AACA;AACA;AACA,CAAC,gCAAgC;AAC1B,mBAAmB,yDAAW;AACrC;AACA;AACA;AACA,gCAAgC,2EAAsB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gC;;;;;;;;;;;;ACvBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA+B;AACP;AACD;AACvB,iC;;;;;;;;;;;;ACHA;AAAA;AAAA;AAAA;AAAA;AAA4E;AACpB;AACjD;AACP;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACO,8BAA8B,mEAAU;AAC/C;AACA;AACA;AACA;AACA,gBAAgB,4DAAa,kEAAkE,yDAAU;AACzG,gBAAgB,4DAAa,kEAAkE,yDAAU;AACzG;AACA;AACA;AACA;AACA;AACA,2EAA2E,8DAAe;AAC1F;AACA,2EAA2E,8DAAe;AAC1F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wC;;;;;;;;;;;;AC5CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA6F;AACrC;AACnB;AACQ;AACE;AACgB;AACb;AAC3C;AACP;AACA;AACA;AACA,8BAA8B,2EAAkB;AAChD,wBAAwB,8DAAY;AACpC;AACA;AACA;AACA,QAAQ,4DAAK;AACb;AACA;AACA,uBAAuB,oBAAoB;AAC3C,yBAAyB,uDAAU;AACnC;AACA;AACA;AACA;AACA;AACA;AACA,kEAAkE,0DAAG;AACrE,qEAAqE,0DAAG;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,wDAAW;AACvD;AACA;AACA;AACA,8BAA8B,uBAAuB;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,4DAAa,uSAAuS,4DAAa,OAAO,yDAAU;AACxW;AACA;AACA;AACA,mCAAmC,0DAAW;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,0DAAW;AACjC,qCAAqC,2DAAY,wBAAwB,4DAAa;AACtF,oCAAoC,0DAAW;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4C;;;;;;;;;;;;AC1FA;AAAA;AAAA;AAAA;AAAA;AAAyC;AACH;AAC/B;AACP;AACA;AACA;AACA,CAAC,kCAAkC;AAC5B;AACP;AACA;AACA;AACA;AACA;AACA,oDAAoD,oDAAY;AAChE;AACA;AACA;AACA;AACA;AACA,gDAAgD,MAAM,mDAAI,4CAA4C;AACtG;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,sDAAsD;AAC7G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uC;;;;;;;;;;;;AC3DA;AAAA;AAAO;AACP;AACA;AACA;AACA;AACA;AACA,uC;;;;;;;;;;;;ACNA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAkB,SAAI,IAAI,SAAI;AAC9B;AACA;AACA,4CAA4C,QAAQ;AACpD;AACA;AAC8O;AAC5K;AACtB;AACD;AACpC,0BAA0B,uDAAU;AAC3C;AACA;AACA;AACA;AACA;AACA,yCAAyC,4DAAa;AACtD;AACA,4BAA4B,4DAAa,qDAAqD,4DAAa,UAAU,yDAAU;AAC/H,+BAA+B,0DAAW,MAAM,mDAAI,SAAS,2DAAI;AACjE;AACA;AACA;AACA;AACA,oFAAoF,8DAAe;AACnG,uDAAuD,8DAAO;AAC9D,4EAA4E,iEAAU,8BAA8B,iEAAU;AAC9H;AACA;AACA,+BAA+B,oDAAK;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,yBAAyB;AAChD,YAAY,mDAAI;AAChB,YAAY,mDAAI;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,uDAAuD;AAC9E;AACA,uBAAuB,yBAAyB;AAChD;AACA,uGAAuG,mDAAI;AAC3G,YAAY,mDAAI;AAChB;AACA,6GAA6G,mDAAI;AACjH;AACA;AACA;AACA;AACA,2GAA2G,oDAAK;AAChH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,mDAAI;AACZ;AACA;AACA;AACA,gCAAgC,yEAAkB,KAAK,qDAAM,IAAI,oDAAY;AAC7E,YAAY,uDAAQ,MAAM,uDAAQ;AAClC,WAAW,wDAAS;AACpB;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,mDAAI;AAChC,iCAAiC,oDAAK;AACtC;AACA;AACA;AACA,IAAI,iEAAU;AACd;AACA;AACA,IAAI,iEAAU;AACd;AACA;AACA,IAAI,iEAAU;AACd;AACA;AACA,IAAI,iEAAU;AACd;AACA;AACA,IAAI,iEAAU;AACd;AACA;AACA,IAAI,iEAAU;AACd;AACA;AACA,IAAI,iEAAU;AACd;AACA,6BAA6B,yEAAkB,KAAK,qDAAM,IAAI,oDAAY;AAC1E,YAAY,uDAAQ,WAAW,uDAAQ;AACvC,WAAW,wDAAS;AACpB;AACA,CAAC;AACD;AACA,gCAAgC,mEAAY;AAC5C;AACA;AACA;AACA,CAAC;AACD,sCAAsC,yEAAkB,KAAK,qDAAM,IAAI,oDAAY;AACnF,mDAAmD,EAAE,gEAAiB;AACtE;AACA;AACA;AACA;AACA,KAAK;AACL,YAAY,uDAAQ,MAAM,uDAAQ;AAClC,CAAC;AACD;AACA,yC;;;;;;;;;;;;ACnIA;AAAA;AAAA;AAA2C;AACpC,wBAAwB,uDAAU;AACzC;AACA;AACA;AACA;AACA;AACA;AACA,sC;;;;;;;;;;;;ACRA;AAAA;AAAA;AAAA;AAAsD;AACf;AACD;AAC6B;AAC5D,iCAAiC,4DAAa;AACrD;AACA;AACA,yBAAyB,oDAAK;AAC9B,gCAAgC,oDAAK;AACrC,4BAA4B,2DAAU;AACtC,mCAAmC,kEAAiB;AACpD;AACA,+BAA+B,oDAAK;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,mDAAI;AACnD,sDAAsD,mDAAI;AAC1D;AACA;AACA;AACA;AACA,uC;;;;;;;;;;;;AChCA;AAAA;AAAA;AAA2C;AACpC,wBAAwB,uDAAU;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sC;;;;;;;;;;;;AChBA;AAAA;AAAA;AAAA;AAA0E;AAC/B;AACpC,wBAAwB,uDAAU;AACzC;AACA;AACA,0BAA0B,4DAAa;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gHAAgH,0DAAW;AAC3H;AACA,uCAAuC,0DAAW;AAClD;AACA;AACA,8CAA8C,0DAAW;AACzD,iEAAiE,2DAAY;AAC7E,6CAA6C,4DAAa;AAC1D;AACA;AACA;AACA,uDAAuD,0DAAW;AAClE;AACA;AACA,sEAAsE,4DAAa;AACnF,mIAAmI,0DAAW;AAC9I;AACA;AACA;AACA;AACA,sC;;;;;;;;;;;;AClCA;AAAA;AAAA;AAAA;AAAA;AAA+D;AAChC;AACiB;AACzC,2BAA2B,4CAAU;AAC5C,6CAA6C,2DAAI;AACjD;AACA,4BAA4B,2DAAU;AACtC,uBAAuB,0DAAW;AAClC,2BAA2B,WAAW;AACtC;AACA,gBAAgB,2DAAI;AACpB,gBAAgB,2DAAI;AACpB;AACA;AACA,gBAAgB,2DAAI;AACpB,gBAAgB,2DAAI;AACpB;AACA;AACA;AACA;AACA;AACA,8CAA8C,mDAAI;AAClD;AACA;AACA,gC;;;;;;;;;;;;ACxBA;AAAA;AAAO;AACP;AACA;AACA;AACA;AACA;AACA,uC;;;;;;;;;;;;ACNA;AAAA;AAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,2C;;;;;;;;;;;;ACXA;AAAA;AAAA;AAAA;AAAA,kBAAkB,SAAI,IAAI,SAAI;AAC9B;AACA;AACA,4CAA4C,QAAQ;AACpD;AACA;AACyL;AAChJ;AACzC,2BAA2B,yEAAkB,KAAK,qDAAM,IAAI,oDAAY;AACxE;AACA;AACA;AACA,2BAA2B,mDAAI;AAC/B;AACA;AACA;AACA;AACA,IAAI,iEAAU;AACd;AACA;AACA,IAAI,iEAAU;AACd;AACA;AACA,IAAI,iEAAU;AACd;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,4DAAa;AAC7C,qCAAqC,uDAAQ;AAC7C;AACA;AACA;AACA,gEAAgE,8DAAe;AAC/E;AACA,+DAA+D,oEAAa;AAC5E;AACA;AACA,oCAAoC,4DAAa;AACjD;AACA;AACA;AACA;AACA,2BAA2B,oDAAK;AAChC;AACA;AACA;AACA;AACA,uBAAuB,gBAAgB;AACvC,6BAA6B,mDAAI,OAAO,0DAAG,aAAa,2DAAI;AAC5D;AACA,oCAAoC,4DAAa,gCAAgC,4DAAa,OAAO,yDAAU;AAC/G,yCAAyC,uDAAQ;AACjD;AACA;AACA;AACA;AACA,sDAAsD,8DAAe;AACrE;AACA,kDAAkD,2DAAI;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,QAAQ;AAC3C,2BAA2B,0DAAG,aAAa,2DAAI;AAC/C;AACA,oCAAoC,4DAAa,4BAA4B,4DAAa,OAAO,yDAAU;AAC3G,yCAAyC,uDAAQ;AACjD;AACA;AACA;AACA;AACA,gDAAgD,2DAAI;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yC;;;;;;;;;;;;ACzFA;AAAU;AACV,iC;;;;;;;;;;;;ACDA;AAAA;AAAO;AACP;AACA;AACA;AACA;AACA,mBAAmB,0CAA0C;AAC7D,wBAAwB,2CAA2C;AACnE,gBAAgB,gDAAgD;AAChE,qBAAqB,iDAAiD;AACtE;AACA;AACA;AACA;AACA,gC;;;;;;;;;;;;ACbA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAgF;AACa;AAC1C;AACR;AACpC;AACP;AACA;AACA;AACA;AACA,+BAA+B,4DAAmB;AAClD,6BAA6B,6DAAoB;AACjD,uBAAuB,sEAAqB;AAC5C,sBAAsB,+DAAiB;AACvC,wBAAwB,uEAAqB;AAC7C,qBAAqB,6EAA0B;AAC/C,yBAAyB,wEAAqB;AAC9C;AACA;AACA,kC;;;;;;;;;;;;AClBA;AAAA;AAAA;AACA,wBAAwB;AACxB;AACA,aAAa;AACb,eAAe;AACf,YAAY;AACZ,gBAAgB;AAChB;AACA,yBAAyB;AACzB,0BAA0B;AAC1B,2BAA2B;AAC3B;AACA,gBAAgB;AAChB,cAAc;AACd,aAAa;AACb,iBAAiB;AACjB;AACA;AACA,CAAC;AACD,gDAAgD;AAChD,oBAAoB;AACpB,cAAc;AACd,sBAAsB;AACtB,CAAC;AACD;AACA,wBAAwB;AACxB;AACA,eAAe;AACf,aAAa;AACb,YAAY;AACZ;AACA,2BAA2B;AAC3B,oBAAoB;AACpB;AACA,mBAAmB;AACnB;AACA;AACA,CAAC;AACD,gDAAgD;AAChD,oCAAoC;AACpC,sBAAsB;AACtB,CAAC;AACD;AACA,wBAAwB;AACxB;AACA,eAAe;AACf,aAAa;AACb,YAAY;AACZ,gBAAgB;AAChB;AACA,2BAA2B;AAC3B;AACA,mBAAmB;AACnB;AACA;AACA,CAAC;AACD,4CAA4C;AAC5C,CAAC;AACD;AACA,wBAAwB;AACxB;AACA,eAAe;AACf,aAAa;AACb;AACA,mBAAmB;AACnB;AACA;AACA,CAAC;AACD,uBAAuB;AACvB,CAAC;AACD;AACA,wBAAwB;AACxB;AACA,aAAa;AACb,eAAe;AACf;AACA,yBAAyB;AACzB,0BAA0B;AAC1B,2BAA2B;AAC3B;AACA,gBAAgB;AAChB,cAAc;AACd;AACA;AACA,CAAC;AACD,gDAAgD;AAChD,oBAAoB;AACpB,CAAC;AACD;AACA,wBAAwB;AACxB;AACA,aAAa;AACb,YAAY;AACZ;AACA,aAAa;AACb;AACA;AACA,CAAC;AACD,gCAAgC;AAChC,uCAAuC;AACvC,CAAC;AACD;AACA,wBAAwB;AACxB;AACA,aAAa;AACb,YAAY;AACZ;AACA,2BAA2B;AAC3B;AACA,mBAAmB;AACnB;AACA;AACA,CAAC;AACD,4CAA4C;AAC5C,CAAC;AACD,SAAS;AAC4B;AACrC;AACA,iC;;;;;;;;;;;;ACtHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAkB,SAAI,IAAI,SAAI;AAC9B;AACA;AACA,4CAA4C,QAAQ;AACpD;AACA;AAC4F;AACrD;AACc;AAChB;AAC9B;AACP,yBAAyB,uDAAQ;AACjC;AACA;AACA;AACA;AACA;AACA,yBAAyB,uDAAQ;AACjC;AACA;AACO;AACP,wDAAwD,yEAAkB;AAC1E;AACA;AACA,yBAAyB,kDAAK;AAC9B;AACA;AACA;AACA;AACA,QAAQ,iEAAU;AAClB;AACA;AACA,QAAQ,iEAAU;AAClB;AACA;AACA,QAAQ,6DAAc;AACtB;AACA,0CAA0C,yEAAkB;AAC5D;AACA;AACA;AACA,wBAAwB,wDAAI;AAC5B;AACA;AACA;AACA,QAAQ,iEAAU;AAClB;AACA;AACA,QAAQ,iEAAU;AAClB;AACA;AACA,QAAQ,6DAAc;AACtB;AACA,8CAA8C,yEAAkB;AAChE;AACA;AACA,yBAAyB,kDAAK;AAC9B;AACA;AACA,4BAA4B,kDAAK;AACjC,4BAA4B,kDAAK;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,iEAAU;AAClB;AACA;AACA,QAAQ,iEAAU;AAClB;AACA;AACA,QAAQ,iEAAU;AAClB;AACA;AACA,QAAQ,iEAAU;AAClB;AACA;AACA,QAAQ,iEAAU;AAClB;AACA;AACA,QAAQ,iEAAU;AAClB;AACA;AACA,QAAQ,iEAAU;AAClB;AACA;AACA,QAAQ,iEAAU;AAClB;AACA;AACA,QAAQ,6DAAc;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qC;;;;;;;;;;;;ACnGA;AAAA;AAAA;AAAA;AAAA;AAAqC;AACA;AACe;AAC7C;AACP;AACA,cAAc,+DAAW,MAAM,gDAAI,SAAS,gDAAI;AAChD,oBAAoB,+DAAW;AAC/B,cAAc,+DAAW,MAAM,gDAAI,SAAS,gDAAI;AAChD;AACA;AACA,gC;;;;;;;;;;;;ACVA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA6D;AACV;AAC5C;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA,2BAA2B,mDAAM,CAAC,+DAAoB,cAAc,+DAAoB,eAAe,wBAAwB;AAC/H,sBAAsB,mDAAM,CAAC,+DAAoB,cAAc,+DAAoB;AACnF;AACA,mBAAmB,sDAAS;AAC5B,mBAAmB,qDAAQ;AAC3B;AACA,SAAS;AACT,yBAAyB,mDAAM,CAAC,+DAAoB,WAAW,+DAAoB,aAAa;AAChG,yBAAyB,mDAAM,CAAC,+DAAoB,YAAY,+DAAoB;AACpF,oBAAoB,qDAAQ,WAAW,qDAAQ;AAC/C,mBAAmB,sDAAS;AAC5B;AACA,SAAS;AACT,yBAAyB,mDAAM,CAAC,+DAAoB,cAAc,+DAAoB;AACtF;AACA,SAAS;AACT;AACA;AACgC;AAChC,mC;;;;;;;;;;;;AClCA;AAAA;AAAA;AAAA;AAAA;AAAsC;AACkB;AACD;AAChD;AACP;AACA;AACA;AACA;AACA,gFAAgF,yDAAK;AACrF;AACA;AACA;AACA;AACA;AACA,yBAAyB,uDAAS,aAAa,kEAAa,OAAO,wDAAU;AAC7E;AACA;AACA;AACA;AACA,iCAAiC,uDAAS,aAAa,kEAAa,OAAO,wDAAU;AACrF;AACA;AACA;AACA;AACA,2BAA2B,uDAAS,aAAa,kEAAa,OAAO,wDAAU;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oC;;;;;;;;;;;;ACjCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAsC;AACC;AACE;AAClC;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP,kEAAkE,6DAAa;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,mDAAY;AACnC,qCAAqC,aAAa;AAClD;AACA,sBAAsB,8CAA8C;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,iBAAiB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kEAAkE,aAAa;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D,aAAa;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,6DAAa;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+EAA+E,yDAAK;AACpF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wC;;;;;;;;;;;;AClQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAuC;AACE;AAClC;AACP;AACA;AACA;AACA,qCAAqC,aAAa;AAClD;AACA;AACA;AACA;AACA;AACA;AACO;AACP,sBAAsB,6DAAa;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,6DAAa;AACpC;AACA;AACA,yDAAyD,UAAU;AACnE;AACA;AACA;AACA;AACO;AACP,sBAAsB,6DAAa;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,6DAAa;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,mDAAY;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP,iC;;;;;;;;;;;;AClGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAuC;AACH;AACC;AACA;AACA;AAC9B;AACP,+CAA+C,kDAAK;AACpD,8BAA8B,uDAAG;AACjC;AACA;AACA;AACA;AACA,+BAA+B,gDAAI;AACnC;AACA;AACA,+BAA+B,kDAAK;AACpC;AACA;AACA;AACA;AACA;AACA,+BAA+B,kDAAK;AACpC;AACA;AACA,sBAAsB,wDAAI,yBAAyB,wDAAI;AACvD,sBAAsB,wDAAI,yBAAyB,wDAAI;AACvD,sBAAsB,wDAAI,yBAAyB,wDAAI;AACvD,sBAAsB,wDAAI,yBAAyB,wDAAI;AACvD;AACA,8BAA8B,kDAAK;AACnC,uBAAuB,mBAAmB;AAC1C;AACA;AACA;AACA,uCAAuC,kDAAK;AAC5C;AACA,uBAAuB,WAAW;AAClC,uBAAuB,wDAAI;AAC3B,uBAAuB,wDAAI;AAC3B;AACA;AACA;AACA;AACA,iC;;;;;;;;;;;;AC3CA;AAAA;AAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iC;;;;;;;;;;;;AC7BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAyC;AACH;AACD;AACF;AACnC;AACA,mBAAmB,sDAAsD;AACzE,iCAAiC,kBAAkB;AACnD;AACA;AACA,gBAAgB,WAAW;AAC3B,mBAAmB,WAAW;AAC9B,iBAAiB,QAAQ,6DAAa,SAAS;AAC/C,kBAAkB,QAAQ,6DAAa,UAAU;AACjD,gBAAgB,QAAQ,6DAAa,uBAAuB;AAC5D;AACA,mBAAmB,6DAAa;AAChC;AACA;AACA;AACA,eAAe;AACf;AACO,0BAA0B,+CAAQ;AACzC,6CAA6C,6DAAa;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,wDAAI;AACxB;AACA;AACA,iBAAiB,oBAAoB;AACrC,kBAAkB,oBAAoB;AACtC,4BAA4B,+BAA+B;AAC3D,2BAA2B,8BAA8B;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,iBAAiB,IAAI,kBAAkB;AAC1F;AACA;AACA;AACA;AACA;AACA,mDAAmD,iBAAiB,IAAI,kBAAkB;AAC1F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0FAA0F,yDAAK;AAC/F;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,mCAAmC;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wC;;;;;;;;;;;;AC9FA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAwC;AACjC;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD,oDAAa;AACtE;AACA;AACA;AACA;AACO;AACA;AACA,kBAAkB,QAAQ,0EAA0E;AACpG;AACP;AACA;AACA;AACA;AACA,kC;;;;;;;;;;;;ACxyB;AACjD,iC;;;;;;;;;;;;ACdA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAuC;AACT;AACmB;AACjB;AACzB,oBAAoB,4CAAK;AAChC,qBAAqB,kDAAE;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,aAAa;AAC1C;AACA,6EAA6E,yDAAK;AAClF,6EAA6E,yDAAK;AAClF;AACA,iBAAiB,oBAAoB;AACrC;AACA;AACA;AACA;AACA,kBAAkB,qBAAqB;AACvC;AACA;AACA;AACA;AACA,iBAAiB,oBAAoB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,6DAAS,CAAC,kDAAK;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP,mCAAmC,kDAAE;AACrC;AACA;AACA;AACA;AACA;AACA,0BAA0B,kDAAK;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iC;;;;;;;;;;;;AC/GA;AAAA;AAAsC;AACtC,yC;;;;;;;;;;;;ACDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAkB,SAAI,IAAI,SAAI;AAC9B;AACA;AACA,4CAA4C,QAAQ;AACpD;AACA;AACwD;AACjB;AACb;AACmB;AACnB;AACgB;AACV;AACgC;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,wCAAwC;AACzC;AACO,uBAAuB,4CAAK;AACnC,6BAA6B,kDAAE;AAC/B;AACA;AACA;AACA;AACA;AACA,gCAAgC,aAAa;AAC7C;AACA;AACA,qDAAqD;AACrD;AACA,kBAAkB,qBAAqB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,kCAAkC;AAC5D;AACA,mCAAmC,sDAAa;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,kDAAE;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,gDAAQ,MAAM,gDAAQ;AAC9C,0BAA0B,gDAAQ,MAAM,gDAAQ;AAChD,uEAAuE,gDAAQ;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mEAAmE,gDAAQ;AAC3E;AACA;AACA;AACA,mEAAmE,gDAAQ;AAC3E;AACA;AACA;AACA,qCAAqC,iDAAS;AAC9C;AACA;AACA;AACA;AACA,mCAAmC,+CAAO;AAC1C;AACA;AACA;AACA;AACA,iDAAiD,iDAAS;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,+CAAO;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,6DAAa;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,qBAAqB;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,uBAAuB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACO;AACP,gDAAgD,yBAAyB;AACzE;AACA;AACA;AACA;AACO;AACP;AACA,yBAAyB,kDAAE;AAC3B;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA,6BAA6B,kDAAK;AAClC;AACA;AACA;AACA,mBAAmB,2EAAmB;AACtC;AACA;AACA,mBAAmB,2EAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,oC;;;;;;;;;;;;AC3XA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAqC;AACA;AACE;AACiB;AACP;AACJ;AACb;AACqD;AACrF;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACO,gCAAgC,iEAAmB;AACnD,qBAAqB,6DAAe;AACpC,mBAAmB,4CAAK;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,6DAAa;AACpC,gCAAgC,2DAAa;AAC7C;AACA;AACA,mCAAmC,iDAAS;AAC5C;AACA,oCAAoC,2DAAa;AACjD;AACA;AACA,2BAA2B,6DAAa;AACxC,oCAAoC,2DAAa;AACjD;AACA;AACA;AACA,kCAAkC,6DAAa;AAC/C,gCAAgC,2DAAa;AAC7C;AACA;AACA;AACA;AACA;AACA,+CAA+C,gDAAI;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,gDAAI;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,kDAAK;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,gDAAI;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,gDAAI;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,2BAA2B;AAClD;AACA;AACA;AACA,sBAAsB,yDAAK;AAC3B,sBAAsB,yDAAK;AAC3B,2BAA2B,yDAAK;AAChC,YAAY,gDAAI;AAChB,YAAY,gDAAI;AAChB,YAAY,gDAAI;AAChB;AACA,uBAAuB,0BAA0B;AACjD,YAAY,gDAAI;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,6DAAa;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA,uFAAuF,yDAAK;AAC5F,0FAA0F,yDAAK;AAC/F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,yBAAyB,4CAAK;AACrC,qBAAqB,kDAAE;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,aAAa;AACzC;AACA;AACA;AACA;AACA,iBAAiB,oBAAoB;AACrC;AACA;AACA;AACA;AACA,qBAAqB,wBAAwB;AAC7C;AACA;AACA;AACA;AACA,eAAe,kBAAkB;AACjC;AACA;AACA;AACA;AACA,eAAe,kBAAkB;AACjC;AACA;AACA;AACA;AACA,kBAAkB,qBAAqB;AACvC;AACA;AACA;AACA;AACA,mBAAmB,sBAAsB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,6DAAS,OAAO,wDAAI;AAC3C,uBAAuB,2BAA2B;AAClD;AACA;AACA;AACA,sBAAsB,yDAAK;AAC3B,sBAAsB,yDAAK;AAC3B,2BAA2B,yDAAK;AAChC;AACA;AACA;AACA;AACA,uBAAuB,yBAAyB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,6DAAS,CAAC,kDAAK;AACjE;AACA,4CAA4C,6DAAS,CAAC,wDAAI;AAC1D;AACA,4CAA4C,6DAAS,CAAC,wDAAI;AAC1D;AACA,oDAAoD,6DAAS,CAAC,wDAAI;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,kDAAE;AAChC;AACA;AACA;AACA;AACA;AACA;AACA,6EAA6E,yDAAK;AAClF,6EAA6E,yDAAK;AAClF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kFAAkF,yDAAK;AACvF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gC;;;;;;;;;;;;AC7ZA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAqC;AACC;AACH;AACM;AACQ;AAC1C,2BAA2B,+CAAQ;AAC1C,wCAAwC,6DAAa,iCAAiC,6DAAa;AACnG;AACA;AACA,sBAAsB,6DAAa;AACnC;AACA,oBAAoB,wDAAI;AACxB;AACA;AACA;AACA;AACA,iBAAiB,oBAAoB;AACrC,qBAAqB;AACrB,kBAAkB,oBAAoB;AACtC,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sFAAsF,yDAAK;AAC3F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,0BAA0B,+CAAQ;AACzC,wDAAwD,6DAAa;AACrE;AACA;AACA,sBAAsB,6DAAa;AACnC;AACA,oBAAoB,wDAAI;AACxB,sBAAsB,6DAAa;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,oBAAoB;AACrC,kBAAkB,iBAAiB;AACnC,kBAAkB,oBAAoB;AACtC,mBAAmB,iBAAiB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sFAAsF,yDAAK;AAC3F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yC;;;;;;;;;;;;AC5GA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA0C;AAC4B;AAC/B;AACF;AACQ;AACW;AACnB;AACoB;AACpB;AACe;AAChB;AAC4B;AACd;AAClB;AACzB;AACP;AACA,oCAAoC,gDAAI;AACxC,0BAA0B,gDAAI;AAC9B,gCAAgC,gDAAI;AACpC,sBAAsB,yDAAW;AACjC;AACA;AACA;AACA,mCAAmC,8DAAU,eAAe,yDAAW;AACvE,oCAAoC,yDAAW,QAAQ,yDAAW;AAClE;AACA;AACA;AACA;AACA;AACA,2BAA2B,gDAAI,CAAC,gDAAI,SAAS,wDAAI;AACjD,kBAAkB,6DAAS;AAC3B;AACA;AACA;AACA;AACA;AACA,uBAAuB,iDAAS;AAChC;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA,SAAS;AACT,0BAA0B,oEAAa;AACvC;AACA,aAAa,6DAAa;AAC1B;AACA;AACA,0BAA0B,+DAAW;AACrC,sBAAsB,+DAAW;AACjC,8BAA8B,qDAAY;AAC1C;AACA;AACA;AACA,QAAQ,gEAAgB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,QAAQ,wDAAI,0BAA0B;AAC5D;AACA,QAAQ,gDAAI;AACZ;AACA;AACA;AACA,iCAAiC,yDAAW;AAC5C,6BAA6B,yDAAW;AACxC,6CAA6C,yDAAW;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,6BAA6B;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,sDAAa;AACpC;AACA;AACA;AACA,uBAAuB,sDAAa;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,8CAAW;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,kDAAK;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,yDAAW,oBAAoB,gDAAI,CAAC,gDAAI,gCAAgC,gDAAI,CAAC,gDAAI;AAChH;AACA;AACA;AACA;AACA,4BAA4B,wDAAG;AAC/B,4BAA4B,wDAAG;AAC/B;AACA,oBAAoB,wDAAI;AACxB,oBAAoB,wDAAI;AACxB,oBAAoB,wDAAI;AACxB,oBAAoB,wDAAI;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,gDAAI;AACxC;AACA,6BAA6B,4EAAmB;AAChD,4BAA4B,gDAAI;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,gDAAI;AACxB,oBAAoB,gDAAI;AACxB,YAAY,gDAAI;AAChB,YAAY,gDAAI;AAChB;AACA;AACA,qBAAqB,gDAAI;AACzB,YAAY,gDAAI;AAChB,YAAY,gDAAI;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,wDAAI;AACtB;AACA;AACA;AACA;AACA;AACA,8CAA8C,gDAAI;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,wDAAI;AACtB;AACA;AACA;AACA;AACA;AACA,8CAA8C,gDAAI;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,wDAAI;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,wDAAI;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oC;;;;;;;;;;;;ACjVA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAiD;AACnB;AACkC;AACZ;AACpB;AACqB;AACV;AACpC;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,8BAA8B;AACxB;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,4BAA4B;AACtB;AACP;AACA;AACA;AACA;AACA;AACA,CAAC,0BAA0B;AACpB;AACP;AACA;AACA;AACA;AACA;AACA;AACO,qBAAqB,4CAAK;AACjC,0DAA0D,OAAO,kDAAE;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,aAAa;AAC/C;AACA;AACA;AACA;AACA,4BAA4B,iEAAmB,sCAAsC,uDAAiB;AACtG,4DAA4D;AAC5D;AACA;AACA;AACA,oBAAoB,uBAAuB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,kDAAE;AAChC;AACA;AACA,kBAAkB,yDAAK;AACvB;AACA;AACA;AACA,uBAAuB,6DAAS;AAChC,4BAA4B,6DAAS;AACrC,8BAA8B,6DAAS;AACvC;AACA;AACA;AACA,6DAA6D;AAC7D;AACA;AACA;AACA;AACA,uCAAuC,uEAAmB,mBAAmB,2EAAmB;AAChG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kC;;;;;;;;;;;;ACjLA;AAAA;AAAA;AAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,sCAAsC;AACvC;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0C;;;;;;;;;;;;AC9EA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAyC;AACqB;AACxB;AACN;AACgC;AAC3B;AACe;AACP;AACtC;AACP;AACA;AACA;AACA,CAAC,gCAAgC;AAC1B;AACP;AACA;AACA;AACA;AACA,CAAC,4BAA4B;AACtB,sBAAsB,4CAAK;AAClC;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,0CAA0C;AAC3C,0BAA0B,4CAAK;AAC/B,wCAAwC,6DAAa,6CAA6C,6DAAa;AAC/G;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,aAAa;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,QAAQ,wDAAI,0BAA0B;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,uEAAW;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,mEAAW;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,6DAAa;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA,iFAAiF,yDAAK;AACtF;AACA;AACA;AACA,oDAAoD,6DAAa,6CAA6C,6DAAa;AAC3H;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP,gDAAgD,6DAAa,6CAA6C,6DAAa;AACvH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP,qCAAqC,6DAAa;AAClD,6BAA6B,6DAAa;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP,uDAAuD,6DAAa,6CAA6C,6DAAa;AAC9H;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,yDAAW;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8EAA8E,yDAAK;AACnF,2CAA2C,mEAAW;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+EAA+E,yDAAK;AACpF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,2EAAmB;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mC;;;;;;;;;;;;ACtwB;AACD;AACG;AACF;AACwC;AAChE,iC;;;;;;;;;;;;ACLA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkD;AAC1B;AACxB;AACA;AACA;AACO;AACP;AACA;AACA;AACA,yBAAyB,kEAAa;AACtC;AACA;AACA;AACA,2BAA2B,kEAAa;AACxC;AACA;AACA;AACA,+BAA+B,kEAAa;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA,2C;;;;;;;;;;;;AC/CA;AAAA;AAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iC;;;;;;;;;;;;ACvBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkD;AACE;AACpD,iC;;;;;;;;;;;;ACFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA6D;AACX;AACQ;AACU;AACpE;AACA,kCAAkC,kEAAa;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,gDAAU;AAC1C,4BAA4B,kEAAa;AACzC;AACA,8BAA8B,8CAAQ;AACtC;AACA,0DAA0D;AAC1D,gCAAgC,+CAAS;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACO,4BAA4B,+EAAc;AACjD,4C;;;;;;;;;;;;ACtCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAiC;AAC1B,oBAAoB,6CAAO;AAClC,aAAa,gBAAgB;AAC7B,cAAc,aAAa;AAC3B,aAAa,gBAAgB;AAC7B,cAAc,aAAa;AAC3B,aAAa,gBAAgB;AAC7B,cAAc,aAAa;AAC3B,aAAa,gBAAgB;AAC7B,cAAc,aAAa;AAC3B;AACA;AACA;AACA,wBAAwB,2BAA2B;AACnD,8BAA8B,8BAA8B;AAC5D,wBAAwB,2BAA2B;AACnD,sBAAsB,2BAA2B;AACjD,wBAAwB,2BAA2B;AACnD,uBAAuB,2BAA2B;AAClD,uBAAuB,2BAA2B;AAClD,yBAAyB,2BAA2B;AACpD,0BAA0B,2BAA2B;AACrD,uBAAuB,8BAA8B;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,EAAE;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,IAAI,qBAAqB,IAAI,qBAAqB,IAAI;AACzG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD,IAAI,qBAAqB,IAAI,qBAAqB,IAAI,qBAAqB,IAAI;AACnI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,IAAI;AACrD;AACA;AACO;AACA;AACA;AACP,iC;;;;;;;;;;;;AC/IA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAqC;AACrC,kDAAQ;AACe;AACA;AACA;AACC;AACD;AACA;AACA;AACD;AACC;AACa;AACpC,iC;;;;;;;;;;;;ACZA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA2D;AAC7B;AACA;AACA;AACA;AACS;AACvC;AACA,oBAAoB,0CAAI;AACjB;AACP;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,aAAa;AAC1B;AACA,eAAe,8CAAM;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA,gBAAgB,2DAAY,CAAC,8CAAM;AACnC,WAAW,2DAAY,CAAC,8CAAM;AAC9B,iBAAiB,2DAAY,CAAC,8CAAM;AACpC,cAAc,2DAAY,CAAC,8CAAM;AACjC,sBAAsB,2DAAY,CAAC,8CAAM,oBAAoB,0CAAI;AACjE,mBAAmB,2DAAY,CAAC,8CAAM,iBAAiB,0CAAI;AAC3D,kBAAkB,2DAAY,CAAC,8CAAM,gBAAgB,0CAAI;AACzD,eAAe,2DAAY,gBAAgB,8CAAM,8BAA8B,0CAAI;AACnF,mBAAmB,2DAAY,CAAC,8CAAM;AACtC,iBAAiB,2DAAY,CAAC,8CAAM;AACpC,cAAc,2DAAY,wBAAwB,8CAAM;AACxD,aAAa,2DAAY,CAAC,8CAAM;AAChC,uBAAuB,2DAAY,CAAC,8CAAM;AAC1C,oBAAoB,2DAAY,CAAC,8CAAM;AACvC,mBAAmB,2DAAY,CAAC,8CAAM;AACtC,WAAW,2DAAY,CAAC,8CAAM;AAC9B,WAAW,2DAAY,CAAC,8CAAM;AAC9B,WAAW,2DAAY,CAAC,8CAAM;AAC9B;AACA;AACA,iBAAiB,2DAAY;AAC7B;AACA;AACA;AACA;AACA,IAAI,8CAAM;AACV;AACA;AACA;AACA;AACA,CAAC,KAAK,0CAAI;AACV,gBAAgB,2DAAY;AAC5B;AACA;AACA;AACA;AACA,IAAI,8CAAM;AACV;AACA;AACA;AACA;AACA,CAAC,KAAK,0CAAI;AACV,iBAAiB,2DAAY;AAC7B;AACA;AACA;AACA;AACA,IAAI,8CAAM;AACV;AACA;AACA;AACA,CAAC,KAAK,0CAAI;AACV,kBAAkB,2DAAY;AAC9B;AACA;AACA;AACA;AACA,IAAI,8CAAM;AACV;AACA;AACA;AACA,CAAC,KAAK,0CAAI;AACV;AACA;AACA,IAAI,8CAAM;AACV;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,8CAAM;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,8CAAM;AACjB;AACA,WAAW,2DAAY,CAAC,8CAAM;AAC9B,YAAY,2DAAY;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA,gC;;;;;;;;;;;;AC/JA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAuC;AACA;AACA;AACT;AAC9B;AACA;AACA,aAAa,6CAAO;AACpB,mBAAmB,kDAAI;AACvB,aAAa,6CAAO;AACpB,mBAAmB,kDAAI;AACvB,aAAa,6CAAO;AACpB,mBAAmB,kDAAI;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C,0CAAI,WAAW,0CAAI;AAChE;AACA,6CAA6C,0CAAI,WAAW,0CAAI;AAChE;AACA,6CAA6C,0CAAI,WAAW,0CAAI;AAChE;AACA,6CAA6C,0CAAI,WAAW,0CAAI;AAChE;AACA,+CAA+C,OAAO;AACtD;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,mBAAmB,0CAAI;AACvB;AACA,mBAAmB,0CAAI;AACvB;AACA,mBAAmB,0CAAI;AACvB;AACA,+CAA+C,cAAc;AAC7D,WAAW,0CAAI;AACf;AACO;AACP;AACA;AACA;AACA;AACA;AACA,mBAAmB,0CAAI;AACvB;AACA,mBAAmB,0CAAI;AACvB;AACA,mBAAmB,0CAAI;AACvB;AACA,+CAA+C,cAAc;AAC7D,WAAW,0CAAI;AACf;AACO;AACP;AACA;AACA;AACA;AACA;AACA,mBAAmB,0CAAI;AACvB;AACA,mBAAmB,0CAAI;AACvB;AACA,mBAAmB,0CAAI;AACvB;AACA,+CAA+C,cAAc;AAC7D,WAAW,0CAAI;AACf;AACO;AACP;AACA;AACA;AACA;AACA;AACA,mBAAmB,0CAAI;AACvB;AACA,mBAAmB,0CAAI;AACvB;AACA,mBAAmB,0CAAI;AACvB;AACA,+CAA+C,cAAc;AAC7D,WAAW,0CAAI;AACf;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,2BAA2B,0CAAI;AACtC;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACO;AACP;AACA;AACA,0BAA0B,0CAAI;AAC9B,eAAe,0CAAI;AACnB,eAAe,0CAAI;AACnB;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,kDAAI;AAC1C,kCAAkC,kDAAI;AACtC;AACA,0BAA0B,0CAAI;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,kDAAI;AAC1C,kCAAkC,kDAAI;AACtC;AACA,0BAA0B,0CAAI;AAC9B;AACA,iDAAiD;AACjD,iDAAiD;AACjD,uBAAuB;AACvB,uBAAuB;AACvB,qBAAqB,kDAAI,QAAQ,iBAAiB;AAClD;AACA;AACA,qBAAqB,kDAAI,QAAQ;AACjC;AACA;AACA;AACA,qBAAqB,kDAAI,OAAO;AAChC;AACA;AACA;AACA;AACA,qBAAqB,kDAAI,OAAO;AAChC;AACA;AACA,0BAA0B,0CAAI;AAC9B;AACA;AACA;AACA;AACA;AACA;AACO;AACA;AACP,gC;;;;;;;;;;;;AC5KA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA2D;AAC7B;AACG;AACM;AACvC;AACO;AACP;AACA;AACA;AACA,aAAa,aAAa;AAC1B;AACA;AACA;AACA,eAAe,8CAAM;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,gBAAgB,2DAAY,CAAC,8CAAM;AACnC,iBAAiB,2DAAY,qBAAqB,8CAAM;AACxD,WAAW,2DAAY,CAAC,8CAAM;AAC9B,cAAc,2DAAY,CAAC,8CAAM;AACjC,iBAAiB,2DAAY,CAAC,8CAAM;AACpC,aAAa,2DAAY;AACzB,8FAA8F,6CAAO;AACrG,0DAA0D,6CAAO;AACjE,2FAA2F,6CAAO;AAClG;AACA,CAAC,KAAK,0CAAI;AACV,iBAAiB,2DAAY,kBAAkB,8CAAM;AACrD,cAAc,2DAAY,gBAAgB,8CAAM,8BAA8B,0CAAI;AAClF;AACA,WAAW,8CAAM;AACjB;AACA,gC;;;;;;;;;;;;ACvDA;AAAA;AAAO;AACP,YAAY;AACZ;AACA,+B;;;;;;;;;;;;ACHA;AAAA;AAAA;AAAA;AAAqC;AACP;AACvB;AACP;AACA;AACA,mBAAmB,kDAAI;AACvB;AACA,gBAAgB,mBAAmB;AACnC,gBAAgB,mBAAmB;AACnC,gBAAgB,mBAAmB;AACnC,gBAAgB,mBAAmB;AACnC,iBAAiB,gCAAgC;AACjD,kBAAkB,gCAAgC;AAClD,gBAAgB,QAAQ,mDAAK,qBAAqB;AAClD,kBAAkB,QAAQ,kDAAI,yBAAyB,kDAAI,MAAM;AACjE;AACA,kBAAkB,kDAAI,WAAW,kDAAI;AACrC,kBAAkB,mDAAK,WAAW,kDAAI;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,mDAAK,WAAW,kDAAI,cAAc,kDAAI,YAAY,kDAAI;AAC9E;AACA;AACA,wBAAwB,0CAAI,SAAS,0CAAI;AACzC;AACA;AACA,gC;;;;;;;;;;;;AC/BA;AAAA;AAAA;AAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACO;AACP;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iC;;;;;;;;;;;;ACzCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAuC;AACA;AACA;AACI;AAC3C;AACO;AACP,aAAa,gBAAgB;AAC7B,cAAc,aAAa;AAC3B,aAAa,gBAAgB;AAC7B,cAAc,aAAa;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,2BAA2B;AAC9C,oBAAoB,0BAA0B;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,aAAa;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,kDAAI;AACnB;AACA;AACA;AACA,iBAAiB,6CAAO;AACxB,uBAAuB,kDAAI;AAC3B,iBAAiB,6CAAO;AACxB,uBAAuB,kDAAI;AAC3B;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,2DAAY;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,aAAa,2DAAY;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,WAAW,2DAAY;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,WAAW,2DAAY;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,WAAW,2DAAY;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,eAAe,2DAAY;AAC3B;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,2DAAY,CAAC,8CAAM;AACpC,qBAAqB,2DAAY;AACjC;AACA;AACA;AACA,CAAC;AACD,WAAW,2DAAY;AACvB;AACA;AACA;AACA,CAAC;AACD,YAAY,2DAAY;AACxB;AACA;AACA,CAAC;AACD,gC;;;;;;;;;;;;AC3NA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAuC;AACA;AACA;AACI;AAC3C;AACO;AACP,aAAa,gBAAgB;AAC7B,cAAc,aAAa;AAC3B,aAAa,gBAAgB;AAC7B,cAAc,aAAa;AAC3B,aAAa,gBAAgB;AAC7B,cAAc,aAAa;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,aAAa;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,kDAAI;AACnB;AACA;AACA,eAAe,kDAAI;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,6CAAO;AACxB,uBAAuB,kDAAI;AAC3B,iBAAiB,6CAAO;AACxB,uBAAuB,kDAAI;AAC3B;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,2DAAY,CAAC,8CAAM;AACpC,eAAe,2DAAY,CAAC,8CAAM;AAClC,cAAc,2DAAY,CAAC,8CAAM;AACjC,YAAY,2DAAY;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,aAAa,2DAAY;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,WAAW,2DAAY;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,WAAW,2DAAY;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,WAAW,2DAAY;AACvB;AACA;AACA;AACA;AACA,CAAC;AACD,YAAY,2DAAY;AACxB;AACA;AACA,CAAC;AACD;AACA,gC;;;;;;;;;;;;ACtNA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAuC;AACA;AACI;AACJ;AACvC;AACO;AACP,aAAa,gBAAgB;AAC7B,cAAc,aAAa;AAC3B,aAAa,gBAAgB;AAC7B,cAAc,aAAa;AAC3B,aAAa,gBAAgB;AAC7B,cAAc,aAAa;AAC3B,aAAa,gBAAgB;AAC7B,cAAc,aAAa;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,aAAa;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,6CAAO;AACxB,uBAAuB,kDAAI;AAC3B,iBAAiB,6CAAO;AACxB,uBAAuB,kDAAI;AAC3B;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,2DAAY,CAAC,8CAAM;AACpC,YAAY,2DAAY;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,aAAa,2DAAY;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,WAAW,2DAAY;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,WAAW,2DAAY;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,WAAW,2DAAY;AACvB;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,YAAY,2DAAY;AACxB;AACA;AACA,CAAC;AACD,gC;;;;;;;;;;;;AC5MA;AAAA;AAAA;AAAA;AAAA;AAAqC;AACA;AAC9B;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,kCAAkC;AAC5B;AACP,sBAAsB,gDAAI,CAAC,gDAAI;AAC/B,sBAAsB,gDAAI,CAAC,gwC;;;;;;;;;;;;AClHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA+B;AACS;AACvB;AACjB,iC;;;;;;;;;;;;ACHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkD;AACH;AACQ;AAChD;AACP,6FAA6F,4DAAiB,QAAQ,kEAAa;AACnI;AACA;AACA,wBAAwB,+CAAI;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,kBAAkB;AAC7C;AACA;AACA;AACA,uBAAuB,sBAAsB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,2CAAI,gBAAgB,2CAAI,cAAc,kEAAa;AAC5E,yBAAyB,2CAAI;AAC7B,yBAAyB,+CAAI;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,kEAAa;AACtC,yBAAyB,2CAAI,SAAS,mDAAI;AAC1C;AACA,6BAA6B,kEAAa;AAC1C,yBAAyB,+CAAI;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,2CAAI,gBAAgB,2CAAI,cAAc,kEAAa;AAC5E;AACA,YAAY,mDAAI;AAChB,YAAY,mDAAI;AAChB,YAAY,mDAAI;AAChB,YAAY,mDAAI;AAChB,YAAY,mDAAI;AAChB,YAAY,mDAAI;AAChB,YAAY,mDAAI;AAChB,YAAY,mDAAI;AAChB;AACA;AACA,YAAY,mDAAI;AAChB,YAAY,mDAAI;AAChB,YAAY,mDAAI;AAChB,YAAY,mDAAI;AAChB;AACA,2CAA2C,4DAAiB;AAC5D;AACA;AACA;AACA,oBAAoB,mDAAI;AACxB,SAAS;AACT;AACA;AACA,oBAAoB,mDAAI;AACxB,SAAS;AACT;AACA;AACA,oBAAoB,mDAAI;AACxB,SAAS;AACT;AACA;AACA,oBAAoB,mDAAI;AACxB,SAAS;AACT;AACA;AACA;AACA,oBAAoB,mDAAI;AACxB,SAAS;AACT;AACA;AACA,oBAAoB,mDAAI;AACxB,SAAS;AACT;AACA;AACA,oBAAoB,mDAAI;AACxB,SAAS;AACT;AACA;AACA,oBAAoB,mDAAI;AACxB,SAAS;AACT;AACA;AACA;AACA,oBAAoB,mDAAI;AACxB,SAAS;AACT;AACA;AACA,oBAAoB,mDAAI;AACxB,SAAS;AACT;AACA;AACA,oBAAoB,mDAAI;AACxB,SAAS;AACT;AACA;AACA,oBAAoB,mDAAI;AACxB,SAAS;AACT;AACA;AACA;AACA,oBAAoB,mDAAI;AACxB,SAAS;AACT;AACA;AACA,oBAAoB,mDAAI;AACxB,SAAS;AACT;AACA;AACA,oBAAoB,mDAAI;AACxB,SAAS;AACT;AACA;AACA,oBAAoB,mDAAI;AACxB,SAAS;AACT;AACA;AACA;AACA,oBAAoB,mDAAI;AACxB,SAAS;AACT;AACA;AACA,oBAAoB,mDAAI;AACxB,SAAS;AACT;AACA;AACA,oBAAoB,mDAAI;AACxB,SAAS;AACT;AACA;AACA,oBAAoB,mDAAI;AACxB,SAAS;AACT;AACA;AACA;AACA,oBAAoB,mDAAI;AACxB,SAAS;AACT;AACA;AACA,oBAAoB,mDAAI;AACxB,SAAS;AACT;AACA;AACA,oBAAoB,mDAAI;AACxB,SAAS;AACT;AACA;AACA,oBAAoB,mDAAI;AACxB,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,yCAAyC,2CAAI,4CAA4C,kEAAa;AACtG;AACA;AACA;AACA,uBAAuB,+CAAI;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,OAAO;AAC9B,2BAA2B,eAAe;AAC1C,+BAA+B,eAAe;AAC9C;AACA,8BAA8B,mDAAI;AAClC,8BAA8B,mDAAI;AAClC,8BAA8B,mDAAI;AAClC,8BAA8B,mDAAI;AAClC,8BAA8B,mDAAI;AAClC,8BAA8B,mDAAI;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,2CAAI;AAC7B,sBAAsB,2CAAI;AAC1B;AACA;AACA;AACA;AACA,yCAAyC,4CAAK;AAC9C;AACA;AACA,SAAS;AACT;AACA,uBAAuB,OAAO;AAC9B,2BAA2B,eAAe;AAC1C,+BAA+B,eAAe;AAC9C;AACA,8BAA8B,mDAAI;AAClC,8BAA8B,mDAAI;AAClC,8BAA8B,mDAAI;AAClC,8BAA8B,mDAAI;AAClC,8BAA8B,mDAAI;AAClC,8BAA8B,mDAAI;AAClC;AACA;AACA;AACA;AACA,2BAA2B,cAAc;AACzC,+BAA+B,cAAc;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP,oCAAoC,kEAAa;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,kBAAkB;AACzC;AACA;AACA,6BAA6B,4CAAK;AAClC;AACA,uBAAuB,kBAAkB;AACzC;AACA;AACA;AACA,2CAA2C,4CAAK,gBAAgB,mDAAI;AACpE;AACA;AACA;AACA,uBAAuB,kBAAkB;AACzC;AACA;AACA;AACA;AACA,uBAAuB,sBAAsB;AAC7C;AACA;AACA;AACA;AACA,yBAAyB,+CAAI;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,2CAAI,gBAAgB,2CAAI;AACjD,yBAAyB,kDAAG,OAAO,mDAAI;AACvC,yBAAyB,+CAAI;AAC7B;AACA,YAAY,mDAAI;AAChB,YAAY,mDAAI;AAChB,YAAY,mDAAI;AAChB,YAAY,mDAAI;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,mDAAI;AAChB,YAAY,mDAAI;AAChB,YAAY,mDAAI;AAChB,YAAY,mDAAI;AAChB;AACA;AACA,YAAY,mDAAI;AAChB,YAAY,mDAAI;AAChB,YAAY,mDAAI;AAChB,YAAY,mDAAI;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,2CAAI,SAAS,mDAAI;AAC1C;AACA;AACA,yBAAyB,+CAAI;AAC7B;AACA,YAAY,mDAAI;AAChB,YAAY,mDAAI;AAChB,YAAY,mDAAI;AAChB;AACA;AACA;AACA,YAAY,mDAAI;AAChB,YAAY,mDAAI;AAChB,YAAY,mDAAI;AAChB;AACA;AACA,YAAY,mDAAI;AAChB,YAAY,mDAAI;AAChB,YAAY,mDAAI;AAChB;AACA;AACA;AACA;AACA;AACA,wC;;;;;;;;;;;;AChYA;AAAA;AAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uC;;;;;;;;;;;;ACdA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA+B;AAC/B,wC;;;;;;;;;;;;ACDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA0B;AACnB;AACP;AACA;AACA;AACA;AACO;AACP;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA,mBAAmB,WAAW;AAC9B;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA,mBAAmB,0CAA0C;AAC7D,wBAAwB,2CAA2C;AACnE,gBAAgB,gDAAgD;AAChE,qBAAqB,iDAAiD;AACtE;AACA;AACA;AACA;AACO;AACP;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gC;;;;;;;;;;;;ACnEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACO;AACA;AACA;AACP;AACA;AACA;AACA,WAAW,2CAA2C;AACtD;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,QAAQ;AACrB;;AAEO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,E;;;;;;;;;;;;ACjDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAwC;AACN;AACE;AACF;AACA;AACA;AACE;AACF;AACA;AACA;;;;;;;;;;;;;ACTlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAwC;AACxC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,KAAK;AAClB;;AAEO;AACP,gBAAgB,qDAAmB;;AAEnC,MAAM,qDAAmB;AACzB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,aAAa;AACxB,aAAa,KAAK;AAClB;;AAEO;AACP,gBAAgB,qDAAmB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,aAAa;AACxB,aAAa,KAAK;AAClB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;;AAEO;AACP,gBAAgB,qDAAmB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,aAAa;AACxB,aAAa,KAAK;AAClB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,aAAa;AACxB,aAAa,KAAK;AAClB;;AAEO;AACP;AACA;AACA;AACA,gBAAgB;;AAEhB;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,aAAa;AACxB,aAAa,KAAK;AAClB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,aAAa;AACxB,aAAa,OAAO;AACpB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,aAAa;AACxB,WAAW,aAAa;AACxB,aAAa,KAAK;AAClB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,aAAa;AACxB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,aAAa;AACxB,WAAW,aAAa;AACxB,aAAa,KAAK;AAClB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,aAAa;AACxB,aAAa,KAAK;AAClB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,aAAa;AACxB,aAAa,OAAO;AACpB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA,WAAW,aAAa;AACxB,aAAa,OAAO;AACpB;;AAEO;AACP;AACA;AACA;AACA;AACA,WAAW,aAAa;AACxB,WAAW,aAAa;AACxB,WAAW,aAAa;AACxB,WAAW,aAAa;AACxB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,aAAa;AACxB,WAAW,aAAa;AACxB,aAAa,KAAK;AAClB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,aAAa;AACxB,WAAW,aAAa;AACxB,aAAa,KAAK;AAClB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,aAAa;AACxB,WAAW,aAAa;AACxB,aAAa,QAAQ;AACrB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA,WAAW,aAAa;AACxB,WAAW,aAAa;AACxB,aAAa,QAAQ;AACrB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,kDAAgB,qEAAqE,kDAAgB,qEAAqE,kDAAgB,qEAAqE,kDAAgB;AAC7S;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,aAAa;AACxB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,aAAa;AACxB,WAAW,aAAa;AACxB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;;AAEO;AACP;AACA,cAAc;AACd;AACA;;AAEO,mB;;;;;;;;;;;;AC/aP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAwC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,MAAM;AACnB;;AAEO;AACP,gBAAgB,qDAAmB;;AAEnC,MAAM,qDAAmB;AACzB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP,gBAAgB,qDAAmB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,MAAM;AACnB;;AAEO;AACP,gBAAgB,qDAAmB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,aAAa,OAAO;AACpB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,OAAO;AAClB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,aAAa;AACxB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,aAAa;AACxB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,OAAO;AAClB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,aAAa;AACxB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,aAAa;AACxB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,aAAa,OAAO;AACpB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,aAAa,OAAO;AACpB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,OAAO;AAClB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,WAAW,OAAO;AAClB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,QAAQ;AACrB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,QAAQ;AACrB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,kDAAgB,qEAAqE,kDAAgB,qEAAqE,kDAAgB,qEAAqE,kDAAgB,qEAAqE,kDAAgB,qEAAqE,kDAAgB;AACvd;AACA;AACA,cAAc;AACd;AACA;;AAEO;AACP;AACA,cAAc;AACd;AACA;;AAEO,mB;;;;;;;;;;;;ACreP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAwC;AACxC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,KAAK;AAClB;;AAEO;AACP,gBAAgB,qDAAmB;;AAEnC,MAAM,qDAAmB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,aAAa;AACxB,aAAa,KAAK;AAClB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,aAAa;AACxB,aAAa,KAAK;AAClB;;AAEO;AACP,gBAAgB,qDAAmB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,aAAa;AACxB,aAAa,KAAK;AAClB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;;AAEO;AACP,gBAAgB,qDAAmB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,aAAa;AACxB,aAAa,KAAK;AAClB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,aAAa;AACxB,aAAa,KAAK;AAClB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;;AAElC;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,aAAa;AACxB,aAAa,KAAK;AAClB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,aAAa;AACxB,aAAa,OAAO;AACpB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,aAAa;AACxB,WAAW,aAAa;AACxB,aAAa,KAAK;AAClB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,aAAa;AACxB,WAAW,aAAa;AACxB,aAAa,KAAK;AAClB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,aAAa;AACxB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,aAAa;AACxB,WAAW,aAAa;AACxB,aAAa,KAAK;AAClB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,aAAa;AACxB,aAAa,KAAK;AAClB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,aAAa;AACxB,aAAa,KAAK;AAClB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,cAAc;AACzB,aAAa,KAAK;AAClB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,aAAa;AACxB;AACA,aAAa,KAAK;AAClB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,aAAa;AACxB;AACA,aAAa,KAAK;AAClB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;;AAElC;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,aAAa;AACxB,aAAa,OAAO;AACpB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA,WAAW,aAAa;AACxB,aAAa,OAAO;AACpB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,aAAa;AACxB,WAAW,aAAa;AACxB,aAAa,KAAK;AAClB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,aAAa;AACxB,WAAW,aAAa;AACxB,aAAa,KAAK;AAClB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,aAAa;AACxB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,aAAa;AACxB,WAAW,aAAa;AACxB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,aAAa;AACxB,WAAW,aAAa;AACxB,aAAa,QAAQ;AACrB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA,WAAW,aAAa;AACxB,WAAW,aAAa;AACxB,aAAa,QAAQ;AACrB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,kDAAgB,qEAAqE,kDAAgB,qEAAqE,kDAAgB,qEAAqE,kDAAgB,qEAAqE,kDAAgB,qEAAqE,kDAAgB,qEAAqE,kDAAgB,qEAAqE,kDAAgB,qEAAqE,kDAAgB;AACttB;AACA;AACA,cAAc;AACd;AACA;;AAEO;AACP;AACA,cAAc;AACd;AACA;;AAEO,mB;;;;;;;;;;;;ACzwBP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAwC;AACxC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,KAAK;AAClB;;AAEO;AACP,gBAAgB,qDAAmB;;AAEnC,MAAM,qDAAmB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,aAAa;AACxB,aAAa,KAAK;AAClB;;AAEO;AACP,gBAAgB,qDAAmB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,aAAa;AACxB,aAAa,KAAK;AAClB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;;AAEO;AACP,gBAAgB,qDAAmB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,aAAa;AACxB,aAAa,KAAK;AAClB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,aAAa;AACxB,aAAa,KAAK;AAClB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;;AAElC;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,aAAa;AACxB,aAAa,KAAK;AAClB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,aAAa;AACxB,aAAa,OAAO;AACpB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;;AAElC;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,aAAa;AACxB,WAAW,aAAa;AACxB,aAAa,KAAK;AAClB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;;AAElB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,aAAa;AACxB,WAAW,aAAa;AACxB,aAAa,KAAK;AAClB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,aAAa;AACxB,WAAW,aAAa;AACxB,aAAa,KAAK;AAClB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,aAAa;AACxB,WAAW,OAAO;AAClB,WAAW,aAAa;AACxB,aAAa,KAAK;AAClB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAY,kDAAgB;AAC5B;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;;AAEd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;;AAEtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,aAAa;AACxB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;;AAGH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,aAAa;AACxB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;;AAGH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,aAAa;AACxB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;;AAGH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,aAAa;AACxB,aAAa,KAAK;AAClB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,aAAa;AACxB,aAAa,KAAK;AAClB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,WAAW,aAAa;AACxB,aAAa,KAAK;AAClB;;AAEO;AACP;AACA;AACA;AACA;AACA;;AAEA,YAAY,kDAAgB;AAC5B;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;;AAEZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;;AAEO;AACP;AACA,wBAAwB;;AAExB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;;AAEO;AACP;AACA,wBAAwB;;AAExB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;;AAEO;AACP;AACA,wBAAwB;;AAExB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,MAAM;AACjB,WAAW,aAAa;AACxB,aAAa,KAAK;AAClB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,cAAc;AACzB,aAAa,KAAK;AAClB;;AAEO;AACP,wBAAwB,qDAAmB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD;;AAExD;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,KAAK;AACjB,YAAY,aAAa;AACzB,YAAY,KAAK;AACjB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,KAAK;AACjB,YAAY,aAAa;AACzB,YAAY,KAAK;AACjB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,aAAa;AACxB,YAAY,KAAK;AACjB;;AAEO;AACP,oBAAoB,qDAAmB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,MAAM;AACjB,WAAW,aAAa;AACxB,WAAW,aAAa;AACxB,aAAa,KAAK;AAClB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,MAAM;AACjB,WAAW,aAAa;AACxB,WAAW,aAAa;AACxB,WAAW,aAAa;AACxB,aAAa,KAAK;AAClB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,aAAa;AACxB;AACA,aAAa,KAAK;AAClB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,aAAa;AACxB,WAAW,aAAa;AACxB,WAAW,aAAa;AACxB,aAAa,KAAK;AAClB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,iCAAiC,kDAAgB,+BAA+B,kDAAgB,+BAA+B,kDAAgB;AAC/I;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,aAAa;AACxB,WAAW,aAAa;AACxB,WAAW,aAAa;AACxB,aAAa,KAAK;AAClB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,aAAa;AACxB,aAAa,OAAO;AACpB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA,WAAW,aAAa;AACxB,aAAa,OAAO;AACpB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,aAAa;AACxB,WAAW,aAAa;AACxB,aAAa,KAAK;AAClB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,aAAa;AACxB,WAAW,aAAa;AACxB,aAAa,KAAK;AAClB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,aAAa;AACxB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,aAAa;AACxB,WAAW,aAAa;AACxB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,aAAa;AACxB,WAAW,aAAa;AACxB,aAAa,QAAQ;AACrB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA,WAAW,aAAa;AACxB,WAAW,aAAa;AACxB,aAAa,QAAQ;AACrB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,kDAAgB,qEAAqE,kDAAgB,qEAAqE,kDAAgB,qEAAqE,kDAAgB,qEAAqE,kDAAgB,qEAAqE,kDAAgB,qEAAqE,kDAAgB,qEAAqE,kDAAgB,qEAAqE,kDAAgB,qEAAqE,kDAAgB,uEAAuE,kDAAgB,yEAAyE,kDAAgB,yEAAyE,kDAAgB,yEAAyE,kDAAgB,yEAAyE,kDAAgB,yEAAyE,kDAAgB;AAC/zC;AACA;AACA,cAAc;AACd;AACA;;AAEO;AACP;AACA,cAAc;AACd;AACA;;AAEO,mB;;;;;;;;;;;;ACrxDP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAwC;AACN;AACA;AACA;AAClC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,KAAK;AAClB;;AAEO;AACP,gBAAgB,qDAAmB;;AAEnC,MAAM,qDAAmB;AACzB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,aAAa;AACxB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,KAAK;AACjB,YAAY,aAAa;AACzB,YAAY,OAAO;AACnB;;AAEO;AACP;AACA;;AAEA,UAAU,kDAAgB;AAC1B;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,YAAY,aAAa;AACzB,YAAY,aAAa;AACzB,YAAY,OAAO;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,aAAa;AACxB,WAAW,aAAa;AACxB,aAAa,KAAK;AAClB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,aAAa;AACxB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,aAAa;AACxB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,aAAa;AACxB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,aAAa;AACxB,aAAa,KAAK;AAClB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,aAAa;AACxB,aAAa,KAAK;AAClB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,aAAa;AACxB,aAAa,KAAK;AAClB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,aAAa;AACxB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,aAAa;AACxB,WAAW,aAAa;AACxB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C;;AAE1C,gDAAgD;;AAEhD;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;;AAGH,oBAAoB,kDAAgB;AACpC;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;;;AAGH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;;AAEO;AACP;AACA;AACA,WAAW,iDAAe;AAC1B,WAAW,iDAAe;AAC1B,WAAW,iDAAe;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,aAAa;AACxB,aAAa,KAAK;AAClB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA,mCAAmC;;AAEnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,aAAa;AACxB,aAAa,KAAK;AAClB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,aAAa;AACxB,aAAa,KAAK;AAClB;AACA;;AAEO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA,oCAAoC;;AAEpC;AACA,wBAAwB;;AAExB;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,EAAE;AACb,aAAa,KAAK;AAClB;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,aAAa;AACxB,aAAa,OAAO;AACpB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA,WAAW,aAAa;AACxB,aAAa,KAAK;AAClB;AACA;;AAEO,YAAY,8CAAU;AAC7B;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;;AAEO,iBAAiB,mDAAe;AACvC;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,aAAa;AACxB,aAAa,KAAK;AAClB;AACA;;AAEO,WAAW,6CAAS;AAC3B;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;;AAEO,UAAU,4CAAQ;AACzB;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,aAAa;AACxB,WAAW,aAAa;AACxB,aAAa,KAAK;AAClB;AACA;;AAEO,UAAU,4CAAQ;AACzB;AACA,cAAc;AACd;AACA;;AAEO;AACP;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,aAAa;AACxB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;;AAEO,YAAY,8CAAU;AAC7B;AACA;AACA;AACA,WAAW,aAAa;AACxB,WAAW,aAAa;AACxB,aAAa,OAAO;AACpB;AACA;;AAEO,UAAU,4CAAQ;AACzB;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,aAAa;AACxB,WAAW,aAAa;AACxB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;AACA;;AAEO,WAAW,6CAAS;AAC3B;AACA;AACA;AACA,WAAW,aAAa;AACxB,aAAa,OAAO;AACpB;;AAEO,aAAa,+CAAW;AAC/B;AACA,cAAc;AACd;AACA;;AAEO;AACP;AACA;AACA;AACA,WAAW,aAAa;AACxB,aAAa,OAAO;AACpB;AACA;;AAEO,oBAAoB,sDAAkB;AAC7C;AACA,cAAc;AACd;AACA;;AAEO;AACP;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,aAAa;AACxB,aAAa,KAAK;AAClB;AACA;;AAEO,gBAAgB,kDAAc;AACrC;AACA;AACA;AACA,WAAW,aAAa;AACxB,WAAW,aAAa;AACxB,aAAa,QAAQ;AACrB;;AAEO,kBAAkB,oDAAgB;AACzC;AACA;AACA;AACA,WAAW,aAAa;AACxB,WAAW,aAAa;AACxB,aAAa,QAAQ;AACrB;;AAEO,aAAa,+CAAW;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,aAAa;AACxB,WAAW,aAAa;AACxB,aAAa,KAAK;AAClB;;AAEO;AACP,gBAAgB,+CAAW;AAC3B,kBAAkB,mDAAe;AACjC,kBAAkB,mDAAe;AACjC;AACA,cAAc,4CAAQ;;AAEtB;AACA,MAAM,8CAAU;AAChB,UAAU,4CAAQ,sBAAsB,8CAAU;AAClD,MAAM,kDAAc;AACpB;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,MAAM,8CAAU;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,aAAa;AACxB,WAAW,aAAa;AACxB,WAAW,aAAa;AACxB,WAAW,aAAa;AACxB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,WAAW,aAAa;AACxB,WAAW,aAAa;AACxB,WAAW,aAAa;AACxB,aAAa,KAAK;AAClB;;AAEO;AACP,aAAa,+CAAW;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,G;;;;;;;;;;;;ACrsBD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAwC;AACN;AACA;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,MAAM;AACnB;;AAEO;AACP,eAAe,qDAAmB;;AAElC,MAAM,qDAAmB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;AACA;;AAEO;AACP,eAAe,qDAAmB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,MAAM;AACnB;AACA;;AAEO;AACP,eAAe,qDAAmB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,MAAM;AACnB;AACA;;AAEO;AACP,eAAe,qDAAmB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,WAAW,aAAa;AACxB,WAAW,aAAa;AACxB,aAAa,MAAM;AACnB;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,WAAW,aAAa;AACxB,aAAa,MAAM;AACnB;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,WAAW,aAAa;AACxB,aAAa,MAAM;AACnB;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,aAAa;AACxB,aAAa,MAAM;AACnB;AACA;;AAEO;AACP;AACA,cAAc,+CAAW;AACzB,EAAE,oDAAgB;AAClB,cAAc,qDAAmB;AACjC,EAAE,uDAAmB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,MAAM;AACnB;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,KAAK;AACjB,YAAY,cAAc;AAC1B,YAAY,KAAK;AACjB;;AAEO,cAAc,6CAAS;AAC9B;AACA;AACA,YAAY,KAAK;AACjB,YAAY,cAAc;AAC1B,YAAY,KAAK;AACjB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,aAAa;AACxB,aAAa,MAAM;AACnB;AACA;;AAEO,cAAc,6CAAS;AAC9B;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,aAAa;AACxB,aAAa,MAAM;AACnB;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,KAAK;AACjB,YAAY,cAAc;AAC1B,YAAY,KAAK;AACjB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,aAAa;AACxB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,OAAO;AAClB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,gDAAY;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,OAAO;AAClB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,gDAAY;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,OAAO;AAClB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,gDAAY;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,aAAa;AACxB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,aAAa;AACxB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,aAAa;AACxB,WAAW,OAAO;AAClB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA,sBAAsB,kDAAgB;AACtC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;;AAEO;AACP;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,OAAO;AAClB,aAAa,MAAM;AACnB;AACA;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,OAAO;AACpB;AACA;;AAEO,UAAU,4CAAQ;AACzB;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,WAAW,OAAO;AAClB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,aAAa,OAAO;AACpB;AACA;;AAEO,aAAa,+CAAW;AAC/B;AACA,cAAc;AACd;AACA;;AAEO;AACP;AACA;AACA;AACA,WAAW,cAAc;AACzB,aAAa,OAAO;AACpB;AACA;;AAEO,oBAAoB,sDAAkB;AAC7C;AACA,cAAc;AACd;AACA;;AAEO;AACP;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,cAAc;AACzB,aAAa,MAAM;AACnB;AACA;;AAEO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,aAAa,OAAO;AACpB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,QAAQ;AACrB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA,WAAW,cAAc;AACzB,WAAW,cAAc;AACzB,aAAa,QAAQ;AACrB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,kDAAgB,qEAAqE,kDAAgB,qEAAqE,kDAAgB,qEAAqE,kDAAgB,qEAAqE,kDAAgB,qEAAqE,kDAAgB,qEAAqE,kDAAgB,qEAAqE,kDAAgB;AACjoB,C;;;;;;;;;;;;ACl0BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAwC;AACxC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,KAAK;AAClB;;AAEO;AACP,gBAAgB,qDAAmB;;AAEnC,MAAM,qDAAmB;AACzB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,aAAa;AACxB,aAAa,KAAK;AAClB;;AAEO;AACP,gBAAgB,qDAAmB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;;AAEO;AACP,gBAAgB,qDAAmB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,aAAa;AACxB,aAAa,KAAK;AAClB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,aAAa;AACxB,WAAW,aAAa;AACxB,aAAa,KAAK;AAClB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,aAAa;AACxB,WAAW,aAAa;AACxB,aAAa,KAAK;AAClB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,aAAa;AACxB,WAAW,aAAa;AACxB,aAAa,KAAK;AAClB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,aAAa;AACxB,WAAW,aAAa;AACxB,aAAa,KAAK;AAClB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,aAAa;AACxB,aAAa,KAAK;AAClB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,aAAa;AACxB,aAAa,KAAK;AAClB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,aAAa;AACxB,WAAW,aAAa;AACxB,aAAa,KAAK;AAClB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,aAAa;AACxB,WAAW,aAAa;AACxB,aAAa,KAAK;AAClB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,aAAa;AACxB,aAAa,KAAK;AAClB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,aAAa;AACxB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,aAAa;AACxB,WAAW,aAAa;AACxB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,aAAa;AACxB,WAAW,aAAa;AACxB,aAAa,OAAO;AACpB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,aAAa;AACxB,WAAW,aAAa;AACxB,aAAa,OAAO;AACpB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,aAAa;AACxB,aAAa,OAAO;AACpB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,aAAa;AACxB,aAAa,OAAO;AACpB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,aAAa;AACxB,aAAa,KAAK;AAClB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,aAAa;AACxB,aAAa,KAAK;AAClB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,aAAa;AACxB,aAAa,KAAK;AAClB;;AAEO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,aAAa;AACxB,WAAW,aAAa;AACxB,aAAa,OAAO;AACpB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,aAAa;AACxB,WAAW,aAAa;AACxB,aAAa,KAAK;AAClB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,aAAa;AACxB,WAAW,aAAa;AACxB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;;AAEO;AACP;AACA,UAAU,iDAAe;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,aAAa;AACxB,WAAW,aAAa;AACxB,aAAa,KAAK;AAClB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,aAAa;AACxB,WAAW,cAAc;AACzB,aAAa,KAAK;AAClB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,aAAa;AACxB,WAAW,aAAa;AACxB,aAAa,KAAK;AAClB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,aAAa;AACxB,WAAW,aAAa;AACxB,aAAa,KAAK;AAClB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,aAAa;AACxB,WAAW,aAAa;AACxB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;;AAEO;AACP;AACA;AACA;AACA;AACA,2BAA2B;;AAE3B;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,aAAa;AACxB,WAAW,aAAa;AACxB,aAAa,OAAO;AACpB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C;;AAE5C;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,aAAa;AACxB,aAAa,OAAO;AACpB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA,WAAW,aAAa;AACxB,WAAW,aAAa;AACxB,aAAa,QAAQ;AACrB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA,WAAW,aAAa;AACxB,WAAW,aAAa;AACxB,aAAa,QAAQ;AACrB;;AAEO;AACP;AACA;AACA;AACA;AACA,8BAA8B,kDAAgB,qEAAqE,kDAAgB;AACnI;AACA;AACA,cAAc;AACd;AACA;;AAEO;AACP;AACA,cAAc;AACd;AACA;;AAEO;AACP;AACA,cAAc;AACd;AACA;;AAEO;AACP;AACA,cAAc;AACd;AACA;;AAEO;AACP;AACA,cAAc;AACd;AACA;;AAEO;AACP;AACA,cAAc;AACd;AACA;;AAEO;AACP;AACA,cAAc;AACd;AACA;;AAEO;AACP;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB,WAAW,OAAO;AAClB,aAAa,MAAM;AACnB;AACA;;AAEO;AACP;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;;AAEA,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,CAAC,G;;;;;;;;;;;;AC/mBD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAwC;AACxC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,KAAK;AAClB;;AAEO;AACP,gBAAgB,qDAAmB;;AAEnC,MAAM,qDAAmB;AACzB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,aAAa;AACxB,aAAa,KAAK;AAClB;;AAEO;AACP,gBAAgB,qDAAmB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,aAAa;AACxB,aAAa,OAAO;AACpB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;;AAEO;AACP,gBAAgB,qDAAmB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,aAAa;AACxB,aAAa,KAAK;AAClB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,aAAa;AACxB,WAAW,aAAa;AACxB,aAAa,KAAK;AAClB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,aAAa;AACxB,WAAW,aAAa;AACxB,aAAa,KAAK;AAClB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,aAAa;AACxB,WAAW,aAAa;AACxB,aAAa,KAAK;AAClB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,aAAa;AACxB,WAAW,aAAa;AACxB,aAAa,KAAK;AAClB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,aAAa;AACxB,aAAa,KAAK;AAClB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,aAAa;AACxB,aAAa,KAAK;AAClB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,aAAa;AACxB,WAAW,aAAa;AACxB,aAAa,KAAK;AAClB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,aAAa;AACxB,WAAW,aAAa;AACxB,aAAa,KAAK;AAClB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,aAAa;AACxB,aAAa,KAAK;AAClB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,aAAa;AACxB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,aAAa;AACxB,WAAW,aAAa;AACxB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,aAAa;AACxB,WAAW,aAAa;AACxB,aAAa,OAAO;AACpB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,aAAa;AACxB,WAAW,aAAa;AACxB,aAAa,OAAO;AACpB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,aAAa;AACxB,aAAa,OAAO;AACpB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,aAAa;AACxB,aAAa,KAAK;AAClB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,aAAa;AACxB,aAAa,KAAK;AAClB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,aAAa;AACxB,aAAa,KAAK;AAClB;;AAEO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,aAAa;AACxB,WAAW,aAAa;AACxB,aAAa,OAAO;AACpB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,aAAa;AACxB,WAAW,aAAa;AACxB,aAAa,KAAK;AAClB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,aAAa;AACxB,WAAW,aAAa;AACxB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,aAAa;AACxB,WAAW,aAAa;AACxB,WAAW,aAAa;AACxB,WAAW,aAAa;AACxB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,aAAa;AACxB,WAAW,aAAa;AACxB,WAAW,aAAa;AACxB,WAAW,aAAa;AACxB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;;AAEO;AACP;AACA,UAAU,iDAAe;AACzB,UAAU,iDAAe;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,aAAa;AACxB,WAAW,aAAa;AACxB,aAAa,KAAK;AAClB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,aAAa;AACxB,WAAW,aAAa;AACxB,aAAa,KAAK;AAClB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,aAAa;AACxB,WAAW,aAAa;AACxB,aAAa,KAAK;AAClB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;;AAEA;AACA;AACA,4BAA4B;;AAE5B;AACA;AACA,iCAAiC;;AAEjC;AACA;AACA;AACA,YAAY;;AAEZ;AACA;AACA,YAAY;;AAEZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,aAAa;AACxB,WAAW,aAAa;AACxB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;;AAEO;AACP;AACA,aAAa;;AAEb;AACA;AACA,qBAAqB;;AAErB;AACA;AACA,qDAAqD;;AAErD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,aAAa;AACxB,WAAW,aAAa;AACxB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;;AAEO;AACP;AACA,aAAa;;AAEb;AACA;AACA,qBAAqB;;AAErB;AACA;AACA,qDAAqD;;AAErD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,aAAa;AACxB,WAAW,aAAa;AACxB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;;AAEO;AACP;AACA,aAAa;;AAEb;AACA;AACA,qBAAqB;;AAErB;AACA;AACA,cAAc;;AAEd;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,aAAa;AACxB,WAAW,aAAa;AACxB,aAAa,OAAO;AACpB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,aAAa;AACxB,aAAa,OAAO;AACpB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA,WAAW,aAAa;AACxB,WAAW,aAAa;AACxB,aAAa,QAAQ;AACrB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA,WAAW,aAAa;AACxB,WAAW,aAAa;AACxB,aAAa,QAAQ;AACrB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,kDAAgB,qEAAqE,kDAAgB,qEAAqE,kDAAgB;AACxN;AACA;AACA,cAAc;AACd;AACA;;AAEO;AACP;AACA,cAAc;AACd;AACA;;AAEO;AACP;AACA,cAAc;AACd;AACA;;AAEO;AACP;AACA,cAAc;AACd;AACA;;AAEO;AACP;AACA,cAAc;AACd;AACA;;AAEO;AACP;AACA,cAAc;AACd;AACA;;AAEO;AACP;AACA,cAAc;AACd;AACA;;AAEO;AACP;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB,WAAW,OAAO;AAClB,aAAa,MAAM;AACnB;AACA;;AAEO;AACP;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;;AAEA,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,CAAC,G;;;;;;;;;;;;AClxBD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAwC;AACxC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa,KAAK;AAClB;;AAEO;AACP,gBAAgB,qDAAmB;;AAEnC,MAAM,qDAAmB;AACzB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,aAAa;AACxB,aAAa,KAAK;AAClB;;AAEO;AACP,gBAAgB,qDAAmB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;;AAEO;AACP,gBAAgB,qDAAmB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,aAAa;AACxB,aAAa,KAAK;AAClB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,aAAa;AACxB,WAAW,aAAa;AACxB,aAAa,KAAK;AAClB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,aAAa;AACxB,WAAW,aAAa;AACxB,aAAa,KAAK;AAClB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,aAAa;AACxB,WAAW,aAAa;AACxB,aAAa,KAAK;AAClB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,aAAa;AACxB,WAAW,aAAa;AACxB,aAAa,KAAK;AAClB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,aAAa;AACxB,aAAa,KAAK;AAClB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,aAAa;AACxB,aAAa,KAAK;AAClB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,aAAa;AACxB,WAAW,aAAa;AACxB,aAAa,KAAK;AAClB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,aAAa;AACxB,WAAW,aAAa;AACxB,aAAa,KAAK;AAClB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,aAAa;AACxB,aAAa,KAAK;AAClB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,aAAa;AACxB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,aAAa;AACxB,WAAW,aAAa;AACxB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,aAAa;AACxB,WAAW,aAAa;AACxB,aAAa,OAAO;AACpB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,aAAa;AACxB,WAAW,aAAa;AACxB,aAAa,OAAO;AACpB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,aAAa;AACxB,aAAa,OAAO;AACpB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,aAAa;AACxB,aAAa,OAAO;AACpB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,aAAa;AACxB,aAAa,KAAK;AAClB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,aAAa;AACxB,aAAa,KAAK;AAClB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,aAAa;AACxB,aAAa,KAAK;AAClB;;AAEO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,aAAa;AACxB,WAAW,aAAa;AACxB,aAAa,OAAO;AACpB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA,WAAW,aAAa;AACxB,WAAW,aAAa;AACxB,WAAW,aAAa;AACxB,WAAW,aAAa;AACxB,aAAa,KAAK;AAClB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,aAAa;AACxB,WAAW,aAAa;AACxB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB;;AAEO;AACP,uBAAuB;AACvB;AACA;;AAEA;AACA;;AAEA;AACA,SAAS,iDAAe;AACxB,SAAS,iDAAe;AACxB;AACA,GAAG;;AAEH;AACA,SAAS,iDAAe;AACxB,SAAS,iDAAe;AACxB;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,aAAa;AACxB,WAAW,aAAa;AACxB,aAAa,KAAK;AAClB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,WAAW,aAAa;AACxB,WAAW,aAAa;AACxB,aAAa,KAAK;AAClB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;;AAEhB;AACA;AACA;AACA,qCAAqC;;AAErC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,KAAK;AAChB,aAAa,KAAK;AAClB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,aAAa;AACxB,aAAa,OAAO;AACpB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA,WAAW,aAAa;AACxB,WAAW,aAAa;AACxB,aAAa,QAAQ;AACrB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA,WAAW,aAAa;AACxB,WAAW,aAAa;AACxB,aAAa,QAAQ;AACrB;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,kDAAgB,qEAAqE,kDAAgB,qEAAqE,kDAAgB,qEAAqE,kDAAgB;AAC7S;AACA;AACA,cAAc;AACd;AACA;;AAEO;AACP;AACA,cAAc;AACd;AACA;;AAEO;AACP;AACA,cAAc;AACd;AACA;;AAEO;AACP;AACA,cAAc;AACd;AACA;;AAEO;AACP;AACA,cAAc;AACd;AACA;;AAEO;AACP;AACA,cAAc;AACd;AACA;;AAEO;AACP;AACA,cAAc;AACd;AACA;;AAEO;AACP;AACA;AACA;AACA,WAAW,MAAM;AACjB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB,WAAW,OAAO;AAClB,aAAa,MAAM;AACnB;AACA;;AAEO;AACP;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;;AAEA,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,CAAC,G;;;;;;;;;;;ACtpBD;AACA;AACA,+DAA+D;AAC/D;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD,mDAAmD;AAC3G;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,iEAAiE;AACjE,6BAA6B,gBAAgB,kBAAkB;AAC/D;AACA;AACA;AACA;AACA,+BAA+B,4CAA4C;AAC3E;AACA,mCAAmC,wBAAwB,kBAAkB,EAAE;AAC/E,mCAAmC,yBAAyB,EAAE,EAAE;AAChE;AACA,uCAAuC,8BAA8B;AACrE,uCAAuC,mBAAmB,EAAE;AAC5D;AACA,uCAAuC,qDAAqD;AAC5F,uCAAuC,iBAAiB,EAAE;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC,2CAA2C;AAC3C,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C;AAC1C;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC,2CAA2C;AAC3C,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uGAAuG;AACvG;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC,2CAA2C;AAC3C,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gFAAgF;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC,2CAA2C;AAC3C,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qEAAqE;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC,2CAA2C;AAC3C,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qEAAqE;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC,2CAA2C;AAC3C,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC,2CAA2C;AAC3C,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC,2CAA2C;AAC3C,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uEAAuE;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC,2CAA2C;AAC3C,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,QAAQ;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,QAAQ;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,uBAAuB;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,0BAA0B;AACjF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mEAAmE,aAAa;AAChF,qEAAqE,aAAa;AAClF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC;AAChC;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,0BAA0B,EAAE;AAClE;AACA;AACA,iBAAiB;AACjB,oDAAoD,+CAA+C;AACnG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,UAAU;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,0DAA0D;AAC5G,oDAAoD,4DAA4D;AAChH,qDAAqD,4DAA4D;AACjH,2DAA2D,uBAAuB;AAClF,6DAA6D,uBAAuB;AACpF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,uBAAuB,EAAE;AAC/D;AACA;AACA,iBAAiB;AACjB,sDAAsD,6BAA6B;AACnF,sDAAsD,0CAA0C;AAChG,yDAAyD,gCAAgC;AACzF,mDAAmD,mBAAmB;AACtE,kDAAkD,yBAAyB;AAC3E,oDAAoD,2BAA2B;AAC/E,qDAAqD,4BAA4B;AACjF,2DAA2D,oBAAoB;AAC/E,6DAA6D,oBAAoB;AACjF;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D,0BAA0B;AACtF;AACA;AACA;AACA;AACA,+BAA+B,UAAU;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,oBAAoB;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,CAAC,0BAA0B;;;;;;;;;;;;;AC1mC3B;AACA,kCAAkC,mBAAO,CAAC,wGAAmD;AAC7F;AACA;AACA,cAAc,QAAS,aAAa,kBAAkB,mBAAmB,2BAA2B,oBAAoB,qBAAqB,yBAAyB,sBAAsB,iCAAiC,4BAA4B,gCAAgC,+BAA+B,4GAA4G,2DAA2D,mCAAmC,sMAAsM,KAAK,eAAe,wBAAwB,yBAAyB,KAAK,iBAAiB,wBAAwB,yBAAyB,KAAK;AACz1B;AACA;;;;;;;;;;;;;ACNa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;;AAEhB;AACA;AACA;;AAEA;AACA,4CAA4C,qBAAqB;AACjE;;AAEA;AACA,KAAK;AACL,IAAI;AACJ;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,qBAAqB,iBAAiB;AACtC;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,oBAAoB,qBAAqB;AACzC;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,8BAA8B;;AAE9B;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA,CAAC;;;AAGD;AACA;AACA;AACA,qDAAqD,cAAc;AACnE;AACA,C;;;;;;;;;;;AC7FA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,uBAAuB,sBAAsB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,qCAAqC;;AAErC;AACA;AACA;;AAEA,2BAA2B;AAC3B;AACA;AACA;AACA,4BAA4B,UAAU;;;;;;;;;;;;;ACvLzB;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA,uDAAuD;;AAEvD;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,CAAC;;AAED;;AAEA;AACA;;AAEA,iBAAiB,wBAAwB;AACzC;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA,iBAAiB,iBAAiB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,gBAAgB,KAAwC,GAAG,sBAAiB,GAAG,SAAI;;AAEnF;AACA;AACA;AACA;;AAEA;AACA;AACA,GAAG;;AAEH;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA,qEAAqE,qBAAqB,aAAa;;AAEvG;;AAEA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA,yDAAyD;AACzD,GAAG;;AAEH;;;AAGA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA,0BAA0B;AAC1B;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;;AAEA;;AAEA,oBAAoB,6BAA6B;AACjD;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,E;;;;;;;;;;;AC5QA;;AAEA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;;AAEA;AACA;AACA,4CAA4C;;AAE5C;;;;;;;;;;;;ACnBA,UAAU,mBAAO,CAAC,sJAA2E;AAC7F,0BAA0B,mBAAO,CAAC,uHAAwD;;AAE1F;;AAEA;AACA,0BAA0B,QAAS;AACnC;;AAEA;;AAEA;AACA;;AAEA;;;;AAIA,sC;;;;;;;;;;;;AClBA;AAAA;AAAA;AAAA;AAAiU;AACzS;AAGxB,MAAM,MAAM,GAAG,QAAQ,CAAC,aAAa,CAAC,SAAS,CAAsB,CAAC;AACtE,MAAM,MAAM,GAAG,IAAI,wDAAW,CAAC,MAAM,EAAE,oEAAuB,CAAC,CAAC;AAChE,MAAM,CAAC,cAAc,GAAG,IAAI,CAAC;AAC7B,MAAM,CAAC,cAAc,CAAC,iBAAiB,GAAG,kDAAK,CAAC,KAAK,CAAC;AACtD,MAAM,KAAK,GAAG,IAAI,yDAAY,CAAC,EAC9B,CAAC,CAAC;AACH,MAAM,CAAC,KAAK,EAAE,CAAC;AAEf,MAAM,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC;AAC1B,MAAc,CAAC,KAAK,GAAG,KAAK,CAAC;AAE9B,KAAK,UAAU,IAAI;IAGf,MAAM,MAAM,GAAG,IAAI,mDAAM,EAAE,CAAC;IAC5B,MAAM,CAAC,QAAQ,GAAG,yDAAI,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;IACjC,MAAM,CAAC,UAAU,GAAG,uDAAU,CAAC,YAAY,CAAC;IAC5C,MAAM,CAAC,UAAU,GAAG,EAAE,CAAC;IACvB,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;IACjB,MAAc,CAAC,MAAM,GAAG,MAAM,CAAC;IAEhC,MAAM,cAAc,GAAG,IAAI,2DAAc,EAAE,CAAC;IAC5C,cAAc,CAAC,QAAQ,GAAG,GAAG,CAAC;IAC9B,cAAc,CAAC,QAAQ,GAAG,CAAC,CAAC;IAC5B,cAAc,CAAC,SAAS,GAAG,CAAC,CAAC;IAC7B,cAAc,CAAC,UAAU,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;IACpC,cAAc,CAAC,aAAa,GAAG,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,GAAG,EAAE,CAAC;IAC5E,cAAc,CAAC,UAAU,GAAG,GAAG,EAAE,CAAE,kDAAK,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,GAAG,CAAC,sDAAS,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,CAAC,MAAM,EAAE,CAAC,CAAW,CAAC;IACvI,cAAc,CAAC,QAAQ,CAAC,wBAAwB,CAAC;QAC7C,KAAK,EAAE,CAAC,qDAAQ,CAAC,QAAQ,EAAE,qDAAQ,CAAC,gBAAgB,CAAC;QACrD,KAAK,EAAE,sDAAS,CAAC,OAAO;KAC3B,CAAC,CAAC;IACH,KAAK,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;IAC1B,cAAc,CAAC,IAAI,EAAE,CAAC;IAErB,MAAc,CAAC,cAAc,GAAG,cAAc,CAAC;IAEhD,MAAM,CAAC,EAAE,CAAC,QAAQ,EAAE,GAAG,EAAE;QAErB,KAAK,CAAC,MAAM,EAAE,CAAC;QAEf,IAAI,KAAK,CAAC,UAAU,CAAC,iDAAI,CAAC,MAAM,CAAC,EACjC;YACI,MAAM,GAAG,GAAG,MAAM,CAAC,aAAa,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC;YACxD,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;YACV,cAAc,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;SACjC;IACL,CAAC,CAAC;AAEN,CAAC;AACD,IAAI,EAAE,CAAC","file":"js/particle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/particle.ts\");\n","export * from \"./physics/box-collider\";\r\nexport * from \"./physics/collider2d\";\r\nexport * from \"./physics/physics-2d\";\r\nexport * from \"./physics/rigidbody2d\";\r\nexport * from \"./physics/tilemap-collider\";\r\nexport * from \"./rendering/sprite\";\r\nexport * from \"./rendering/sprite-object\";\r\nexport * from \"./rendering/tilemap\";\r\nexport * from \"./rendering/materials\";\r\nexport * from \"./rendering/line-renderer\";\r\nexport * from \"./rendering/light-2d\";\r\n//# sourceMappingURL=index.js.map","import { vec2 } from \"zogra-renderer\";\r\nimport { Collider2D } from \"./collider2d\";\r\nimport { checkContactBoxBox } from \"./collision/box-box\";\r\nimport { checkCollisionTilemapBox, checkContactTilemapBox } from \"./collision/tilemap-box\";\r\nimport { TilemapCollider } from \"./tilemap-collider\";\r\nexport class BoxCollider extends Collider2D {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.offset = vec2.zero();\r\n        this.size = vec2.one();\r\n    }\r\n    /** @internal */\r\n    checkCollision(other, otherMotion) {\r\n        if (other instanceof TilemapCollider)\r\n            return checkCollisionTilemapBox(other, this, otherMotion.negative);\r\n        console.warn(\"Unimplemented collision check\");\r\n        return null;\r\n    }\r\n    /** @internal */\r\n    checkContact(other) {\r\n        if (other instanceof TilemapCollider)\r\n            return checkContactTilemapBox(other, this);\r\n        else if (other instanceof BoxCollider)\r\n            return checkContactBoxBox(this, other);\r\n        console.warn(\"Unimplemented collision check\");\r\n        return false;\r\n    }\r\n}\r\n//# sourceMappingURL=box-collider.js.map","import { EventEmitter } from \"zogra-renderer\";\r\nimport { ColliderBase } from \"../../physics/physics-generic\";\r\nexport class Collider2D extends ColliderBase {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.rigidbody = null;\r\n        this.enabled = true;\r\n        /** @internal */\r\n        this.__eventEmitter = new EventEmitter();\r\n        /** @internal */\r\n        this.__colliderIdx = -1;\r\n    }\r\n    on(event, listener) {\r\n        this.__eventEmitter.on(event, listener);\r\n    }\r\n    off(event, listener) {\r\n        this.__eventEmitter.on(event, listener);\r\n    }\r\n    /** @internal */\r\n    checkCollision(other, otherMotoin) {\r\n        return null;\r\n    }\r\n    checkContact(other) {\r\n        return false;\r\n    }\r\n}\r\n//# sourceMappingURL=collider2d.js.map","import { vec2 } from \"zogra-renderer\";\r\nexport function checkContactBoxBox(self, other) {\r\n    if (!self.entity || !other.entity)\r\n        return false;\r\n    const selfCenter = self.entity.position.toVec2().plus(self.offset);\r\n    const otherCenter = other.entity.position.toVec2().plus(other.offset);\r\n    const offset = vec2.math(Math.abs)(vec2.minus(otherCenter, selfCenter));\r\n    if (offset.x <= (self.size.x + other.size.x) / 2 && offset.y <= (self.size.y + other.size.y) / 2)\r\n        return true;\r\n    return false;\r\n}\r\n//# sourceMappingURL=box-box.js.map","import { boxRaycast, div, dot, minus, plus, Rect, vec2 } from \"zogra-renderer\";\r\nimport { Debug } from \"zogra-renderer/dist/core/global\";\r\nexport function checkContactTilemapBox(tilemap, box) {\r\n    var _a;\r\n    if (!tilemap.entity || !box.entity)\r\n        return false;\r\n    const center = box.entity.position.toVec2().plus(box.offset);\r\n    const centerTile = vec2.math(Math.floor)(center).plus(0.5);\r\n    const tileDistance = vec2.math(Math.ceil)(vec2.mul(box.size, 0.5));\r\n    for (var y = -tileDistance.y; y <= tileDistance.y; y++)\r\n        for (var x = -tileDistance.x; x <= tileDistance.x; x++) {\r\n            const tileCenter = vec2(x, y).plus(centerTile);\r\n            const tile = (_a = tilemap.tilemap) === null || _a === void 0 ? void 0 : _a.getTile(tileCenter);\r\n            if (tile === null || tile === void 0 ? void 0 : tile.collide) {\r\n                if (Math.abs(center.x - tileCenter.x) <= box.size.x / 2 + 0.5 && Math.abs(center.y - tileCenter.y) <= box.size.y / 2 + 0.5)\r\n                    return true;\r\n            }\r\n        }\r\n    return false;\r\n}\r\nexport function checkCollisionTilemapBox(tilemap, box, boxMotion) {\r\n    if (!box.entity || !tilemap.tilemap)\r\n        return null;\r\n    const halfSize = div(box.size, 2); // colliderSize / 2\r\n    const center = box.entity.position.toVec2().plus(box.offset);\r\n    const centerBeforeMotion = minus(center, boxMotion); // this.position + this.colliderOffset\r\n    const tileDistance = vec2.math(Math.ceil)(halfSize);\r\n    const centerFloor = vec2.math(Math.floor)(centerBeforeMotion);\r\n    const motionDistance = boxMotion.magnitude;\r\n    let everHit = false;\r\n    let hitNormal = vec2.zero();\r\n    let nearestHit = Number.MAX_VALUE;\r\n    for (var y = -tileDistance.y; y <= tileDistance.y; y++)\r\n        for (var x = -tileDistance.x; x <= tileDistance.x; x++) {\r\n            const rect = new Rect(vec2(x, y).plus(centerFloor), plus(box.size, 1));\r\n            Debug().drawRect(rect);\r\n            const [hit, distance, normal] = boxRaycast(rect, centerBeforeMotion, boxMotion);\r\n            if (hit && distance > 0 && distance <= motionDistance && dot(normal, boxMotion) < 0) {\r\n                if (distance < nearestHit) {\r\n                    everHit = true;\r\n                    hitNormal = normal;\r\n                }\r\n            }\r\n        }\r\n    if (everHit) {\r\n        const hitPoint = boxMotion.normalized.mul(nearestHit).plus(centerBeforeMotion);\r\n        return {\r\n            self: tilemap,\r\n            other: box,\r\n            point: hitPoint,\r\n            seperation: minus(hitPoint, center),\r\n        };\r\n    }\r\n    return null;\r\n}\r\n//# sourceMappingURL=tilemap-box.js.map","import { minus, mul, vec2 } from \"zogra-renderer\";\r\nexport class Physics2D {\r\n    constructor() {\r\n        this.gravity = vec2.zero();\r\n        this.colliderList = [];\r\n    }\r\n    /** @internal */\r\n    __addCollider(collider) {\r\n        collider = collider;\r\n        collider.__colliderIdx = this.colliderList.push(collider) - 1;\r\n    }\r\n    /** @internal */\r\n    __removeCollider(collider) {\r\n        // Swap tail collider and remove\r\n        const coll = collider;\r\n        if (coll.__colliderIdx >= 0) {\r\n            if (this.colliderList.length > 1) {\r\n                const tailCollider = this.colliderList[this.colliderList.length - 1];\r\n                tailCollider.__colliderIdx = coll.__colliderIdx;\r\n                this.colliderList[coll.__colliderIdx] = tailCollider;\r\n            }\r\n            this.colliderList.length--;\r\n        }\r\n    }\r\n    /** @internal */\r\n    __getColliders() {\r\n        return this.colliderList;\r\n    }\r\n    update(time) {\r\n        var _a, _b, _c, _d, _e;\r\n        this.updateMotion(time);\r\n        for (let i = 0; i < this.colliderList.length; i++) {\r\n            const colliderA = this.colliderList[i];\r\n            for (let j = i + 1; j < this.colliderList.length; j++) {\r\n                if (i === j)\r\n                    continue;\r\n                const colliderB = this.colliderList[j];\r\n                if (colliderA.checkContact(colliderB)) {\r\n                    colliderA.__eventEmitter.emit(\"onContact\", colliderB);\r\n                    colliderB.__eventEmitter.emit(\"onContact\", colliderA);\r\n                }\r\n                else\r\n                    continue;\r\n                if (!colliderA.rigidbody && !colliderB.rigidbody)\r\n                    continue;\r\n                const [self, other] = (!colliderB.rigidbody) ? [colliderB, colliderA] : [colliderA, colliderB];\r\n                const relativeMotion = minus((_b = (_a = other.rigidbody) === null || _a === void 0 ? void 0 : _a._motion) !== null && _b !== void 0 ? _b : vec2.zero(), (_d = (_c = self.rigidbody) === null || _c === void 0 ? void 0 : _c._motion) !== null && _d !== void 0 ? _d : vec2.zero());\r\n                const collision = self.checkCollision(other, relativeMotion);\r\n                if (collision) {\r\n                    if (self.rigidbody && other.rigidbody) {\r\n                        console.warn(\"Collision between two rigidbody is not implement\");\r\n                        continue;\r\n                    }\r\n                    (_e = other.entity) === null || _e === void 0 ? void 0 : _e.translate(collision.seperation.toVec3());\r\n                    self.__eventEmitter.emit(\"onCollide\", collision);\r\n                    collision.self = other;\r\n                    collision.other = self;\r\n                    other.__eventEmitter.emit(\"onCollide\", collision);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    updateMotion(time) {\r\n        var _a;\r\n        const gravity = this.gravity;\r\n        const applyGravity = gravity.x !== 0 && gravity.y !== 0;\r\n        for (let i = 0; i < this.colliderList.length; i++) {\r\n            const rigidbody = this.colliderList[i].rigidbody;\r\n            if (!rigidbody)\r\n                continue;\r\n            if (applyGravity)\r\n                rigidbody.addAcceleration(gravity);\r\n            rigidbody._velocity.x += rigidbody._acceleration.x * time.deltaTime;\r\n            rigidbody._velocity.y += rigidbody._acceleration.y * time.deltaTime;\r\n            const motion = mul(rigidbody._velocity, time.deltaTime);\r\n            (_a = rigidbody.collider.entity) === null || _a === void 0 ? void 0 : _a.translate(motion.toVec3());\r\n            rigidbody._motion = motion;\r\n        }\r\n    }\r\n}\r\n//# sourceMappingURL=physics-2d.js.map","import { Rect, vec2 } from \"zogra-renderer\";\r\nexport class Polygon {\r\n    constructor(capacity = 0) {\r\n        this.bound = new Rect(vec2.zero(), vec2.zero());\r\n        this.points = new Array();\r\n    }\r\n    append(vert) {\r\n        this.points.push(vert);\r\n        this.bound.min.x = Math.min(vert.x, this.bound.min.x);\r\n        this.bound.min.y = Math.min(vert.y, this.bound.min.y);\r\n        this.bound.max.x = Math.max(vert.x, this.bound.max.x);\r\n        this.bound.max.y = Math.max(vert.y, this.bound.max.y);\r\n    }\r\n}\r\n//# sourceMappingURL=polygon.js.map","import { vec2 } from \"zogra-renderer\";\r\nexport class Rigidbody2D {\r\n    constructor(collider) {\r\n        this.mass = 1;\r\n        /** @internal */\r\n        this._velocity = vec2.zero();\r\n        /** @internal */\r\n        this._acceleration = vec2.zero();\r\n        /** @internal */\r\n        this._motion = vec2.zero();\r\n        this.collider = collider;\r\n    }\r\n    get velocity() { return this._velocity; }\r\n    set velocity(v) { this._velocity.set(v); }\r\n    get acceleration() { return this._acceleration; }\r\n    addForce(force) {\r\n        this._acceleration.x += force.x / this.mass;\r\n        this._acceleration.y += force.y / this.mass;\r\n    }\r\n    addAcceleration(acrl) {\r\n        this._acceleration.plus(acrl);\r\n    }\r\n    setAcceleration(acrl) {\r\n        this._acceleration.set(acrl);\r\n    }\r\n    setForce(force) {\r\n        this._acceleration.x = force.x / this.mass;\r\n        this._acceleration.y = force.y / this.mass;\r\n    }\r\n    clearForce() {\r\n        this._acceleration.x = 0;\r\n        this._acceleration.y = 0;\r\n    }\r\n}\r\n//# sourceMappingURL=rigidbody2d.js.map","import { vec2 } from \"zogra-renderer\";\r\nimport { Tilemap } from \"../rendering/tilemap\";\r\nimport { BoxCollider } from \"./box-collider\";\r\nimport { Collider2D } from \"./collider2d\";\r\nimport { checkCollisionTilemapBox, checkContactTilemapBox } from \"./collision/tilemap-box\";\r\nexport class TilemapCollider extends Collider2D {\r\n    constructor() {\r\n        super(...arguments);\r\n        this._tilemap = null;\r\n    }\r\n    get tilemap() { return this._tilemap; }\r\n    /** @internal */\r\n    __bind(entity, scene) {\r\n        super.__bind(entity, scene);\r\n        if (entity instanceof Tilemap)\r\n            this._tilemap = entity;\r\n    }\r\n    /** @internal */\r\n    checkCollision(other, otherMotion) {\r\n        if (other instanceof BoxCollider)\r\n            return checkCollisionTilemapBox(this, other, otherMotion);\r\n        console.warn(\"Unimplemented collision check\");\r\n        return null;\r\n    }\r\n    /** @internal */\r\n    checkContact(other) {\r\n        if (other instanceof BoxCollider)\r\n            return checkContactTilemapBox(this, other);\r\n        console.warn(\"Unimplemented contact check\");\r\n        return false;\r\n    }\r\n    getPolygons(min, max) {\r\n        if (!this.tilemap)\r\n            return null;\r\n        const pos = vec2.zero();\r\n        const polygons = [];\r\n        for (let y = min.y; y < max.y + this.tilemap.chunkSize; y += this.tilemap.chunkSize) {\r\n            for (let x = min.x; x < max.x + this.tilemap.chunkSize; x += this.tilemap.chunkSize) {\r\n                pos.x = x;\r\n                pos.y = y;\r\n                const chunk = this.tilemap.getChunkAt(pos);\r\n                polygons.push(...chunk.getPolygons());\r\n            }\r\n        }\r\n        return polygons;\r\n    }\r\n}\r\n//# sourceMappingURL=tilemap-collider.js.map","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nimport { Color, Culling, DefaultVertexData, FilterMode, mat4, MaterialFromShader, Mesh, RenderTexture, Shader, shaderProp, TextureFormat, vec2, VertexStruct, Blending, TextureResizing } from \"zogra-renderer\";\r\nimport { ShaderSource } from \"../../assets\";\r\nimport { Entity } from \"../../engine/entity\";\r\nimport { TilemapCollider } from \"../physics/tilemap-collider\";\r\nexport var ShadowType;\r\n(function (ShadowType) {\r\n    ShadowType[\"Soft\"] = \"soft\";\r\n    ShadowType[\"Hard\"] = \"hard\";\r\n})(ShadowType || (ShadowType = {}));\r\n;\r\nexport const Shadow2DVertStruct = VertexStruct(Object.assign(Object.assign({}, DefaultVertexData), { p0: \"vec2\", p1: \"vec2\" }));\r\nexport class Light2D extends Entity {\r\n    constructor(shadowType = false) {\r\n        super();\r\n        this.shadowType = false;\r\n        this.volumnRadius = 1;\r\n        this.lightRange = 10;\r\n        this.lightColor = Color.white;\r\n        this.intensity = 1;\r\n        /** In range [-1..1] */\r\n        this.attenuation = 0;\r\n        this.shadowMesh = null;\r\n        this.shadowMat = new Shadow2DMaterial();\r\n        this.__tempVectors = Array.from(new Array(32)).map(() => vec2.zero());\r\n        this.shadowType = shadowType;\r\n        if (shadowType === ShadowType.Soft)\r\n            this.shadowMesh = new Mesh(Shadow2DVertStruct);\r\n        if (this.shadowMesh)\r\n            this.shadowMesh.resize(5000, 9000);\r\n    }\r\n    getShadowMap(context, data) {\r\n        if (!this.shadowMesh)\r\n            this.shadowMesh = new Mesh(Shadow2DVertStruct);\r\n        if (this.shadowMesh.vertices.length <= 0)\r\n            this.shadowMesh.resize(50, 90);\r\n        // if (this.shadowType === false)\r\n        //     return null;\r\n        if (!this.shadowMap)\r\n            this.shadowMap = new RenderTexture(context.renderer.canvasSize.x, context.renderer.canvasSize.y, false, TextureFormat.R8, FilterMode.Linear);\r\n        if (!this.shadowMap.size.equals(data.cameraOutput.size))\r\n            this.shadowMap.resize(data.cameraOutput.width, data.cameraOutput.height, TextureResizing.Discard);\r\n        this.updateShadowMesh(context, data);\r\n        context.renderer.setFramebuffer(this.shadowMap);\r\n        context.renderer.clear(Color.black);\r\n        this.shadowMat.lightPos.set(this.position);\r\n        this.shadowMat.lightRange = this.lightRange;\r\n        this.shadowMat.volumnSize = this.volumnRadius;\r\n        context.renderer.drawMesh(this.shadowMesh, this.localToWorldMatrix, this.shadowMat);\r\n        // context.renderer.blit(this.shadowMap, FrameBuffer.CanvasBuffer);\r\n        return this.shadowMap;\r\n    }\r\n    updateShadowMesh(context, data) {\r\n        this.shadowMesh.indices.fill(0);\r\n        const bound = [vec2(-this.lightRange).plus(this.position.toVec2()), vec2(this.lightRange).plus(this.position.toVec2())];\r\n        const colliderToLight = mat4.identity();\r\n        let vertOfset = 0;\r\n        let indexOffset = 0;\r\n        for (const collider of data.scene.physics.__getColliders()) {\r\n            if (collider instanceof TilemapCollider) {\r\n                const polygons = collider.getPolygons(...bound);\r\n                if (!polygons)\r\n                    continue;\r\n                colliderToLight.set(collider.tilemap.localToWorldMatrix);\r\n                mat4.mul(colliderToLight, colliderToLight, this.worldToLocalMatrix);\r\n                for (const polygon of polygons) {\r\n                    for (let i = 0; i < polygon.points.length; i++) {\r\n                        const [verts, indices] = this.appendLineShadow(polygon.points[i], polygon.points[(i + 1) % polygon.points.length], colliderToLight, vertOfset, indexOffset);\r\n                        vertOfset += verts;\r\n                        indexOffset += indices;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        // this.appendLineShadow(vec2(1, 0), vec2(0, 0), this.worldToLocalMatrix, 0, 0);\r\n        this.shadowMesh.update();\r\n    }\r\n    // https://www.geogebra.org/m/keskajgx\r\n    appendLineShadow(pointA, pointB, objToLight, vertOffset, indexOffset) {\r\n        let temp = 0;\r\n        if (this.shadowMesh.vertices.length <= vertOffset + 5 || this.shadowMesh.indices.length <= indexOffset + 9) {\r\n            this.shadowMesh.resize(this.shadowMesh.vertices.length * 2, this.shadowMesh.indices.length * 2, true);\r\n        }\r\n        const r2 = this.volumnRadius * this.volumnRadius;\r\n        const R2 = this.lightRange * this.lightRange;\r\n        const p0 = mat4.mulPoint2(this.__tempVectors[temp++], objToLight, pointA);\r\n        const p1 = mat4.mulPoint2(this.__tempVectors[temp++], objToLight, pointB);\r\n        vec2.set(this.shadowMesh.vertices[vertOffset + 0].vert, p0);\r\n        vec2.set(this.shadowMesh.vertices[vertOffset + 1].vert, p1);\r\n        const dir = vec2.minus(this.__tempVectors[temp++], p1, p0).normalize();\r\n        // Debug().drawCircle(this.position, this.volumnRadius);\r\n        // Debug().drawCircle(this.position, this.lightRange, Color.yellow);\r\n        let tangentP0 = circleTangentThroughPoint(p0, this.volumnRadius, [this.__tempVectors[temp++], this.__tempVectors[temp++]]);\r\n        let tangentP1 = circleTangentThroughPoint(p1, this.volumnRadius, [this.__tempVectors[temp++], this.__tempVectors[temp++]]);\r\n        // Debug().drawLines([mat4.mulPoint(this.localToWorldMatrix, tangentP0[0].toVec3()),\r\n        //     mat4.mulPoint(this.localToWorldMatrix, tangentP0[1].toVec3()),\r\n        //     mat4.mulPoint(this.localToWorldMatrix, p0.toVec3())\r\n        // ])\r\n        tangentP0 = [tangentP0[1], tangentP0[0]];\r\n        const shadowA = this.shadowMesh.vertices[vertOffset + 4].vert;\r\n        const shadowB = this.shadowMesh.vertices[vertOffset + 2].vert;\r\n        const tan0 = [\r\n            vec2.minus(this.__tempVectors[temp++], p0, tangentP0[0]).normalize(),\r\n            vec2.minus(this.__tempVectors[temp++], p0, tangentP0[1]).normalize()\r\n        ];\r\n        const tan1 = [\r\n            vec2.minus(this.__tempVectors[temp++], p1, tangentP1[0]).normalize(),\r\n            vec2.minus(this.__tempVectors[temp++], p1, tangentP1[1]).normalize()\r\n        ];\r\n        let meshType = 0;\r\n        if (vec2.cross(dir, tan0[0]) <= 0) {\r\n            meshType |= 1;\r\n            shadowA.set(tan1[1].mul(Math.sqrt(R2 - r2)).plus(tangentP1[1]));\r\n        }\r\n        else\r\n            shadowA.set(tan0[0].mul(Math.sqrt(R2 - r2)).plus(tangentP0[0]));\r\n        if (vec2.cross(dir, tan1[0]) <= 0) {\r\n            meshType |= 2;\r\n            shadowB.set(tan0[1].mul(Math.sqrt(R2 - r2)).plus(tangentP0[1]));\r\n        }\r\n        else\r\n            shadowB.set(tan1[0].mul(Math.sqrt(R2 - r2)).plus(tangentP1[0]));\r\n        // console.log(meshType);\r\n        const OC = vec2.plus(this.__tempVectors[temp++], shadowA, shadowB).mul(0.5);\r\n        const shadowR = vec2.mul(this.shadowMesh.vertices[vertOffset + 3].vert, OC, R2 / OC.magnitudeSqr);\r\n        vec2.set(this.shadowMesh.vertices[vertOffset + 0].p0, p0);\r\n        vec2.set(this.shadowMesh.vertices[vertOffset + 0].p1, p1);\r\n        vec2.set(this.shadowMesh.vertices[vertOffset + 1].p0, p0);\r\n        vec2.set(this.shadowMesh.vertices[vertOffset + 1].p1, p1);\r\n        vec2.set(this.shadowMesh.vertices[vertOffset + 2].p0, p0);\r\n        vec2.set(this.shadowMesh.vertices[vertOffset + 2].p1, p1);\r\n        vec2.set(this.shadowMesh.vertices[vertOffset + 3].p0, p0);\r\n        vec2.set(this.shadowMesh.vertices[vertOffset + 3].p1, p1);\r\n        vec2.set(this.shadowMesh.vertices[vertOffset + 4].p0, p0);\r\n        vec2.set(this.shadowMesh.vertices[vertOffset + 4].p1, p1);\r\n        switch (meshType) {\r\n            case 0:\r\n                this.shadowMesh.indices.set([\r\n                    vertOffset + 0,\r\n                    vertOffset + 3,\r\n                    vertOffset + 4,\r\n                    vertOffset + 0,\r\n                    vertOffset + 1,\r\n                    vertOffset + 3,\r\n                    vertOffset + 1,\r\n                    vertOffset + 2,\r\n                    vertOffset + 3,\r\n                ], indexOffset);\r\n                // Debug().drawLines([\r\n                //     mat4.mulPoint(this.localToWorldMatrix, p0.toVec3()),\r\n                //     mat4.mulPoint(this.localToWorldMatrix, p1.toVec3()),\r\n                //     mat4.mulPoint(this.localToWorldMatrix, vec3.set(shadowB)),\r\n                //     mat4.mulPoint(this.localToWorldMatrix, vec3.set(shadowR)),\r\n                //     mat4.mulPoint(this.localToWorldMatrix, vec3.set(shadowA))\r\n                // ]);\r\n                break;\r\n            case 1: // merge shadowA->p0 & p0->p1\r\n                this.shadowMesh.indices.set([\r\n                    vertOffset + 1,\r\n                    vertOffset + 2,\r\n                    vertOffset + 3,\r\n                    vertOffset + 1,\r\n                    vertOffset + 3,\r\n                    vertOffset + 4,\r\n                    vertOffset + 1,\r\n                    vertOffset + 1,\r\n                    vertOffset + 1,\r\n                ], indexOffset);\r\n                // return [5, 9];\r\n                // Debug().drawLines([\r\n                //     mat4.mulPoint(this.localToWorldMatrix, p1.toVec3()),\r\n                //     mat4.mulPoint(this.localToWorldMatrix, shadowB.toVec3()),\r\n                //     mat4.mulPoint(this.localToWorldMatrix, shadowR.toVec3()),\r\n                //     mat4.mulPoint(this.localToWorldMatrix, shadowA.toVec3())\r\n                // ]);\r\n                break;\r\n            case 2: // merge p0->p1 & p1 -> shadowB\r\n                this.shadowMesh.indices.set([\r\n                    vertOffset + 0,\r\n                    vertOffset + 2,\r\n                    vertOffset + 3,\r\n                    vertOffset + 0,\r\n                    vertOffset + 3,\r\n                    vertOffset + 4,\r\n                    vertOffset + 1,\r\n                    vertOffset + 1,\r\n                    vertOffset + 1,\r\n                ], indexOffset);\r\n                // return [5, 6];\r\n                // Debug().drawLines([\r\n                //     mat4.mulPoint(this.localToWorldMatrix, p0.toVec3()),\r\n                //     mat4.mulPoint(this.localToWorldMatrix, shadowB.toVec3()),\r\n                //     mat4.mulPoint(this.localToWorldMatrix, shadowR.toVec3()),\r\n                //     mat4.mulPoint(this.localToWorldMatrix, shadowA.toVec3())\r\n                // ]);\r\n                break;\r\n            case 3: // cross\r\n                this.shadowMesh.indices.set([\r\n                    vertOffset + 1,\r\n                    vertOffset + 3,\r\n                    vertOffset + 4,\r\n                    vertOffset + 1,\r\n                    vertOffset + 0,\r\n                    vertOffset + 3,\r\n                    vertOffset + 0,\r\n                    vertOffset + 2,\r\n                    vertOffset + 3,\r\n                ], indexOffset);\r\n                // Debug().drawLines([\r\n                //     mat4.mulPoint(this.localToWorldMatrix, p1.toVec3()),\r\n                //     mat4.mulPoint(this.localToWorldMatrix, p0.toVec3()),\r\n                //     mat4.mulPoint(this.localToWorldMatrix, shadowB.toVec3()),\r\n                //     mat4.mulPoint(this.localToWorldMatrix, shadowR.toVec3()),\r\n                //     mat4.mulPoint(this.localToWorldMatrix, shadowA.toVec3())\r\n                // ]);\r\n                break;\r\n        }\r\n        return [5, 9];\r\n    }\r\n    appendVerts() {\r\n    }\r\n    destroy() {\r\n        var _a, _b;\r\n        if (this.destroyed)\r\n            return;\r\n        super.destroy();\r\n        (_a = this.shadowMesh) === null || _a === void 0 ? void 0 : _a.destroy();\r\n        (_b = this.shadowMap) === null || _b === void 0 ? void 0 : _b.destroy();\r\n    }\r\n}\r\nconst _temp1 = vec2.zero(), _temp2 = vec2.zero();\r\n// Ref: https://en.wikipedia.org/wiki/Tangent_lines_to_circles#With_analytic_geometry\r\nfunction circleTangentThroughPoint(point, radius, out = [vec2.zero(), vec2.zero()]) {\r\n    const r2 = radius * radius;\r\n    const d2 = point.magnitudeSqr;\r\n    const t = _temp1;\r\n    t.x = -point.y;\r\n    t.y = point.x;\r\n    t.mul(radius / d2 * Math.sqrt(d2 - r2));\r\n    vec2.mul(_temp2, point, r2 / d2);\r\n    // const t = vec2(-point.y, point.x).mul(radius / d2 * Math.sqrt(d2 - r2));\r\n    out[0].set(_temp2).plus(t);\r\n    out[1].set(_temp2).minus(t);\r\n    return out;\r\n}\r\nexport class Shadow2DMaterial extends MaterialFromShader(new Shader(...ShaderSource.shadow2D, {\r\n    vertexStructure: Shadow2DVertStruct,\r\n    attributes: {\r\n        p0: \"aP0\",\r\n        p1: \"aP1\",\r\n    },\r\n    cull: Culling.Back,\r\n    blend: [Blending.One, Blending.One]\r\n})) {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.lightPos = vec2.zero();\r\n        this.volumnSize = 1;\r\n        this.lightRange = 10;\r\n    }\r\n}\r\n__decorate([\r\n    shaderProp(\"uLightPos\", \"vec2\")\r\n], Shadow2DMaterial.prototype, \"lightPos\", void 0);\r\n__decorate([\r\n    shaderProp(\"uVolumnSize\", \"float\")\r\n], Shadow2DMaterial.prototype, \"volumnSize\", void 0);\r\n__decorate([\r\n    shaderProp(\"uLightRange\", \"float\")\r\n], Shadow2DMaterial.prototype, \"lightRange\", void 0);\r\n//# sourceMappingURL=light-2d.js.map","import { dot, mat4, Mesh, plus, vec2 } from \"zogra-renderer\";\r\nimport { RenderObject } from \"../../engine/render-object\";\r\nexport class LineRenderer extends RenderObject {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.mesh = new Mesh();\r\n        this.dirty = false;\r\n        this.points = [];\r\n    }\r\n    updateMesh() {\r\n        this.dirty = true;\r\n    }\r\n    render(context, data) {\r\n        this.rebuildMesh();\r\n        context.renderer.drawMesh(this.mesh, mat4.identity(), this.materials[0]);\r\n    }\r\n    rebuildMesh() {\r\n        if (!this.dirty)\r\n            return;\r\n        const lineCount = this.points.length - 1;\r\n        if (lineCount < 1)\r\n            this.mesh.resize(this.mesh.vertices.length, 0);\r\n        this.mesh.resize(lineCount * 4, lineCount * 6, false);\r\n        const dir = vec2.zero();\r\n        const normal = vec2.zero();\r\n        const p0 = vec2.zero();\r\n        const p1 = vec2.zero();\r\n        const p2 = vec2.zero();\r\n        const p3 = vec2.zero();\r\n        for (let i = 0; i < this.points.length - 1; i++) {\r\n            const endpointA = this.points[i];\r\n            const endpointB = this.points[i + 1];\r\n            vec2.minus(dir, endpointB.position, endpointA.position);\r\n            dir.normalize();\r\n            if (dir.isZero)\r\n                continue;\r\n            vec2.perpendicular(normal, dir);\r\n            if (i > 0) {\r\n                intersectPoints([p0, p1], this.points[i - 1], this.points[i], this.points[i + 1]);\r\n            }\r\n            else {\r\n                // p0 = epA + normal * w\r\n                p0.set(normal).mul(endpointA.width / 2).plus(endpointA.position);\r\n                // p1 = epA - nromal * w\r\n                p1.set(normal).mul(-endpointA.width / 2).plus(endpointA.position);\r\n            }\r\n            if (i < this.points.length - 2) {\r\n                intersectPoints([p2, p3], this.points[i], this.points[i + 1], this.points[i + 2]);\r\n            }\r\n            else {\r\n                p2.set(normal).mul(endpointB.width / 2).plus(endpointB.position);\r\n                p3.set(normal).mul(-endpointB.width / 2).plus(endpointB.position);\r\n            }\r\n            const vertBase = i * 4;\r\n            this.mesh.vertices[vertBase + 0].vert.set(p0);\r\n            this.mesh.vertices[vertBase + 1].vert.set(p1);\r\n            this.mesh.vertices[vertBase + 2].vert.set(p2);\r\n            this.mesh.vertices[vertBase + 3].vert.set(p3);\r\n            this.mesh.vertices[vertBase + 0].color.set(endpointA.color);\r\n            this.mesh.vertices[vertBase + 1].color.set(endpointA.color);\r\n            this.mesh.vertices[vertBase + 2].color.set(endpointB.color);\r\n            this.mesh.vertices[vertBase + 3].color.set(endpointB.color);\r\n            this.mesh.vertices[vertBase + 0].uv.set([0, 1]);\r\n            this.mesh.vertices[vertBase + 1].uv.set([0, 0]);\r\n            this.mesh.vertices[vertBase + 2].uv.set([1, 1]);\r\n            this.mesh.vertices[vertBase + 3].uv.set([1, 0]);\r\n            const indexBase = i * 6;\r\n            this.mesh.indices[indexBase + 0] = vertBase + 0;\r\n            this.mesh.indices[indexBase + 1] = vertBase + 1;\r\n            this.mesh.indices[indexBase + 2] = vertBase + 3;\r\n            this.mesh.indices[indexBase + 3] = vertBase + 0;\r\n            this.mesh.indices[indexBase + 4] = vertBase + 3;\r\n            this.mesh.indices[indexBase + 5] = vertBase + 2;\r\n        }\r\n        this.dirty = false;\r\n    }\r\n    destroy() {\r\n        if (this.destroyed)\r\n            return;\r\n        super.destroy();\r\n        this.mesh.destroy();\r\n    }\r\n}\r\n// See: https://www.geogebra.org/geometry/bhhyyttg\r\nfunction intersectPoints(out, epA, center, epB) {\r\n    const [dirA, dirB] = out;\r\n    vec2.minus(dirA, epA.position, center.position).normalize();\r\n    vec2.minus(dirB, epB.position, center.position).normalize();\r\n    const halfDir = plus(dirA, dirB).div(2);\r\n    let sinBeta = 0;\r\n    if (vec2.dot(halfDir, halfDir) <= 1e-7) {\r\n        vec2.perpendicular(halfDir, dirB);\r\n        sinBeta = 1;\r\n    }\r\n    else if (dirA.isZero) {\r\n        vec2.perpendicular(halfDir, dirB);\r\n        sinBeta = 1;\r\n    }\r\n    else if (dirB.isZero) {\r\n        vec2.perpendicular(halfDir, dirA);\r\n        sinBeta = -1;\r\n    }\r\n    else {\r\n        halfDir.normalize();\r\n        sinBeta = Math.sign(vec2.cross(dirB, dirA)) * Math.sqrt((1 - dot(dirA, dirB)) / 2);\r\n    }\r\n    const length = center.width / 2 / sinBeta;\r\n    const p0 = dirA.set(halfDir).mul(length).plus(center.position);\r\n    const p1 = dirB.set(halfDir).mul(-length).plus(center.position);\r\n    if (isNaN(p0.x) || isNaN(p0.y) || isNaN(p1.x) || isNaN(p1.y))\r\n        console.log(p0, p1);\r\n    return [p0, p1];\r\n}\r\n//# sourceMappingURL=line-renderer.js.map","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nimport { Blending, Color, Culling, DepthTest, MaterialFromShader, Shader, shaderProp } from \"zogra-renderer\";\r\nimport { ShaderSource } from \"../../assets\";\r\nexport class Default2DMaterial extends MaterialFromShader(new Shader(...ShaderSource.default2D, {\r\n    cull: Culling.Disable,\r\n    depth: DepthTest.Disable,\r\n    zWrite: false,\r\n    blend: [Blending.SrcAlpha, Blending.OneMinusSrcAlpha],\r\n})) {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.texture = null;\r\n        this.color = Color.white;\r\n    }\r\n}\r\n__decorate([\r\n    shaderProp(\"uMainTex\", \"tex2d\")\r\n], Default2DMaterial.prototype, \"texture\", void 0);\r\n__decorate([\r\n    shaderProp(\"uColor\", \"color\")\r\n], Default2DMaterial.prototype, \"color\", void 0);\r\n//# sourceMappingURL=materials.js.map","import { Color, MeshBuilder, vec2, vec4 } from \"zogra-renderer\";\r\nimport { RenderObject } from \"../../engine/render-object\";\r\nimport { BuiltinMaterials } from \"../../render-pipeline/default-materials\";\r\nconst spriteVerts = [\r\n    vec2(-0.5, -0.5),\r\n    vec2(0.5, -0.5),\r\n    vec2(0.5, 0.5),\r\n    vec2(-0.5, 0.5)\r\n];\r\nexport class SpriteObject extends RenderObject {\r\n    constructor() {\r\n        super();\r\n        this.mesh = MeshBuilder.quad();\r\n        this.material = BuiltinMaterials.spriteDefault;\r\n        this._sprite = null;\r\n        this._size = vec2.one();\r\n        this._color = Color.white;\r\n        this.meshes[0] = this.mesh;\r\n        this.materials[0] = this.material;\r\n    }\r\n    get size() { return this._size; }\r\n    set size(value) {\r\n        this._size.set(value);\r\n        vec2.mul(this.mesh.vertices[0].vert, spriteVerts[0], this._size);\r\n        vec2.mul(this.mesh.vertices[1].vert, spriteVerts[1], this._size);\r\n        vec2.mul(this.mesh.vertices[2].vert, spriteVerts[2], this._size);\r\n        vec2.mul(this.mesh.vertices[3].vert, spriteVerts[3], this._size);\r\n        this.mesh.update();\r\n    }\r\n    get color() { return this._color; }\r\n    set color(value) {\r\n        this._color.set(value);\r\n        if (this.sprite) {\r\n            vec4.mul(this.mesh.vertices[0].color, this.sprite.color, value);\r\n            vec4.mul(this.mesh.vertices[1].color, this.sprite.color, value);\r\n            vec4.mul(this.mesh.vertices[2].color, this.sprite.color, value);\r\n            vec4.mul(this.mesh.vertices[3].color, this.sprite.color, value);\r\n        }\r\n        else {\r\n            vec4.set(this.mesh.vertices[0].color, value);\r\n            vec4.set(this.mesh.vertices[1].color, value);\r\n            vec4.set(this.mesh.vertices[2].color, value);\r\n            vec4.set(this.mesh.vertices[3].color, value);\r\n        }\r\n        this.mesh.update();\r\n    }\r\n    get sprite() { return this._sprite; }\r\n    set sprite(sprite) {\r\n        this._sprite = sprite;\r\n        if (sprite) {\r\n            // this.material.texture = sprite.texture;\r\n            this.mesh.vertices[0].uv.set([sprite.uvRect.xMin, sprite.uvRect.yMin]);\r\n            this.mesh.vertices[1].uv.set([sprite.uvRect.xMax, sprite.uvRect.yMin]);\r\n            this.mesh.vertices[2].uv.set([sprite.uvRect.xMax, sprite.uvRect.yMax]);\r\n            this.mesh.vertices[3].uv.set([sprite.uvRect.xMin, sprite.uvRect.yMax]);\r\n            this.mesh.vertices[0].color.set(sprite.color);\r\n            this.mesh.vertices[1].color.set(sprite.color);\r\n            this.mesh.vertices[2].color.set(sprite.color);\r\n            this.mesh.vertices[3].color.set(sprite.color);\r\n            this.mesh.update();\r\n        }\r\n        else {\r\n            this.material.texture = null;\r\n        }\r\n    }\r\n    render(context, data) {\r\n        var _a;\r\n        this.material.setProp(\"uMainTex\", \"tex2d\", ((_a = this.sprite) === null || _a === void 0 ? void 0 : _a.texture) || null);\r\n        context.renderer.drawMesh(this.mesh, this.localToWorldMatrix, this.material);\r\n    }\r\n    destroy() {\r\n        if (this.destroyed)\r\n            return;\r\n        super.destroy();\r\n        this.mesh.destroy();\r\n    }\r\n}\r\n//# sourceMappingURL=sprite-object.js.map","import { Color, div, Rect } from \"zogra-renderer\";\r\nexport class Sprite {\r\n    constructor(texture, cellCount, cell) {\r\n        this.color = Color.white;\r\n        this.texture = texture;\r\n        this.uvRect = new Rect(div(cell, cellCount), div(1, cellCount));\r\n    }\r\n}\r\n//# sourceMappingURL=sprite.js.map","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nimport { minus, plus, vec2, Mesh, div, VertexStruct, MaterialFromShader, Shader, shaderProp, BufferStructure, GLArrayBuffer, Color, vec4, Blending, DepthTest } from \"zogra-renderer\";\r\nimport { ShaderSource } from \"../../assets\";\r\nimport { RenderObject } from \"../../engine/render-object\";\r\nimport { Polygon } from \"../physics/polygon\";\r\nconst TileInstanceBufferStruct = BufferStructure({\r\n    tileColor: \"vec4\",\r\n    tileUV: \"vec4\",\r\n    tilePos: \"ivec2\",\r\n});\r\nconst TileInstanceMeshStruct = BufferStructure({\r\n    vert: \"ivec2\",\r\n    uv: \"vec2\",\r\n    normal: \"vec3\",\r\n});\r\nexport const TileInstanceVertexStruct = VertexStruct(Object.assign(Object.assign({}, TileInstanceMeshStruct), TileInstanceBufferStruct));\r\nexport class Tilemap extends RenderObject {\r\n    constructor(...args) {\r\n        super();\r\n        this.chunks = new Map();\r\n        this.materials[0] = new DefaultTilemapMaterial();\r\n        if (args.length === 0) {\r\n            this.chunkSize = 16;\r\n            this.ChunkType = Chunk;\r\n        }\r\n        else if (args.length === 1) {\r\n            if (typeof (args[0]) === \"number\") {\r\n                this.chunkSize = args[0];\r\n                this.ChunkType = Chunk;\r\n            }\r\n            else {\r\n                this.chunkSize = 16;\r\n                this.ChunkType = args[0];\r\n            }\r\n        }\r\n        else {\r\n            [this.chunkSize, this.ChunkType] = args;\r\n        }\r\n        this.instanceMesh = Tilemap.createInstanceMesh();\r\n        this.batchBuffer = new GLArrayBuffer(TileInstanceBufferStruct, 0, false);\r\n        this.batchBuffer.static = false;\r\n    }\r\n    render(context, data) {\r\n        this.eventEmitter.with().emit(\"render\", this, context, data);\r\n        let screenSize = vec2(data.camera.viewHeight * data.camera.aspectRatio, data.camera.viewHeight);\r\n        let [minCorner] = this.chunkPos(minus(data.camera.position.toVec2(), screenSize));\r\n        let [maxCorner] = this.chunkPos(plus(data.camera.position.toVec2(), screenSize));\r\n        // context.renderer.drawMesh(this.mesh, mat4.translate(vec3(0, 0, 0)), this.materials[0]);\r\n        // return;\r\n        const batchedSize = (maxCorner.x - minCorner.x + 1) * (maxCorner.y - minCorner.y + 1) * this.chunkSize * this.chunkSize;\r\n        if (this.batchBuffer.length < batchedSize)\r\n            this.batchBuffer.resize(batchedSize, false);\r\n        let offset = 0;\r\n        for (let chunkY = minCorner.y; chunkY <= maxCorner.y; chunkY++)\r\n            for (let chunkX = minCorner.x; chunkX <= maxCorner.x; chunkX++) {\r\n                const chunk = this.getOrCreateChunk(vec2(chunkX, chunkY));\r\n                this.batchBuffer.copyFrom(chunk.buffer, offset);\r\n                offset += this.chunkSize * this.chunkSize;\r\n                // chunk.mesh.update();\r\n                // context.renderer.drawMesh(chunk.mesh, this.localToWorldMatrix, this.materials[0]);\r\n                // context.renderer.drawMeshInstance(this.instanceMesh, chunk.buffer, this.materials[0], chunk.buffer.length);\r\n            }\r\n        context.renderer.drawMeshInstance(this.instanceMesh, this.batchBuffer, this.materials[0], offset);\r\n    }\r\n    getTile(pos) {\r\n        let [chunkPos, offset] = this.chunkPos(vec2.math(Math.floor)(pos));\r\n        let chunk = this.getOrCreateChunk(chunkPos);\r\n        return chunk.getTile(offset);\r\n    }\r\n    setTile(pos, tile) {\r\n        let [chunkPos, offset] = this.chunkPos(vec2.math(Math.floor)(pos));\r\n        let chunk = this.getOrCreateChunk(chunkPos);\r\n        return chunk.setTile(offset, tile);\r\n    }\r\n    getChunkAt(pos) {\r\n        let [chunkPos, _] = this.chunkPos(vec2.math(Math.floor)(pos));\r\n        return this.getOrCreateChunk(chunkPos);\r\n    }\r\n    visibleChunkRange(camera) {\r\n        let screenSize = vec2(camera.viewHeight * camera.aspectRatio, camera.viewHeight);\r\n        let [minCorner] = this.chunkPos(minus(camera.position.toVec2(), screenSize));\r\n        let [maxCorner] = this.chunkPos(plus(camera.position.toVec2(), screenSize));\r\n        return [minCorner, plus(maxCorner, 1)];\r\n    }\r\n    getOrCreateChunk(chunkPos) {\r\n        const idx = this.calcChunkID(chunkPos);\r\n        let chunk = this.chunks.get(idx);\r\n        if (!chunk) {\r\n            chunk = new this.ChunkType(chunkPos.mul(this.chunkSize), this.chunkSize);\r\n            this.chunks.set(idx, chunk);\r\n            return chunk;\r\n        }\r\n        return chunk;\r\n    }\r\n    getChunk(chunkPos) {\r\n        const idx = this.calcChunkID(chunkPos);\r\n        return this.chunks.get(idx);\r\n    }\r\n    calcChunkID(chunkPos) {\r\n        let x = chunkPos.x;\r\n        let y = chunkPos.y;\r\n        if (chunkPos.x == -0)\r\n            x = 0;\r\n        if (chunkPos.y == -0)\r\n            y = 0;\r\n        const signX = x >= 0 ? 0 : 1;\r\n        const signY = y >= 0 ? 0 : 1;\r\n        return (signX << 31) | (Math.abs(Math.floor(x)) << 16) | (signY << 15) | Math.abs(Math.floor(y));\r\n    }\r\n    destroy() {\r\n        if (this.destroyed)\r\n            return;\r\n        super.destroy();\r\n        for (const chunk of this.chunks.values()) {\r\n            chunk.destroy();\r\n        }\r\n        this.chunks.clear();\r\n    }\r\n    /**\r\n     * floor in callee\r\n     * @param pos No need to floor\r\n     * @returns\r\n     */\r\n    chunkPos(pos) {\r\n        let floorPos = vec2.math(Math.floor)(pos);\r\n        // const floorOffset = vec2(\r\n        //     floorPos.x < 0 ? /*1*/ 0 : 0,\r\n        //     floorPos.y < 0 ? /*1*/ 0 : 0,\r\n        // );\r\n        return [vec2.math(Math.floor)(div(floorPos, this.chunkSize)),\r\n            vec2.math(floorReminder)(floorPos, vec2(this.chunkSize))];\r\n    }\r\n    static createInstanceMesh() {\r\n        const mesh = new Mesh(TileInstanceMeshStruct);\r\n        mesh.resize(4, 6);\r\n        mesh.vertices[0].vert.set([0, 0]);\r\n        mesh.vertices[1].vert.set([1, 0]);\r\n        mesh.vertices[2].vert.set([1, 1]);\r\n        mesh.vertices[3].vert.set([0, 1]);\r\n        mesh.vertices[0].normal.set([0, 0, 1]);\r\n        mesh.vertices[1].normal.set([0, 0, 1]);\r\n        mesh.vertices[2].normal.set([0, 0, 1]);\r\n        mesh.vertices[3].normal.set([0, 0, 1]);\r\n        mesh.vertices[0].uv.set([0, 0]);\r\n        mesh.vertices[1].uv.set([1, 0]);\r\n        mesh.vertices[2].uv.set([1, 1]);\r\n        mesh.vertices[3].uv.set([0, 1]);\r\n        mesh.indices.set([\r\n            0, 1, 2,\r\n            0, 2, 3\r\n        ]);\r\n        mesh.update();\r\n        return mesh;\r\n    }\r\n}\r\nexport class Chunk {\r\n    constructor(basePos, chunkSize) {\r\n        this.polygons = [];\r\n        this.dirty = false;\r\n        this.chunkSize = chunkSize;\r\n        this.basePos = basePos;\r\n        this.tiles = new Array(chunkSize * chunkSize);\r\n        // this.mesh = createChunkMesh(basePos, chunkSize);\r\n        this.buffer = createChunkBuffer(basePos, chunkSize);\r\n    }\r\n    /**\r\n     *\r\n     * @param offset Tile offset relative to chunk base position\r\n     * @returns\r\n     */\r\n    getTile(offset) {\r\n        const idx = offset.y * this.chunkSize + offset.x;\r\n        return this.tiles[idx];\r\n    }\r\n    /**\r\n     *\r\n     * @param offset Tile offset relative to chunk base position\r\n     * @param tile\r\n     */\r\n    setTile(offset, tile) {\r\n        var _a;\r\n        let idx = offset.y * this.chunkSize + offset.x;\r\n        if (((_a = this.tiles[idx]) === null || _a === void 0 ? void 0 : _a.collide) !== (tile === null || tile === void 0 ? void 0 : tile.collide))\r\n            this.dirty = true;\r\n        this.tiles[idx] = tile;\r\n        // idx *= 4;\r\n        if (tile === null || tile === void 0 ? void 0 : tile.sprite) {\r\n            const element = this.buffer[idx];\r\n            vec4.set(element.tileColor, tile.sprite.color);\r\n            element.tileUV[0] = tile.sprite.uvRect.xMin;\r\n            element.tileUV[1] = tile.sprite.uvRect.yMin;\r\n            element.tileUV[2] = tile.sprite.uvRect.width;\r\n            element.tileUV[3] = tile.sprite.uvRect.height;\r\n        }\r\n        // this.mesh.uvs = uv;\r\n    }\r\n    destroy() {\r\n        this.buffer.destroy();\r\n    }\r\n    /** @internal */\r\n    getPolygons() {\r\n        if (this.dirty) {\r\n            this.polygons = Array.from(this.enumPolygons());\r\n            // console.log(\"gen\", this.polygons.reduce((sum, poly) => sum + poly.points.length, 0));\r\n        }\r\n        this.dirty = false;\r\n        return this.polygons;\r\n    }\r\n    *enumPolygons() {\r\n        const validPos = (x, y) => 0 <= x && x < this.chunkSize && 0 <= y && y < this.chunkSize;\r\n        const visited = new Array((this.chunkSize + 1) * (this.chunkSize + 1) * (this.chunkSize + 1) * (this.chunkSize + 1));\r\n        const tileAt = (x, y) => {\r\n            if (!validPos(x, y))\r\n                return null;\r\n            return this.tiles[y * this.chunkSize + x];\r\n        };\r\n        const getEdge = (x, y) => {\r\n            var _a, _b, _c, _d, _e;\r\n            if (!((_a = tileAt(x, y)) === null || _a === void 0 ? void 0 : _a.collide))\r\n                return 0;\r\n            if (!((_b = tileAt(x - 1, y)) === null || _b === void 0 ? void 0 : _b.collide))\r\n                return left;\r\n            if (!((_c = tileAt(x + 1, y)) === null || _c === void 0 ? void 0 : _c.collide))\r\n                return right;\r\n            if (!((_d = tileAt(x, y - 1)) === null || _d === void 0 ? void 0 : _d.collide))\r\n                return down;\r\n            if (!((_e = tileAt(x, y + 1)) === null || _e === void 0 ? void 0 : _e.collide))\r\n                return up;\r\n            return 0;\r\n        };\r\n        const idxOf = (x, y) => y * this.chunkSize + x;\r\n        const edgeOf = (a, b) => idxOf(a.x, a.y) * (this.chunkSize + 1) * (this.chunkSize + 1) + idxOf(b.x, b.y);\r\n        const searchPolygon = (start, next, dir) => {\r\n            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;\r\n            const points = [start, next];\r\n            // visited[edgeOf(start, next)] = true;\r\n            let previous = start.clone();\r\n            let search = true;\r\n            while (search) {\r\n                let head = points[points.length - 1];\r\n                if (visited[edgeOf(previous, head)]) {\r\n                    points.length -= 1;\r\n                    if (points[0].equals(points[points.length - 1]))\r\n                        points.length -= 1;\r\n                    break;\r\n                }\r\n                visited[edgeOf(previous, head)] = true;\r\n                previous.set(head);\r\n                switch (dir) {\r\n                    /*\r\n                     * |---|---|\r\n                     * | 1 | 0 |\r\n                     * |---^---|\r\n                     * | 2 ^   |\r\n                     * |---^---|\r\n                     */\r\n                    case up:\r\n                        if ((_a = tileAt(head.x, head.y)) === null || _a === void 0 ? void 0 : _a.collide) {\r\n                            points.push(vec2(head.x + 1, head.y));\r\n                            dir = right;\r\n                        }\r\n                        else if ((_b = tileAt(head.x - 1, head.y)) === null || _b === void 0 ? void 0 : _b.collide)\r\n                            head.y += 1;\r\n                        else if ((_c = tileAt(head.x - 1, head.y - 1)) === null || _c === void 0 ? void 0 : _c.collide) {\r\n                            points.push(vec2(head.x - 1, head.y));\r\n                            dir = left;\r\n                        }\r\n                        else\r\n                            throw new Error(\"Invalid tilemap\");\r\n                        break;\r\n                    /*\r\n                    * |---|---|\r\n                    * | 0 |   |\r\n                    * |---<<<<<\r\n                    * | 1 | 2 |\r\n                    * |---|---|\r\n                    */\r\n                    case left:\r\n                        if ((_d = tileAt(head.x - 1, head.y)) === null || _d === void 0 ? void 0 : _d.collide) {\r\n                            points.push(vec2(head.x, head.y + 1));\r\n                            dir = up;\r\n                        }\r\n                        else if ((_e = tileAt(head.x - 1, head.y - 1)) === null || _e === void 0 ? void 0 : _e.collide)\r\n                            head.x -= 1;\r\n                        else if ((_f = tileAt(head.x, head.y - 1)) === null || _f === void 0 ? void 0 : _f.collide) {\r\n                            points.push(vec2(head.x, head.y - 1));\r\n                            dir = down;\r\n                        }\r\n                        else\r\n                            throw new Error(\"Invalid tilemap\");\r\n                        break;\r\n                    /*\r\n                     * |---v---|\r\n                     * |   v 2 |\r\n                     * |---v---|\r\n                     * | 0 | 1 |\r\n                     * |---|---|\r\n                     */\r\n                    case down:\r\n                        if ((_g = tileAt(head.x - 1, head.y - 1)) === null || _g === void 0 ? void 0 : _g.collide) {\r\n                            points.push(vec2(head.x - 1, head.y));\r\n                            dir = left;\r\n                        }\r\n                        else if ((_h = tileAt(head.x, head.y - 1)) === null || _h === void 0 ? void 0 : _h.collide)\r\n                            head.y -= 1;\r\n                        else if ((_j = tileAt(head.x, head.y)) === null || _j === void 0 ? void 0 : _j.collide) {\r\n                            points.push(vec2(head.x + 1, head.y));\r\n                            dir = right;\r\n                        }\r\n                        else\r\n                            throw new Error(\"Invalid tilemap\");\r\n                        break;\r\n                    /*\r\n                     * |---|---|\r\n                     * | 2 | 1 |\r\n                     * >>>>>---|\r\n                     * |   | 0 |\r\n                     * |---|---|\r\n                     */\r\n                    case right:\r\n                        if ((_k = tileAt(head.x, head.y - 1)) === null || _k === void 0 ? void 0 : _k.collide) {\r\n                            points.push(vec2(head.x, head.y - 1));\r\n                            dir = down;\r\n                        }\r\n                        else if ((_l = tileAt(head.x, head.y)) === null || _l === void 0 ? void 0 : _l.collide)\r\n                            head.x += 1;\r\n                        else if ((_m = tileAt(head.x - 1, head.y)) === null || _m === void 0 ? void 0 : _m.collide) {\r\n                            points.push(vec2(head.x, head.y + 1));\r\n                            dir = up;\r\n                        }\r\n                        else\r\n                            throw new Error(\"Invalid tilemap\");\r\n                        break;\r\n                }\r\n            }\r\n            return points;\r\n        };\r\n        const left = 1, right = 2, up = 3, down = 4;\r\n        // Find a bottom-left most tile and start walking from bottom-left corner to bottom-right corner\r\n        for (let y = 0; y < this.chunkSize; y++) {\r\n            for (let x = 0; x < this.chunkSize; x++) {\r\n                const edge = getEdge(x, y);\r\n                if (!edge)\r\n                    continue;\r\n                let start;\r\n                let next;\r\n                let dir;\r\n                switch (edge) {\r\n                    case left:\r\n                        start = vec2(x, y + 1);\r\n                        next = vec2(x, y);\r\n                        dir = down;\r\n                        break;\r\n                    case down:\r\n                        start = vec2(x, y);\r\n                        next = vec2(x + 1, y);\r\n                        dir = right;\r\n                        break;\r\n                    case right:\r\n                        start = vec2(x + 1, y);\r\n                        next = vec2(x + 1, y + 1);\r\n                        dir = up;\r\n                        break;\r\n                    case up:\r\n                        start = vec2(x + 1, y + 1);\r\n                        next = vec2(x, y + 1);\r\n                        dir = down;\r\n                        break;\r\n                }\r\n                if (!visited[edgeOf(start, next)]) {\r\n                    const points = searchPolygon(start, next, dir);\r\n                    const polygon = new Polygon(points.length);\r\n                    for (const point of points) {\r\n                        polygon.append(point.plus(this.basePos));\r\n                    }\r\n                    yield polygon;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\nfunction floorReminder(x, m) {\r\n    return x >= 0\r\n        ? x % m\r\n        : (m + x % m) % m;\r\n}\r\nfunction createChunkBuffer(basePos, chunkSize) {\r\n    const buffer = new GLArrayBuffer(TileInstanceBufferStruct, chunkSize * chunkSize);\r\n    for (let y = 0; y < chunkSize; y++)\r\n        for (let x = 0; x < chunkSize; x++) {\r\n            const idx = y * chunkSize + x;\r\n            buffer[idx].tilePos[0] = basePos.x + x;\r\n            buffer[idx].tilePos[1] = basePos.y + y;\r\n            buffer[idx].tileColor.fill(0);\r\n            buffer[idx].tileUV.fill(0);\r\n        }\r\n    return buffer;\r\n}\r\nexport class DefaultTilemapMaterial extends MaterialFromShader(new Shader(...ShaderSource.tilemapInstance, {\r\n    vertexStructure: TileInstanceVertexStruct,\r\n    attributes: {\r\n        vert: \"aPos\",\r\n        uv: \"aUV\",\r\n        normal: \"aNormal\",\r\n        tileColor: \"aTileColor\",\r\n        tileUV: \"aTileUV\",\r\n        tilePos: \"aTilePos\",\r\n    },\r\n    blend: [Blending.SrcAlpha, Blending.OneMinusSrcAlpha],\r\n    zWrite: false,\r\n    depth: DepthTest.Disable,\r\n})) {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.texture = null;\r\n        this.color = Color.white;\r\n    }\r\n}\r\n__decorate([\r\n    shaderProp(\"uMainTex\", \"tex2d\")\r\n], DefaultTilemapMaterial.prototype, \"texture\", void 0);\r\n__decorate([\r\n    shaderProp(\"uColor\", \"color\")\r\n], DefaultTilemapMaterial.prototype, \"color\", void 0);\r\n//# sourceMappingURL=tilemap.js.map","// assets/shader/2d-vert.glsl\r\nvar d_vert_default = \"#version 300 es\\r\\nprecision mediump float;\\r\\n\\r\\nin vec3 aPos;\\r\\nin vec4 aColor;\\r\\nin vec2 aUV;\\r\\nin vec3 aNormal;\\r\\n\\r\\nuniform mat4 uTransformM;\\r\\nuniform mat4 uTransformVP;\\r\\nuniform mat4 uTransformMVP;\\r\\nuniform mat4 uTransformM_IT;\\r\\n\\r\\nout vec4 vColor;\\r\\nout vec4 vPos;\\r\\nout vec2 vUV;\\r\\nout vec3 vNormal;\\r\\nout vec3 vWorldPos;\\r\\n\\r\\nvoid main()\\r\\n{\\r\\n    gl_Position = uTransformMVP * vec4(aPos, 1);\\r\\n    vPos = gl_Position;\\r\\n    vColor = aColor;\\r\\n    vUV = aUV;\\r\\n    vNormal = (uTransformM_IT *  vec4(aNormal, 0)).xyz;\\r\\n    vWorldPos = (uTransformM * vec4(aPos, 1)).xyz;\\r\\n    \\r\\n}\";\r\n// assets/shader/2d-frag.glsl\r\nvar d_frag_default = \"#version 300 es\\r\\nprecision mediump float;\\r\\n\\r\\nin vec4 vColor;\\r\\nin vec4 vPos;\\r\\nin vec2 vUV;\\r\\n\\r\\nuniform sampler2D uMainTex;\\r\\nuniform vec4 uColor;\\r\\n\\r\\nout vec4 fragColor;\\r\\n\\r\\nvoid main()\\r\\n{\\r\\n    vec4 color = texture(uMainTex, vUV.xy).rgba;\\r\\n    // color = color * vec3(uColor);\\r\\n    fragColor = color.rgba * vColor.rgba * uColor.rgba;\\r\\n    // fragColor = vec4(vUV.xy, 0, 1);\\r\\n}\";\r\n// assets/shader/particle-vert.glsl\r\nvar particle_vert_default = \"#version 300 es\\r\\nprecision mediump float;\\r\\n\\r\\nin vec3 aPos;\\r\\nin vec4 aColor;\\r\\nin vec2 aUV;\\r\\nin vec3 aNormal;\\r\\n\\r\\nin vec3 particlePos;\\r\\nin vec3 particleRotation;\\r\\nin float particleSize;\\r\\n\\r\\nuniform mat4 uTransformM;\\r\\nuniform mat4 uTransformVP;\\r\\nuniform mat4 uTransformMVP;\\r\\nuniform mat4 uTransformM_IT;\\r\\n\\r\\nout vec4 vColor;\\r\\nout vec4 vPos;\\r\\nout vec2 vUV;\\r\\nout vec3 vNormal;\\r\\nout vec3 vWorldPos;\\r\\n\\r\\n#define PI (3.14159265358979323846264338327950288419716939937510)\\r\\n\\r\\nvec4 from_euler(float x, float y, float z)\\r\\n{\\r\\n    float halfToRad = PI / 360.0;\\r\\n    x *= halfToRad;\\r\\n    z *= halfToRad;\\r\\n    y *= halfToRad;\\r\\n\\r\\n    float sx = sin(x);\\r\\n    float cx = cos(x);\\r\\n    float sy = sin(y);\\r\\n    float cy = cos(y);\\r\\n    float sz = sin(z);\\r\\n    float cz = cos(z);\\r\\n\\r\\n    vec4 q;\\r\\n    q[0] = sx * cy * cz - cx * sy * sz;\\r\\n    q[1] = cx * sy * cz + sx * cy * sz;\\r\\n    q[2] = cx * cy * sz - sx * sy * cz;\\r\\n    q[3] = cx * cy * cz + sx * sy * sz;\\r\\n    return q;\\r\\n}\\r\\n\\r\\nmat4 from_rts(vec4 q, vec3 v, vec3 s)\\r\\n{\\r\\n    mat4 m;\\r\\n    float x = q[0];\\r\\n    float y = q[1];\\r\\n    float z = q[2];\\r\\n    float w = q[3];\\r\\n    float x2 = x + x;\\r\\n    float y2 = y + y;\\r\\n    float z2 = z + z;\\r\\n\\r\\n    float xx = x * x2;\\r\\n    float xy = x * y2;\\r\\n    float xz = x * z2;\\r\\n    float yy = y * y2;\\r\\n    float yz = y * z2;\\r\\n    float zz = z * z2;\\r\\n    float wx = w * x2;\\r\\n    float wy = w * y2;\\r\\n    float wz = w * z2;\\r\\n    float sx = s[0];\\r\\n    float sy = s[1];\\r\\n    float sz = s[2];\\r\\n\\r\\n    m[0][0] = (1.0 - (yy + zz)) * sx;\\r\\n    m[0][1] = (xy + wz) * sx;\\r\\n    m[0][2] = (xz - wy) * sx;\\r\\n    m[0][3] = 0.0;\\r\\n    m[1][0] = (xy - wz) * sy;\\r\\n    m[1][1] = (1.0 - (xx + zz)) * sy;\\r\\n    m[1][2] = (yz + wx) * sy;\\r\\n    m[1][3] = 0.0;\\r\\n    m[2][0] = (xz + wy) * sz;\\r\\n    m[2][1] = (yz - wx) * sz;\\r\\n    m[2][2] = (1.0 - (xx + yy)) * sz;\\r\\n    m[2][3] = 0.0;\\r\\n    m[3][0] = v[0];\\r\\n    m[3][1] = v[1];\\r\\n    m[3][2] = v[2];\\r\\n    m[3][3] = 1.0;\\r\\n\\r\\n    return m;\\r\\n}\\r\\n\\r\\nvoid main()\\r\\n{\\r\\n    vec4 rotation = from_euler(particleRotation.x, particleRotation.y, particleRotation.z);\\r\\n    mat4 rts = from_rts(rotation, particlePos, vec3(particleSize));\\r\\n    mat4 mvp = uTransformMVP * rts;\\r\\n    gl_Position = mvp * vec4(aPos, 1);\\r\\n    vPos = gl_Position;\\r\\n    vColor = aColor;\\r\\n    vUV = aUV;\\r\\n    vNormal = (uTransformM_IT *  vec4(aNormal, 0)).xyz;\\r\\n    vWorldPos = (uTransformM * vec4(aPos, 1)).xyz;\\r\\n    \\r\\n}\";\r\n// assets/shader/2d-shadow-vert.glsl\r\nvar d_shadow_vert_default = \"#version 300 es\\r\\nprecision mediump float;\\r\\n\\r\\nin vec3 aPos;\\r\\nin vec4 aColor;\\r\\nin vec2 aUV;\\r\\nin vec3 aNormal;\\r\\nin vec2 aP0;\\r\\nin vec2 aP1;\\r\\n\\r\\nuniform mat4 uTransformM;\\r\\nuniform mat4 uTransformVP;\\r\\nuniform mat4 uTransformMVP;\\r\\nuniform mat4 uTransformM_IT;\\r\\n\\r\\nout vec4 vColor;\\r\\nout vec4 vPos;\\r\\nout vec2 vUV;\\r\\nout vec3 vNormal;\\r\\nout vec3 vP;\\r\\nout vec2 vP0;\\r\\nout vec2 vP1;\\r\\n\\r\\nvoid main()\\r\\n{\\r\\n    gl_Position = uTransformMVP * vec4(aPos, 1);\\r\\n    vPos = gl_Position;\\r\\n    vColor = aColor;\\r\\n    vUV = aUV;\\r\\n    vNormal = (uTransformM_IT *  vec4(aNormal, 0)).xyz;\\r\\n    vP = aPos;\\r\\n    vP0 = aP0;\\r\\n    vP1 = aP1;\\r\\n    \\r\\n}\";\r\n// assets/shader/2d-shadow-frag.glsl\r\nvar d_shadow_frag_default = \"#version 300 es\\r\\nprecision highp float;\\r\\n\\r\\nin vec4 vPos;\\r\\nin vec2 vP0;\\r\\nin vec2 vP1;\\r\\nin vec3 vP;\\r\\n\\r\\nuniform vec2 uLightPos;\\r\\nuniform float uVolumnSize;\\r\\nuniform float uLightRange;\\r\\n\\r\\nout float fragColor;\\r\\n\\r\\n#define PI (3.14)\\r\\n\\r\\n// See: https://www.geogebra.org/geometry/ysvegxsz\\r\\n\\r\\nbool circleTangent(vec2 p, vec2 center, float radius, out vec2 p1, out vec2 p2)\\r\\n{\\r\\n    float r2 = radius * radius;\\r\\n    float d2 = (p.x - center.x) * (p.x - center.x) + (p.y - center.y) * (p.y - center.y);\\r\\n    if (d2 < r2)\\r\\n        return false;\\r\\n\\r\\n    vec2 p0 = p - center;\\r\\n    p1 = vec2(r2 / d2) * p0 + vec2(radius / d2 * sqrt(d2 - r2)) * vec2(-p0.y, p0.x);\\r\\n    p2 = vec2(r2 / d2) * p0 - vec2(radius / d2 * sqrt(d2 - r2)) * vec2(-p0.y, p0.x);\\r\\n    p1 += center;\\r\\n    p2 += center;\\r\\n    return true;\\r\\n}\\r\\n\\r\\nfloat cross2(vec2 u, vec2 v)\\r\\n{\\r\\n\treturn cross(vec3(u, 0.0), vec3(v, 0.0)).z;\\r\\n}\\r\\nfloat saturate(float x)\\r\\n{\\r\\n    return clamp(x, 0.0, 1.0);\\r\\n    // return min(max(x, 0.0), 1.0);\\r\\n    if (x <= 0.0)\\r\\n        return 0.0;\\r\\n    else if (x >= 1.0)\\r\\n        return 1.0;\\r\\n    return x;\\r\\n}\\r\\n// Fix undefined result when x > 1\\r\\nfloat fixacos(float x) {\\r\\n    if (x >= 1.0)\\r\\n        return 0.0;\\r\\n    return acos(x);\\r\\n}\\r\\n\\r\\nvoid main()\\r\\n{\\r\\n    vec2 p = vP.xy;\\r\\n    vec2 p1, p2;\\r\\n    // p1 = uLightPos.xy;\\r\\n    // p2 = uLightPos.xy;\\r\\n    circleTangent(p, vec2(0), uVolumnSize, p1, p2);\\r\\n    vec2 right = normalize(p1 - p);\\r\\n    vec2 left = normalize(p2 - p);\\r\\n    vec2 u = normalize(vP1 - p);\\r\\n    vec2 v = normalize(vP0 - p);\\r\\n    if(cross2(v, u) < 0.0)\\r\\n    {\\r\\n        vec2 t = v;\\r\\n        v = u;\\r\\n        u = t;\\r\\n    }\\r\\n    \\r\\n\tfloat leftLeak = saturate(sign(cross2(u, left))) * fixacos(dot(u, left));\\r\\n\tfloat rightLeak = saturate(sign(cross2(right, v))) * fixacos(dot(right, v));\\r\\n    float total = acos(dot(right, left));\\r\\n\\r\\n\\r\\n    fragColor = 1.0 - (leftLeak + rightLeak) / total;\\r\\n}\";\r\n// assets/shader/2d-light-vert.glsl\r\nvar d_light_vert_default = \"// #version 300 es\\r\\nprecision highp float;\\r\\n\\r\\nattribute vec3 aPos;\\r\\nattribute vec4 aColor;\\r\\nattribute vec2 aUV;\\r\\nattribute vec3 aNormal;\\r\\n\\r\\nuniform mat4 uTransformM;\\r\\nuniform mat4 uTransformVP;\\r\\nuniform mat4 uTransformMVP;\\r\\nuniform mat4 uTransformM_IT;\\r\\n\\r\\nvarying vec4 vColor;\\r\\nvarying vec4 vPos;\\r\\nvarying vec2 vUV;\\r\\nvarying vec3 vNormal;\\r\\nvarying vec3 vWorldPos;\\r\\n\\r\\nvoid main()\\r\\n{\\r\\n    gl_Position = uTransformMVP * vec4(aPos, 1);\\r\\n    vPos = gl_Position;\\r\\n    vColor = aColor;\\r\\n    vUV = aUV;\\r\\n    vNormal = (uTransformM_IT *  vec4(aNormal, 0)).xyz;\\r\\n    vWorldPos = (uTransformM * vec4(aPos, 1)).xyz;\\r\\n    \\r\\n}\";\r\n// assets/shader/2d-light-frag.glsl\r\nvar d_light_frag_default = \"// #version 300 es\\r\\n#ifdef GL_FRAGMENT_PRECISION_HIGH\\r\\n  precision highp float;\\r\\n#else\\r\\n  precision mediump float;\\r\\n#endif\\r\\n\\r\\n#define MAX_LIGHT 4\\r\\n\\r\\nvarying vec2 vUV;\\r\\n\\r\\nuniform vec4 uLightPosList[MAX_LIGHT];\\r\\nuniform vec4 uLightColorList[MAX_LIGHT];\\r\\nuniform vec4 uLightParamsList[MAX_LIGHT]; // (volumn, range, attenuation, intensity)\\r\\nuniform sampler2D uShadowMapList[MAX_LIGHT];\\r\\nuniform int uLightCount;\\r\\nuniform vec4 uCameraParams; // (pos.x, pos.y, viewWidth, viewHgith)\\r\\nuniform vec4 uAmbientLightColor;\\r\\n\\r\\n// out vec4 fragColor;\\r\\n\\r\\nfloat lightAttenuation(float r, float attenuation)\\r\\n{\\r\\n    if(attenuation <= -1.0)\\r\\n        return 0.0;\\r\\n    else if (attenuation <= 0.0)\\r\\n    {\\r\\n        float t = 1.0 / (attenuation + 1.0) - 1.0;\\r\\n        return exp(-r * t) - exp(-t) * r;\\r\\n    }\\r\\n    else if (attenuation < 1.0)\\r\\n    {\\r\\n        float t = 1.0 / (1.0 - attenuation) - 1.0;\\r\\n        r = 1.0 - r;\\r\\n        return 1.0 - (exp(-r * t) - exp(-t) * r);\\r\\n    }\\r\\n    else {\\r\\n        return r >= 1.0 ? 0.0 : 1.0;\\r\\n    }\\r\\n}\\r\\n\\r\\nvoid main()\\r\\n{\\r\\n    vec2 worldPos = (vUV - vec2(0.5)) * uCameraParams.zw + uCameraParams.xy;\\r\\n    for (int i = 0; i < MAX_LIGHT; i++)\\r\\n    {\\r\\n        float r = distance(uLightPosList[i].xy, worldPos);\\r\\n        r -= uLightParamsList[i].x;\\r\\n        r = r / (uLightParamsList[i].y -  uLightParamsList[i].x);\\r\\n        float light = lightAttenuation(clamp(r, 0.0, 1.0), uLightParamsList[i].z);\\r\\n        light *= uLightParamsList[i].w;\\r\\n        float shadow = texture2D(uShadowMapList[i], vUV.xy).r;\\r\\n        light *= 1.0 - shadow;\\r\\n        \\r\\n        gl_FragColor += vec4(light) * uLightColorList[i].rgba;\\r\\n    }\\r\\n    gl_FragColor += uAmbientLightColor;\\r\\n    \\r\\n}\";\r\n// assets/shader/box-blur.glsl\r\nvar box_blur_default = \"#version 300 es\\r\\nprecision mediump float;\\r\\n\\r\\nin vec4 vColor;\\r\\nin vec4 vPos;\\r\\nin vec2 vUV;\\r\\n\\r\\nuniform sampler2D uMainTex;\\r\\nuniform vec4 uTexSize; // (w, h, 1/w, 1/h)\\r\\nuniform float uSampleOffset;\\r\\n\\r\\nout vec4 fragColor;\\r\\n\\r\\nvoid main()\\r\\n{\\r\\n    vec2 delta = vec2(-uSampleOffset, uSampleOffset);\\r\\n    vec4 color = \\r\\n      texture(uMainTex, clamp(vUV.xy + uTexSize.zw * delta.xx, vec2(0), vec2(1)))\\r\\n    + texture(uMainTex, clamp(vUV.xy + uTexSize.zw * delta.yx, vec2(0), vec2(1)))\\r\\n    + texture(uMainTex, clamp(vUV.xy + uTexSize.zw * delta.yy, vec2(0), vec2(1)))\\r\\n    + texture(uMainTex, clamp(vUV.xy + uTexSize.zw * delta.xy, vec2(0), vec2(1)));\\r\\n\\r\\n    color /= vec4(4.0);\\r\\n\\r\\n    fragColor = color.rgba;\\r\\n}\";\r\n// assets/shader/bloom-filter.glsl\r\nvar bloom_filter_default = \"#version 300 es\\r\\nprecision mediump float;\\r\\n\\r\\nin vec2 vUV;\\r\\nuniform sampler2D uMainTex;\\r\\nuniform float uThreshold;\\r\\nuniform float uSoftThreshold;\\r\\n\\r\\nout vec4 fragColor;\\r\\n\\r\\n// Ref: https://catlikecoding.com/unity/tutorials/advanced-rendering/bloom/\\r\\nvoid main()\\r\\n{\\r\\n    vec3 color =  texture(uMainTex, vUV).rgb;\\r\\n    float brightness = max(color.r, max(color.g, color.b));\\r\\n    float knee = uThreshold * uSoftThreshold;\\r\\n    float soft = brightness - uThreshold + knee;\\r\\n    soft = clamp(soft, 0.0, 2.0 * knee);\\r\\n    soft = soft * soft / (4.0 * knee + 0.00001);\\r\\n\\r\\n    float contribution = max(soft, brightness - uThreshold);\\r\\n\tcontribution /= max(brightness, 0.00001);\\r\\n\\r\\n    color = contribution * color;\\r\\n\\r\\n\\r\\n\\r\\n    fragColor = vec4(color.rgb, 1.0);\\r\\n}\";\r\n// assets/shader/blit-copy.glsl\r\nvar blit_copy_default = \"#version 300 es\\r\\nprecision mediump float;\\r\\n\\r\\nin vec2 vUV;\\r\\nuniform sampler2D uMainTex;\\r\\n\\r\\nout vec4 fragColor;\\r\\n\\r\\nvoid main()\\r\\n{\\r\\n    fragColor = texture(uMainTex, vUV).rgba;\\r\\n}\";\r\n// assets/shader/bloom-compose.glsl\r\nvar bloom_compose_default = \"#version 300 es\\r\\nprecision mediump float;\\r\\n\\r\\nin vec2 vUV;\\r\\n\\r\\nuniform sampler2D uMainTex;\\r\\nuniform float uIntensity;\\r\\n\\r\\nout vec4 fragColor;\\r\\n\\r\\nvoid main()\\r\\n{\\r\\n    fragColor = vec4(texture(uMainTex, vUV).rgb * vec3(uIntensity), 1.0);\\r\\n}\";\r\n// assets/shader/2d-light-simple-vert.glsl\r\nvar d_light_simple_vert_default = \"#version 300 es\\r\\nprecision mediump float;\\r\\n\\r\\nin vec3 aPos;\\r\\nin vec2 aUV;\\r\\nin vec4 aLightColor;\\r\\nin vec4 aLightParams; // (volumn, range, attenuation, intensity)\\r\\nin vec3 aLightPos;\\r\\n\\r\\nuniform mat4 uTransformMVP;\\r\\n\\r\\nout vec4 vLightColor;\\r\\nout vec4 vLightParams; \\r\\nout vec3 vLightPos;\\r\\nout vec4 vPos;\\r\\nout vec2 vUV;\\r\\n\\r\\nvoid main()\\r\\n{\\r\\n    gl_Position = uTransformMVP * vec4(aPos.xy * vec2(aLightParams.y) + aLightPos.xy, 0, 1);\\r\\n    vPos = gl_Position;\\r\\n    vUV = aUV;\\r\\n    vLightParams = aLightParams;\\r\\n    vLightColor = aLightColor;\\r\\n    vLightPos = aLightPos;\\r\\n}\";\r\n// assets/shader/2d-light-simple-frag.glsl\r\nvar d_light_simple_frag_default = \"#version 300 es\\r\\nprecision mediump float;\\r\\n\\r\\nin vec4 vLightColor;\\r\\nin vec4 vLightParams; // (volumn, range, attenuation, intensity)\\r\\nin vec4 vPos;\\r\\nin vec2 vUV;\\r\\n\\r\\nout vec4 fragColor;\\r\\n\\r\\nfloat lightAttenuation(float r, float range, float volumn, float attenuation)\\r\\n{\\r\\n    r -= volumn;\\r\\n    r /= range - volumn;\\r\\n    if(attenuation <= -1.0)\\r\\n        return 0.0;\\r\\n    else if (attenuation <= 0.0)\\r\\n    {\\r\\n        float t = 1.0 / (attenuation + 1.0) - 1.0;\\r\\n        return exp(-r * t) - exp(-t) * r;\\r\\n    }\\r\\n    else if (attenuation < 1.0)\\r\\n    {\\r\\n        float t = 1.0 / (1.0 - attenuation) - 1.0;\\r\\n        r = 1.0 - r;\\r\\n        return 1.0 - (exp(-r * t) - exp(-t) * r);\\r\\n    }\\r\\n    else {\\r\\n        return r >= 1.0 ? 0.0 : 1.0;\\r\\n    }\\r\\n}\\r\\n\\r\\nvoid main()\\r\\n{\\r\\n    float r = length(vUV * vec2(2) - vec2(1)) * vLightParams.y;\\r\\n    float attenuation = lightAttenuation(r, vLightParams.y, vLightParams.x, vLightParams.z);\\r\\n    attenuation = max(attenuation, 0.0);\\r\\n    attenuation *= vLightParams.w;\\r\\n    vec3 color = vLightColor.rgb * vec3(attenuation);\\r\\n\\r\\n    fragColor = vec4(color, 1);\\r\\n    // fragColor = vec4(1);\\r\\n}\";\r\n// assets/shader/2d-tilemap-vert.glsl\r\nvar d_tilemap_vert_default = \"#version 300 es\\r\\nprecision mediump float;\\r\\n\\r\\n// Mesh data\\r\\nin ivec2 aPos;\\r\\nin vec2 aUV;\\r\\nin vec3 aNormal;\\r\\n\\r\\n// Instancing data\\r\\nin vec4 aTileColor;\\r\\nin vec4 aTileUV;\\r\\nin ivec2 aTilePos;\\r\\n\\r\\nuniform mat4 uTransformM;\\r\\nuniform mat4 uTransformVP;\\r\\nuniform mat4 uTransformMVP;\\r\\nuniform mat4 uTransformM_IT;\\r\\n\\r\\nout vec4 vPos;\\r\\nout vec4 vColor;\\r\\nout vec2 vUV;\\r\\nout vec3 vNormal;\\r\\nout vec3 vWorldPos;\\r\\n\\r\\nvoid main()\\r\\n{\\r\\n    vec4 vertPos = vec4(aPos.xy + aTilePos.xy, 0, 1);\\r\\n    gl_Position = uTransformMVP * vertPos;\\r\\n    vPos = gl_Position;\\r\\n    vColor = aTileColor;\\r\\n    vUV = aTileUV.zw * aUV + aTileUV.xy;\\r\\n    vNormal = (uTransformM_IT *  vec4(aNormal, 0)).xyz;\\r\\n    vWorldPos = (uTransformM * vertPos).xyz;\\r\\n}\";\r\n// assets/shader/default-vert.glsl\r\nvar default_vert_default = \"#version 300 es\\r\\nprecision mediump float;\\r\\n\\r\\nin vec3 aPos;\\r\\nin vec4 aColor;\\r\\nin vec2 aUV;\\r\\nin vec3 aNormal;\\r\\n\\r\\nuniform mat4 uTransformM;\\r\\nuniform mat4 uTransformVP;\\r\\nuniform mat4 uTransformMVP;\\r\\nuniform mat4 uTransformM_IT;\\r\\n\\r\\nout vec4 vColor;\\r\\nout vec4 vPos;\\r\\nout vec2 vUV;\\r\\nout vec3 vNormal;\\r\\nout vec3 vWorldPos;\\r\\n\\r\\nvoid main()\\r\\n{\\r\\n    gl_Position = uTransformMVP * vec4(aPos, 1);\\r\\n    vPos = gl_Position;\\r\\n    vColor = aColor;\\r\\n    vUV = aUV;\\r\\n    vNormal = (uTransformM_IT *  vec4(aNormal, 0)).xyz;\\r\\n    vWorldPos = (uTransformM * vec4(aPos, 1)).xyz;\\r\\n    \\r\\n}\";\r\n// assets/shader/lit-lambert.glsl\r\nvar lit_lambert_default = \"#version 300 es\\r\\nprecision mediump float;\\r\\n\\r\\n#define MAX_LIGHTS 8\\r\\n\\r\\nin vec4 vColor;\\r\\nin vec4 vPos;\\r\\nin vec2 vUV;\\r\\nin vec3 vNormal;\\r\\nin vec3 vWorldPos;\\r\\n\\r\\nuniform sampler2D uMainTex;\\r\\nuniform vec4 uColor;\\r\\nuniform vec4 uLightDir[MAX_LIGHTS];\\r\\nuniform int uLightCount;\\r\\nuniform vec4 uLightColor[MAX_LIGHTS];\\r\\n\\r\\nout vec4 fragColor;\\r\\n\\r\\nvoid main()\\r\\n{\\r\\n    vec4 color = uColor * vColor * texture(uMainTex, vUV.xy).rgba;\\r\\n\\r\\n    vec3 light = vec3(0);\\r\\n    for (int i = 0; i < uLightCount; ++i)\\r\\n    {\\r\\n        vec3 lightDir = normalize(uLightDir[i].xyz - vWorldPos.xyz * vec3(uLightDir[i].w));\\r\\n        float lambertian = max(dot(vNormal, lightDir), 0.0);\\r\\n        light += vec3(lambertian) * uLightColor[i].rgb;\\r\\n    }\\r\\n\\r\\n    color.rgb *= light.rgb;\\r\\n\\r\\n    fragColor = color;\\r\\n}\";\r\n// assets/shader/unlit-color.glsl\r\nvar unlit_color_default = \"#version 300 es\\r\\nprecision mediump float;\\r\\n\\r\\nin vec4 vColor;\\r\\nin vec4 vPos;\\r\\n\\r\\nout vec4 fragColor;\\r\\n\\r\\nvoid main()\\r\\n{\\r\\n    fragColor = vColor;\\r\\n}\";\r\n// assets/shader/shader.ts\r\nvar ShaderSource = {\r\n    default2D: [d_vert_default, d_frag_default],\r\n    particle2D: [particle_vert_default, d_frag_default],\r\n    shadow2D: [d_shadow_vert_default, d_shadow_frag_default],\r\n    light2D: [d_light_vert_default, d_light_frag_default],\r\n    light2DSimple: [d_light_simple_vert_default, d_light_simple_frag_default],\r\n    boxBlur: [d_vert_default, box_blur_default],\r\n    bloomFilter: [d_vert_default, bloom_filter_default],\r\n    bloomCompose: [d_vert_default, bloom_compose_default],\r\n    blitCopy: [d_vert_default, blit_copy_default],\r\n    tilemapInstance: [d_tilemap_vert_default, d_frag_default],\r\n    defaultVert: default_vert_default,\r\n    litLambert: lit_lambert_default,\r\n    unlitColor: [default_vert_default, unlit_color_default]\r\n};\r\nexport { ShaderSource };\r\n//# sourceMappingURL=index.js.map\r\n//# sourceMappingURL=index.js.map","import { MathUtils } from \"zogra-renderer\";\r\nexport function Timeline(timeline) {\r\n    const times = Object.keys(timeline.frames).map(t => ({ key: t, time: parseFloat(t) })).sort((a, b) => a.time - b.time);\r\n    const output = {\r\n        loop: timeline.loop || false,\r\n        duration: timeline.duration,\r\n        frames: [],\r\n        updater: timeline.updater,\r\n    };\r\n    for (const time of times) {\r\n        output.frames.push({\r\n            time: time.time,\r\n            values: timeline.frames[time.key],\r\n        });\r\n    }\r\n    return output;\r\n}\r\nexport class AnimationPlayback {\r\n    constructor(timeline, target, updater) {\r\n        this.frameTime = 0;\r\n        this.time = 0;\r\n        this.timeScale = 1;\r\n        this.target = undefined;\r\n        this.updater = undefined;\r\n        this.state = \"stopped\";\r\n        this.currentFrame = {};\r\n        this.frameTime = 0;\r\n        this.timeline = timeline;\r\n        this.loop = timeline.loop;\r\n        this.duration = timeline.duration;\r\n        this.target = target;\r\n        this.updater = updater;\r\n        if (!this.updater && target && timeline.updater) {\r\n            this.updater = (frame) => {\r\n                timeline.updater(frame.frame, target);\r\n            };\r\n        }\r\n    }\r\n    get playing() { return this.state === \"playing\" || this.state === \"pending\"; }\r\n    get finished() { return this.state === \"stopped\"; }\r\n    play(time = 0) {\r\n        return new Promise((resolve, reject) => {\r\n            this.resolver = resolve;\r\n            this.rejector = reject;\r\n            this.frameTime = time;\r\n            this.frameTime = time;\r\n            this.state = \"pending\";\r\n            if (this.timeline && this.timeline.frames.length > 0)\r\n                Object.assign(this.currentFrame, this.timeline.frames[0].values);\r\n        });\r\n    }\r\n    stop() {\r\n        this.state = \"stopped\";\r\n    }\r\n    update(dt) {\r\n        switch (this.state) {\r\n            case \"stopped\":\r\n                return;\r\n            case \"pending\":\r\n                this.state = \"playing\";\r\n                this.checkEnd();\r\n                this.updateAnimation(dt);\r\n                break;\r\n            case \"playing\":\r\n                this.time += dt * this.timeScale;\r\n                this.checkEnd();\r\n                this.updateAnimation(dt);\r\n                break;\r\n        }\r\n    }\r\n    reject() {\r\n        var _a;\r\n        (_a = this.rejector) === null || _a === void 0 ? void 0 : _a.call(this);\r\n    }\r\n    updateAnimation(dt) {\r\n        if (!this.updater)\r\n            return;\r\n        if (this.loop)\r\n            this.frameTime = this.time % this.timeline.duration;\r\n        else\r\n            this.frameTime = this.time;\r\n        this.updateFrame();\r\n        this.updater({\r\n            deltaTime: dt,\r\n            frame: this.currentFrame,\r\n            animator: this,\r\n            target: this.target,\r\n            time: this.time,\r\n            frameTime: this.frameTime,\r\n            progress: this.frameTime / this.duration\r\n        });\r\n    }\r\n    updateFrame() {\r\n        if (this.timeline && this.timeline.frames.length > 0) {\r\n            for (let i = 0; i < this.timeline.frames.length; i++) {\r\n                if (this.timeline.frames[i].time >= this.frameTime) {\r\n                    if (i === 0 || this.timeline.frames[i].time === this.frameTime)\r\n                        Object.assign(this.currentFrame, this.timeline.frames[i].values);\r\n                    else {\r\n                        this.interpolate(this.currentFrame, this.timeline.frames[i - 1], this.timeline.frames[i]);\r\n                    }\r\n                    return this.currentFrame;\r\n                }\r\n            }\r\n            if (this.loop) {\r\n                this.interpolate(this.currentFrame, this.timeline.frames[this.timeline.frames.length - 1], this.timeline.frames[0]);\r\n            }\r\n            else {\r\n                Object.assign(this.currentFrame, this.timeline.frames[this.timeline.frames.length - 1].values);\r\n            }\r\n        }\r\n    }\r\n    interpolate(frame, previous, next) {\r\n        let t = (this.frameTime - previous.time) / (next.time - previous.time);\r\n        if (next.time < previous.time)\r\n            t = (this.frameTime - previous.time) / (this.timeline.duration + next.time - previous.time);\r\n        for (const key in previous.values) {\r\n            frame[key] = previous.values[key];\r\n            if (typeof (previous.values[key]) === \"number\" && typeof (next.values[key]) === \"number\") {\r\n                frame[key] = MathUtils.lerp(previous.values[key], next.values[key], t);\r\n            }\r\n        }\r\n        return frame;\r\n    }\r\n    checkEnd() {\r\n        var _a;\r\n        if (this.time >= this.duration) {\r\n            this.time = this.duration;\r\n            this.state = \"stopped\";\r\n            (_a = this.resolver) === null || _a === void 0 ? void 0 : _a.call(this, this);\r\n        }\r\n    }\r\n}\r\nclass ProceduralPlayback {\r\n    constructor(time, updater) {\r\n        this.currentTime = 0;\r\n        this.state = \"stopped\";\r\n        this.totalTime = time;\r\n        this.updater = updater;\r\n    }\r\n    get finished() { return this.state === \"stopped\"; }\r\n    play() {\r\n        return new Promise((resolve, reject) => {\r\n            this.rejector = reject;\r\n            this.resolver = resolve;\r\n            if (this.state === \"stopped\")\r\n                this.state = \"pending\";\r\n        });\r\n    }\r\n    stop() {\r\n        this.resolver = undefined;\r\n        this.state = \"stopped\";\r\n    }\r\n    update(dt) {\r\n        var _a;\r\n        switch (this.state) {\r\n            case \"stopped\":\r\n                return;\r\n            case \"pending\":\r\n                this.state = \"playing\";\r\n            case \"playing\":\r\n                this.currentTime += dt;\r\n                this.checkEnd();\r\n                (_a = this.updater) === null || _a === void 0 ? void 0 : _a.call(this, this.currentTime / this.totalTime, dt);\r\n                break;\r\n        }\r\n    }\r\n    reject() {\r\n        var _a;\r\n        (_a = this.rejector) === null || _a === void 0 ? void 0 : _a.call(this);\r\n    }\r\n    checkEnd() {\r\n        var _a;\r\n        if (this.currentTime >= this.totalTime) {\r\n            this.currentTime = this.totalTime;\r\n            this.state = \"stopped\";\r\n            (_a = this.resolver) === null || _a === void 0 ? void 0 : _a.call(this);\r\n        }\r\n    }\r\n}\r\nexport class Animator {\r\n    constructor(target) {\r\n        this.tracks = [];\r\n        this.defaultTarget = target;\r\n    }\r\n    playOn(track, timeline, target = this.defaultTarget, duration = timeline.duration, updater) {\r\n        const playback = new AnimationPlayback(timeline, target, updater);\r\n        playback.duration = duration;\r\n        const promise = playback.play();\r\n        if (this.tracks[track])\r\n            this.tracks[track].reject();\r\n        this.tracks[track] = playback;\r\n        return promise;\r\n    }\r\n    play(timeline, target = this.defaultTarget, duration = timeline.duration, updater) {\r\n        return this.playOn(this.tracks.length, timeline, target, duration, updater);\r\n    }\r\n    playProceduralOn(track, time, updater, startTime = 0) {\r\n        const playback = new ProceduralPlayback(time, updater);\r\n        playback.currentTime = startTime;\r\n        const promise = playback.play();\r\n        if (this.tracks[track])\r\n            this.tracks[track].reject();\r\n        this.tracks[track] = playback;\r\n        return promise;\r\n    }\r\n    playProcedural(time, updater, startTime = 0) {\r\n        return this.playProceduralOn(this.tracks.length, time, updater);\r\n    }\r\n    wait(time, callback) {\r\n        const playback = new ProceduralPlayback(time);\r\n        const promise = playback.play();\r\n        this.tracks.push(playback);\r\n        promise.then(callback);\r\n    }\r\n    update(dt) {\r\n        for (let i = 0; i < this.tracks.length; i++) {\r\n            const playback = this.tracks[i];\r\n            if (!playback)\r\n                continue;\r\n            playback.update(dt);\r\n            if (playback.finished) {\r\n                this.tracks[i] = undefined;\r\n            }\r\n        }\r\n    }\r\n    clear() {\r\n        for (const track of this.tracks)\r\n            track === null || track === void 0 ? void 0 : track.reject();\r\n        this.tracks.length = 0;\r\n    }\r\n}\r\n//# sourceMappingURL=animation.js.map","import { RenderTexture } from \"zogra-renderer\";\r\nimport { GlobalContext } from \"zogra-renderer\";\r\nimport { vec2 } from \"zogra-renderer\";\r\nimport { Entity } from \"./entity\";\r\nimport { mat4 } from \"zogra-renderer\";\r\nimport { Deg2Rad, div, mul, minus } from \"zogra-renderer\";\r\nimport { Color } from \"zogra-renderer\";\r\nimport { vec3 } from \"zogra-renderer\";\r\nimport { ray } from \"zogra-renderer\";\r\nimport { vec4 } from \"zogra-renderer\";\r\nexport var Projection;\r\n(function (Projection) {\r\n    Projection[Projection[\"Perspective\"] = 0] = \"Perspective\";\r\n    Projection[Projection[\"Orthographic\"] = 1] = \"Orthographic\";\r\n})(Projection || (Projection = {}));\r\nexport class Camera extends Entity {\r\n    constructor(ctx = GlobalContext()) {\r\n        super();\r\n        this.output = null;\r\n        this.FOV = 30;\r\n        this.near = 0.3;\r\n        this.far = 1000;\r\n        this.viewHeight = 1;\r\n        this.projection = Projection.Perspective;\r\n        this.clearColor = Color.black;\r\n        this.clearDepth = true;\r\n        this.postprocess = [];\r\n        this.ctx = ctx;\r\n    }\r\n    get pixelSize() {\r\n        if (this.output instanceof RenderTexture)\r\n            return vec2(this.output.width, this.output.height);\r\n        else\r\n            return vec2(this.ctx.width, this.ctx.height);\r\n    }\r\n    get aspectRatio() { return this.pixelSize.x / this.pixelSize.y; }\r\n    get viewProjectionMatrix() {\r\n        const matView = this.worldToLocalMatrix;\r\n        const matProjection = this.projectionMatrix;\r\n        return mat4.mul(matProjection, matView);\r\n    }\r\n    get projectionMatrix() {\r\n        return this.projection === Projection.Perspective\r\n            ? mat4.perspective(this.FOV * Deg2Rad, this.aspectRatio, this.near, this.far)\r\n            : mat4.ortho(this.viewHeight, this.aspectRatio, this.near, this.far);\r\n    }\r\n    on(event, listener) {\r\n        this.eventEmitter.with().on(event, listener);\r\n    }\r\n    off(event, listener) {\r\n        this.eventEmitter.with().on(event, listener);\r\n    }\r\n    __preRender(context) {\r\n        this.eventEmitter.with().emit(\"prerender\", this, context);\r\n    }\r\n    __postRender(contect) {\r\n        this.eventEmitter.with().emit(\"postrender\", this, contect);\r\n    }\r\n    screenToRay(pos) {\r\n        const p = this.screenToWorld(pos);\r\n        return ray(this.position.clone(), minus(vec3(p.x, p.y, p.z), this.position));\r\n    }\r\n    screenToWorld(pos) {\r\n        const w = this.projection == Projection.Perspective\r\n            ? this.near\r\n            : 1;\r\n        const ndcXY = this.screenToViewport(pos).mul(vec2(2, -2)).minus(vec2(1, -1));\r\n        const clip = mul(vec4(ndcXY.x, ndcXY.y, -1, 1), w);\r\n        const matVPInv = mat4.invert(this.viewProjectionMatrix);\r\n        const p = mat4.mulVec4(matVPInv, clip);\r\n        return vec3(p[0], p[1], p[2]);\r\n    }\r\n    screenToViewport(pos) {\r\n        if (this.output === null)\r\n            return div(pos, vec2(this.ctx.width, this.ctx.height));\r\n        else if (this.output instanceof RenderTexture) {\r\n            return div(pos, vec2(this.output.width, this.output.height));\r\n        }\r\n        else\r\n            return vec2.zero();\r\n    }\r\n}\r\n//# sourceMappingURL=camera.js.map","import { Scene } from \"./scene\";\r\nimport { PreviewRenderer, RenderContext } from \"../render-pipeline\";\r\nimport { Camera } from \"./camera\";\r\nimport { ZograRenderer } from \"zogra-renderer\";\r\nimport { EventEmitter } from \"zogra-renderer\";\r\nimport { UnknownPhysics } from \"../physics/physics-generic\";\r\nexport class ZograEngine {\r\n    constructor(canvas, RenderPipeline = PreviewRenderer) {\r\n        this.fixedDeltaTime = false;\r\n        this._time = { deltaTime: 0, time: 0 };\r\n        this.renderer = new ZograRenderer(canvas, canvas.width, canvas.height);\r\n        this.renderPipeline = new RenderPipeline(this.renderer);\r\n        this._scene = new Scene(UnknownPhysics);\r\n        this.eventEmitter = new EventEmitter();\r\n    }\r\n    get time() { return this._time; }\r\n    get scene() { return this._scene; }\r\n    set scene(value) {\r\n        const previous = this._scene;\r\n        this._scene = value;\r\n        value.engine = this;\r\n        this.eventEmitter.emit(\"scene-change\", value, previous);\r\n    }\r\n    renderScene() {\r\n        const cameras = this.scene.getEntitiesOfType(Camera);\r\n        this.renderPipeline.render(RenderContext.create(this.renderer), this.scene, cameras);\r\n    }\r\n    start() {\r\n        let previousDelay = 0;\r\n        let startDelay = 0;\r\n        let currentTime = 0;\r\n        const update = (delay) => {\r\n            if (previousDelay === 0) {\r\n                startDelay = previousDelay = delay;\r\n                requestAnimationFrame(update);\r\n                return;\r\n            }\r\n            if (this.fixedDeltaTime)\r\n                currentTime += 16;\r\n            else\r\n                currentTime = delay;\r\n            const time = (currentTime - startDelay) / 1000;\r\n            const dt = (currentTime - previousDelay) / 1000;\r\n            previousDelay = currentTime;\r\n            const t = {\r\n                time: time,\r\n                deltaTime: dt\r\n            };\r\n            this.update(t);\r\n            requestAnimationFrame(update);\r\n        };\r\n        requestAnimationFrame(update);\r\n    }\r\n    update(time) {\r\n        this._time = time;\r\n        this.eventEmitter.emit(\"update\", time);\r\n        this.scene.__update(time);\r\n        this.eventEmitter.emit(\"render\", this.scene.getEntitiesOfType(Camera));\r\n        this.renderScene();\r\n    }\r\n    on(event, listener) {\r\n        this.eventEmitter.on(event, listener);\r\n    }\r\n    off(event, listener) {\r\n        this.eventEmitter.off(event, listener);\r\n    }\r\n}\r\n//# sourceMappingURL=engine.js.map","import { Transform } from \"./transform\";\r\nimport { AssetManager } from \"zogra-renderer\";\r\nimport { EventEmitter } from \"zogra-renderer\";\r\nexport class Entity extends Transform {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.assetID = AssetManager.newAssetID(this);\r\n        this.name = `Entity_${this.assetID}`;\r\n        this.eventEmitter = new EventEmitter();\r\n        this._destroyed = false;\r\n        this._collider = null;\r\n    }\r\n    get collider() { return this._collider; }\r\n    set collider(value) {\r\n        if (this.scene && value)\r\n            value.__bind(this, this.scene);\r\n        if (this._collider && this._collider !== value)\r\n            this._collider.__unbind();\r\n        this._collider = value;\r\n    }\r\n    get destroyed() { return this._destroyed; }\r\n    ;\r\n    on(event, listener) {\r\n        return this.eventEmitter.on(event, listener);\r\n    }\r\n    off(event, listener) {\r\n        this.eventEmitter.off(event, listener);\r\n    }\r\n    destroy() {\r\n        this._destroyed = true;\r\n        if (this.scene)\r\n            this.scene.remove(this);\r\n        else\r\n            AssetManager.destroy(this.assetID);\r\n    }\r\n    start(time) { }\r\n    update(time) { }\r\n    exit(time) { }\r\n    /** @internal */\r\n    __updateRecursive(time) {\r\n        this.update(time);\r\n        this.eventEmitter.emit(\"update\", this, time);\r\n        for (const entity of this.children)\r\n            entity.__updateRecursive(time);\r\n    }\r\n    /** @internal */\r\n    __addToScene(scene) {\r\n        var _a;\r\n        super.__addToScene(scene);\r\n        (_a = this._collider) === null || _a === void 0 ? void 0 : _a.__bind(this, scene);\r\n    }\r\n    /** @internal */\r\n    __removeFromScene(scene) {\r\n        var _a;\r\n        super.__removeFromScene(scene);\r\n        (_a = this._collider) === null || _a === void 0 ? void 0 : _a.__unbindPhysics();\r\n    }\r\n    /** @internal */\r\n    __start(time) {\r\n        this.start(time);\r\n        this.eventEmitter.with().emit(\"start\", this, time);\r\n    }\r\n    /** @internal */\r\n    __exit(time) {\r\n        this.exit(time);\r\n        this.eventEmitter.with().emit(\"exit\", this, time);\r\n        if (this._destroyed)\r\n            AssetManager.destroy(this.assetID);\r\n    }\r\n}\r\nexport class EntityManager {\r\n    constructor() {\r\n        this.entityMap = new Map();\r\n        this._entities = [];\r\n    }\r\n    get entities() { return this._entities; }\r\n    add(entity) {\r\n        this.entityMap.set(entity.assetID, entity);\r\n        this._entities = Array.from(this.entityMap.values());\r\n    }\r\n    removeRecursive(entity) {\r\n        this.entityMap.delete(entity.assetID);\r\n        for (const child of entity.children)\r\n            this.removeRecursive(child);\r\n    }\r\n    remove(entity) {\r\n        this.removeRecursive(entity);\r\n        if (entity.parent) {\r\n            entity.parent.children.delete(entity);\r\n        }\r\n        this._entities = Array.from(this.entityMap.values());\r\n    }\r\n}\r\n//# sourceMappingURL=entity.js.map","export * from \"./camera\";\r\nexport * from \"./render-object\";\r\nexport * from \"./light\";\r\nexport * from \"./entity\";\r\nexport * from \"./scene\";\r\nexport * from \"./transform\";\r\nexport * from \"./engine\";\r\nexport * from \"./input\";\r\nexport * from \"./animation\";\r\nexport * from \"./particle-system\";\r\n//# sourceMappingURL=index.js.map","import { GlobalContext, vec2 } from \"zogra-renderer\";\r\nimport { minus } from \"zogra-renderer\";\r\nimport { DoubleBuffer } from \"../utils/util\";\r\nexport var KeyState;\r\n(function (KeyState) {\r\n    KeyState[KeyState[\"Pressed\"] = 1] = \"Pressed\";\r\n    KeyState[KeyState[\"Released\"] = 0] = \"Released\";\r\n})(KeyState || (KeyState = {}));\r\n;\r\n// interface InputManagerEvents extends EventDefinitions\r\n// {\r\n//     keydown: (key: Keys) => void;\r\n//     keyup: (key: Keys) => void;\r\n//     keypressed: (key: Keys) => void;\r\n//     mousemove: ()\r\n// }\r\nconst windowBound = {\r\n    getBoundingClientRect() {\r\n        return {\r\n            x: 0,\r\n            y: 0,\r\n            left: 0,\r\n            top: 0,\r\n            right: document.documentElement.clientWidth || window.innerWidth,\r\n            bottom: document.documentElement.clientHeight || window.innerHeight,\r\n            width: document.documentElement.clientWidth || window.innerWidth,\r\n            height: document.documentElement.clientHeight || window.innerHeight,\r\n        };\r\n    }\r\n};\r\nexport var TouchState;\r\n(function (TouchState) {\r\n    TouchState[TouchState[\"Idle\"] = 0] = \"Idle\";\r\n    TouchState[TouchState[\"Started\"] = 1] = \"Started\";\r\n    TouchState[TouchState[\"Moved\"] = 2] = \"Moved\";\r\n    TouchState[TouchState[\"Ended\"] = 4] = \"Ended\";\r\n    TouchState[TouchState[\"Canceled\"] = 8] = \"Canceled\";\r\n})(TouchState || (TouchState = {}));\r\nconst TouchInput = {\r\n    equals(a, b) {\r\n        return a.id === b.id && a.state === b.state && a.pos.equals(b.pos);\r\n    }\r\n};\r\nclass InputStates {\r\n    constructor() {\r\n        this.keyStates = new Map();\r\n        this.keyStatesThisFrame = new Map();\r\n        this.mousePos = vec2.zero();\r\n        this.mouseDelta = vec2.zero();\r\n        this.wheelDelta = 0;\r\n        this.touches = new Map();\r\n        this.touchList = [];\r\n    }\r\n}\r\nexport class InputManager {\r\n    constructor(options = {}) {\r\n        var _a, _b, _c;\r\n        this.preventBrowserShortcut = true;\r\n        this.bound = null;\r\n        this.states = new DoubleBuffer(() => new InputStates);\r\n        this.renderer = null;\r\n        this.eventTarget = options.target || window;\r\n        this.pointerLockElement = (_a = options.pointerLockElement) !== null && _a !== void 0 ? _a : document.body;\r\n        this.renderer = options.renderer || GlobalContext().renderer;\r\n        if (options.bound)\r\n            this.bound = options.bound;\r\n        else if ((_b = options.target) === null || _b === void 0 ? void 0 : _b.getBoundingClientRect)\r\n            this.bound = options.target;\r\n        else\r\n            this.bound = (_c = this.renderer) === null || _c === void 0 ? void 0 : _c.canvas;\r\n        this.eventTarget.addEventListener(\"keydown\", (e) => {\r\n            this.states.back.keyStates.set(e.keyCode, KeyState.Pressed);\r\n            if (this.states.current.keyStates.get(e.keyCode) !== KeyState.Pressed)\r\n                this.states.back.keyStatesThisFrame.set(e.keyCode, KeyState.Pressed);\r\n            if (this.preventBrowserShortcut && e.ctrlKey && (e.keyCode == Keys.S || e.keyCode == Keys.W)) {\r\n                e.preventDefault();\r\n                e.stopPropagation();\r\n            }\r\n        });\r\n        this.eventTarget.addEventListener(\"keyup\", e => {\r\n            this.states.back.keyStates.set(e.keyCode, KeyState.Released);\r\n            this.states.back.keyStatesThisFrame.set(e.keyCode, KeyState.Released);\r\n        });\r\n        this.eventTarget.addEventListener(\"mousedown\", e => {\r\n            var _a;\r\n            const rect = (_a = this.bound) === null || _a === void 0 ? void 0 : _a.getBoundingClientRect();\r\n            if (rect) {\r\n                const offset = vec2(rect.left, rect === null || rect === void 0 ? void 0 : rect.top);\r\n                const pos = minus(vec2(e.clientX, e.clientY), offset);\r\n                if (pos.x < 0 || pos.y < 0 || pos.x > rect.width || pos.y > rect.height)\r\n                    return;\r\n            }\r\n            this.states.back.keyStates.set(Keys.Mouse0 + e.button, KeyState.Pressed);\r\n            if (this.states.current.keyStates.get(Keys.Mouse0 + e.button) !== KeyState.Pressed)\r\n                this.states.back.keyStatesThisFrame.set(Keys.Mouse0 + e.button, KeyState.Pressed);\r\n        });\r\n        this.eventTarget.addEventListener(\"mouseup\", e => {\r\n            var _a;\r\n            const rect = (_a = this.bound) === null || _a === void 0 ? void 0 : _a.getBoundingClientRect();\r\n            if (rect) {\r\n                const offset = vec2(rect.left, rect === null || rect === void 0 ? void 0 : rect.top);\r\n                const pos = minus(vec2(e.clientX, e.clientY), offset);\r\n                if (pos.x < 0 || pos.y < 0 || pos.x > rect.width || pos.y > rect.height)\r\n                    return;\r\n            }\r\n            this.states.back.keyStates.set(Keys.Mouse0 + e.button, KeyState.Released);\r\n            this.states.back.keyStatesThisFrame.set(Keys.Mouse0 + e.button, KeyState.Released);\r\n        });\r\n        this.eventTarget.addEventListener(\"mousemove\", e => {\r\n            const pos = this.mapPointerPosition(e.clientX, e.clientY);\r\n            if (!pos)\r\n                return;\r\n            this.states.back.mouseDelta.plus(this.mapPointerMovement(e.movementX, e.movementY));\r\n            this.states.back.mousePos = pos;\r\n        });\r\n        this.eventTarget.addEventListener(\"wheel\", e => {\r\n            this.states.back.wheelDelta = e.deltaY;\r\n        });\r\n        this.eventTarget.addEventListener(\"touchstart\", this.touchEventHandler(TouchState.Started));\r\n        this.eventTarget.addEventListener(\"touchmove\", this.touchEventHandler(TouchState.Moved));\r\n        this.eventTarget.addEventListener(\"touchend\", this.touchEventHandler(TouchState.Ended));\r\n        this.eventTarget.addEventListener(\"touchcancel\", this.touchEventHandler(TouchState.Canceled));\r\n        for (const key in Keys) {\r\n            if (!isNaN(key))\r\n                continue;\r\n            if (Keys.hasOwnProperty(key)) {\r\n                this.states.back.keyStates.set(Keys[key], KeyState.Released);\r\n            }\r\n        }\r\n        window.addEventListener(\"beforeunload\", (e) => {\r\n            if (this.preventBrowserShortcut && (this.states.back.keyStates.get(Keys.W) === KeyState.Pressed || this.states.back.keyStates.get(Keys.Control) === KeyState.Pressed)) {\r\n                e.preventDefault();\r\n                e.returnValue = \"Really want to quit?\";\r\n            }\r\n        });\r\n    }\r\n    get pointerPosition() { return this.states.current.mousePos; }\r\n    get pointerDelta() { return this.states.current.mouseDelta; }\r\n    get wheelDelta() { return this.states.current.wheelDelta; }\r\n    get touches() { return this.states.current.touchList; }\r\n    getKey(key) {\r\n        return this.states.current.keyStates.get(key) === KeyState.Pressed ? true : false;\r\n    }\r\n    getKeyDown(key) {\r\n        return this.states.current.keyStatesThisFrame.get(key) === KeyState.Pressed ? true : false;\r\n    }\r\n    getKeyUp(key) {\r\n        return this.states.current.keyStatesThisFrame.get(key) === KeyState.Released ? true : false;\r\n    }\r\n    getTouchByID(id) {\r\n        return this.states.current.touches.get(id);\r\n    }\r\n    update() {\r\n        this.states.update();\r\n        this.states.back.keyStatesThisFrame.clear();\r\n        this.states.back.mouseDelta = vec2.zero();\r\n        this.states.back.wheelDelta = 0;\r\n        this.states.back.touches.clear();\r\n        for (const [key, value] of this.states.current.keyStates) {\r\n            this.states.back.keyStates.set(key, value);\r\n        }\r\n        for (const [key, value] of this.states.current.touches) {\r\n            if (!(value.state & (TouchState.Canceled | TouchState.Ended)))\r\n                this.states.back.touches.set(key, {\r\n                    id: value.id,\r\n                    pos: value.pos.clone(),\r\n                    state: TouchState.Idle,\r\n                    startPos: value.startPos,\r\n                });\r\n        }\r\n        this.states.back.mousePos = this.states.current.mousePos;\r\n        this.states.current.touchList = Array.from(this.states.current.touches.values()).sort((a, b) => b.id - a.id);\r\n    }\r\n    lockPointer() {\r\n        this.pointerLockElement.requestPointerLock();\r\n    }\r\n    releasePointer() {\r\n        document.exitPointerLock();\r\n    }\r\n    touchEventHandler(eventState) {\r\n        return (e) => {\r\n            for (let i = 0; i < e.changedTouches.length; i++) {\r\n                const touch = e.changedTouches.item(i);\r\n                const pos = this.mapPointerPosition(touch.clientX, touch.clientY);\r\n                // console.log(eventState, pos);\r\n                if (!pos)\r\n                    continue;\r\n                let state = this.states.back.touches.get(touch.identifier);\r\n                if (!state) {\r\n                    state = {\r\n                        id: touch.identifier,\r\n                        pos,\r\n                        state: eventState,\r\n                        startPos: pos.clone(),\r\n                    };\r\n                    this.states.back.touches.set(touch.identifier, state);\r\n                }\r\n                else {\r\n                    state.state |= eventState;\r\n                    state.pos.set(pos);\r\n                }\r\n            }\r\n        };\r\n    }\r\n    mapPointerMovement(movementX, movementY) {\r\n        if (!this.renderer)\r\n            this.renderer = GlobalContext().renderer;\r\n        if (!this.renderer)\r\n            return undefined;\r\n        const rect = this.renderer.canvas.getBoundingClientRect();\r\n        return vec2(movementX, movementY).mul(this.renderer.canvasSize).div(vec2(rect.width, rect.height));\r\n    }\r\n    mapPointerPosition(clientX, clientY) {\r\n        var _a;\r\n        if (!this.renderer)\r\n            this.renderer = GlobalContext().renderer;\r\n        if (!this.renderer)\r\n            return undefined;\r\n        const eventBound = this.bound || ((_a = this.renderer) === null || _a === void 0 ? void 0 : _a.canvas) || windowBound;\r\n        const rect = eventBound.getBoundingClientRect();\r\n        const rendererRect = this.renderer.canvas.getBoundingClientRect();\r\n        const pos = minus(vec2(clientX, clientY), vec2(rect.left, rect.top));\r\n        if (pos.x < 0 || pos.y < 0 || pos.x >= rect.width || pos.y >= rect.height) {\r\n            return undefined;\r\n        }\r\n        pos.x -= (rendererRect.left - rect.left);\r\n        pos.y -= (rendererRect.top - rect.top);\r\n        pos.mul(this.renderer.canvasSize).div(vec2(rendererRect.width, rendererRect.height));\r\n        return pos;\r\n    }\r\n}\r\nfunction createPointerLockElement() {\r\n    const element = document.createElement(\"div\");\r\n    element.classList.add(\"pointer-lock-element\");\r\n    return element;\r\n}\r\nexport var Keys;\r\n(function (Keys) {\r\n    Keys[Keys[\"BackSpace\"] = 8] = \"BackSpace\";\r\n    Keys[Keys[\"Tab\"] = 9] = \"Tab\";\r\n    Keys[Keys[\"Clear\"] = 12] = \"Clear\";\r\n    Keys[Keys[\"Enter\"] = 13] = \"Enter\";\r\n    Keys[Keys[\"Shift\"] = 16] = \"Shift\";\r\n    Keys[Keys[\"Control\"] = 17] = \"Control\";\r\n    Keys[Keys[\"Alt\"] = 18] = \"Alt\";\r\n    Keys[Keys[\"Pause\"] = 19] = \"Pause\";\r\n    Keys[Keys[\"CapsLock\"] = 20] = \"CapsLock\";\r\n    Keys[Keys[\"Escape\"] = 27] = \"Escape\";\r\n    Keys[Keys[\"Space\"] = 32] = \"Space\";\r\n    Keys[Keys[\"Prior\"] = 33] = \"Prior\";\r\n    Keys[Keys[\"Next\"] = 34] = \"Next\";\r\n    Keys[Keys[\"End\"] = 35] = \"End\";\r\n    Keys[Keys[\"Home\"] = 36] = \"Home\";\r\n    Keys[Keys[\"Left\"] = 37] = \"Left\";\r\n    Keys[Keys[\"Up\"] = 38] = \"Up\";\r\n    Keys[Keys[\"Right\"] = 39] = \"Right\";\r\n    Keys[Keys[\"Down\"] = 40] = \"Down\";\r\n    Keys[Keys[\"Select\"] = 41] = \"Select\";\r\n    Keys[Keys[\"Print\"] = 42] = \"Print\";\r\n    Keys[Keys[\"Execute\"] = 43] = \"Execute\";\r\n    Keys[Keys[\"Insert\"] = 45] = \"Insert\";\r\n    Keys[Keys[\"Delete\"] = 46] = \"Delete\";\r\n    Keys[Keys[\"Help\"] = 47] = \"Help\";\r\n    Keys[Keys[\"Num0\"] = 48] = \"Num0\";\r\n    Keys[Keys[\"Num1\"] = 49] = \"Num1\";\r\n    Keys[Keys[\"Num2\"] = 50] = \"Num2\";\r\n    Keys[Keys[\"Num3\"] = 51] = \"Num3\";\r\n    Keys[Keys[\"Num4\"] = 52] = \"Num4\";\r\n    Keys[Keys[\"Num5\"] = 53] = \"Num5\";\r\n    Keys[Keys[\"Num6\"] = 54] = \"Num6\";\r\n    Keys[Keys[\"Num7\"] = 55] = \"Num7\";\r\n    Keys[Keys[\"Num8\"] = 56] = \"Num8\";\r\n    Keys[Keys[\"Num9\"] = 57] = \"Num9\";\r\n    Keys[Keys[\"A\"] = 65] = \"A\";\r\n    Keys[Keys[\"B\"] = 66] = \"B\";\r\n    Keys[Keys[\"C\"] = 67] = \"C\";\r\n    Keys[Keys[\"D\"] = 68] = \"D\";\r\n    Keys[Keys[\"E\"] = 69] = \"E\";\r\n    Keys[Keys[\"F\"] = 70] = \"F\";\r\n    Keys[Keys[\"G\"] = 71] = \"G\";\r\n    Keys[Keys[\"H\"] = 72] = \"H\";\r\n    Keys[Keys[\"I\"] = 73] = \"I\";\r\n    Keys[Keys[\"J\"] = 74] = \"J\";\r\n    Keys[Keys[\"K\"] = 75] = \"K\";\r\n    Keys[Keys[\"L\"] = 76] = \"L\";\r\n    Keys[Keys[\"M\"] = 77] = \"M\";\r\n    Keys[Keys[\"N\"] = 78] = \"N\";\r\n    Keys[Keys[\"O\"] = 79] = \"O\";\r\n    Keys[Keys[\"P\"] = 80] = \"P\";\r\n    Keys[Keys[\"Q\"] = 81] = \"Q\";\r\n    Keys[Keys[\"R\"] = 82] = \"R\";\r\n    Keys[Keys[\"S\"] = 83] = \"S\";\r\n    Keys[Keys[\"T\"] = 84] = \"T\";\r\n    Keys[Keys[\"U\"] = 85] = \"U\";\r\n    Keys[Keys[\"V\"] = 86] = \"V\";\r\n    Keys[Keys[\"W\"] = 87] = \"W\";\r\n    Keys[Keys[\"X\"] = 88] = \"X\";\r\n    Keys[Keys[\"Y\"] = 89] = \"Y\";\r\n    Keys[Keys[\"Z\"] = 90] = \"Z\";\r\n    Keys[Keys[\"KP0\"] = 96] = \"KP0\";\r\n    Keys[Keys[\"KP1\"] = 97] = \"KP1\";\r\n    Keys[Keys[\"KP2\"] = 98] = \"KP2\";\r\n    Keys[Keys[\"KP3\"] = 99] = \"KP3\";\r\n    Keys[Keys[\"KP4\"] = 100] = \"KP4\";\r\n    Keys[Keys[\"KP5\"] = 101] = \"KP5\";\r\n    Keys[Keys[\"KP6\"] = 102] = \"KP6\";\r\n    Keys[Keys[\"KP7\"] = 103] = \"KP7\";\r\n    Keys[Keys[\"KP8\"] = 104] = \"KP8\";\r\n    Keys[Keys[\"KP9\"] = 105] = \"KP9\";\r\n    Keys[Keys[\"KPMultiply\"] = 106] = \"KPMultiply\";\r\n    Keys[Keys[\"KPAdd\"] = 107] = \"KPAdd\";\r\n    Keys[Keys[\"KPSeparator\"] = 108] = \"KPSeparator\";\r\n    Keys[Keys[\"KPSubtract\"] = 109] = \"KPSubtract\";\r\n    Keys[Keys[\"KPDecimal\"] = 110] = \"KPDecimal\";\r\n    Keys[Keys[\"KPDivide\"] = 111] = \"KPDivide\";\r\n    Keys[Keys[\"F1\"] = 112] = \"F1\";\r\n    Keys[Keys[\"F2\"] = 113] = \"F2\";\r\n    Keys[Keys[\"F3\"] = 114] = \"F3\";\r\n    Keys[Keys[\"F4\"] = 115] = \"F4\";\r\n    Keys[Keys[\"F5\"] = 116] = \"F5\";\r\n    Keys[Keys[\"F6\"] = 117] = \"F6\";\r\n    Keys[Keys[\"F7\"] = 118] = \"F7\";\r\n    Keys[Keys[\"F8\"] = 119] = \"F8\";\r\n    Keys[Keys[\"F9\"] = 120] = \"F9\";\r\n    Keys[Keys[\"F10\"] = 121] = \"F10\";\r\n    Keys[Keys[\"F11\"] = 122] = \"F11\";\r\n    Keys[Keys[\"F12\"] = 123] = \"F12\";\r\n    Keys[Keys[\"F13\"] = 124] = \"F13\";\r\n    Keys[Keys[\"F14\"] = 125] = \"F14\";\r\n    Keys[Keys[\"F15\"] = 126] = \"F15\";\r\n    Keys[Keys[\"F16\"] = 127] = \"F16\";\r\n    Keys[Keys[\"F17\"] = 128] = \"F17\";\r\n    Keys[Keys[\"F18\"] = 129] = \"F18\";\r\n    Keys[Keys[\"F19\"] = 130] = \"F19\";\r\n    Keys[Keys[\"F20\"] = 131] = \"F20\";\r\n    Keys[Keys[\"F21\"] = 132] = \"F21\";\r\n    Keys[Keys[\"F22\"] = 133] = \"F22\";\r\n    Keys[Keys[\"F23\"] = 134] = \"F23\";\r\n    Keys[Keys[\"F24\"] = 135] = \"F24\";\r\n    Keys[Keys[\"NumLock\"] = 136] = \"NumLock\";\r\n    Keys[Keys[\"ScrollLock\"] = 137] = \"ScrollLock\";\r\n    Keys[Keys[\"Mouse0\"] = 256] = \"Mouse0\";\r\n    Keys[Keys[\"Mouse1\"] = 257] = \"Mouse1\";\r\n    Keys[Keys[\"Mouse2\"] = 258] = \"Mouse2\";\r\n    Keys[Keys[\"Mouse3\"] = 259] = \"Mouse3\";\r\n    Keys[Keys[\"Mouse4\"] = 260] = \"Mouse4\";\r\n    Keys[Keys[\"Mouse5\"] = 261] = \"Mouse5\";\r\n    Keys[Keys[\"Mouse6\"] = 262] = \"Mouse6\";\r\n})(Keys || (Keys = {}));\r\n//# sourceMappingURL=input.js.map","import { Entity } from \"./entity\";\r\nimport { Color } from \"zogra-renderer\";\r\nexport var LightType;\r\n(function (LightType) {\r\n    LightType[LightType[\"Directional\"] = 0] = \"Directional\";\r\n    LightType[LightType[\"Point\"] = 1] = \"Point\";\r\n})(LightType || (LightType = {}));\r\nexport class Light extends Entity {\r\n    constructor(type = LightType.Directional) {\r\n        super();\r\n        this.intensity = 1;\r\n        this.color = Color.white;\r\n        this.type = type;\r\n    }\r\n}\r\n//# sourceMappingURL=light.js.map","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nimport { Color, MaterialFromShader, MathUtils, MeshBuilder, GLArrayBuffer, Shader, shaderProp, vec2, vec3, VertexStruct, DefaultShaderAttributeNames } from \"zogra-renderer\";\r\nimport { ShaderSource } from \"../assets\";\r\nimport { RenderObject } from \"./render-object\";\r\nconst ParticleVertStruct = VertexStruct({\r\n    vert: \"vec3\",\r\n    color: \"vec4\",\r\n    normal: \"vec3\",\r\n    uv: \"vec2\",\r\n    uv2: \"vec2\",\r\n    pos: \"vec3\",\r\n    rotation: \"vec3\",\r\n    size: \"float\",\r\n});\r\nconst ParticleAttributeName = Object.assign(Object.assign({}, DefaultShaderAttributeNames), { pos: \"particlePos\", rotation: \"particleRotation\", size: \"particleSize\" });\r\nexport class ParticleMaterial extends MaterialFromShader(new Shader(...ShaderSource.particle2D, {\r\n    vertexStructure: ParticleVertStruct,\r\n    attributes: ParticleAttributeName\r\n})) {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.color = Color.white;\r\n        this.texture = null;\r\n    }\r\n}\r\n__decorate([\r\n    shaderProp(\"uColor\", \"color\")\r\n], ParticleMaterial.prototype, \"color\", void 0);\r\n__decorate([\r\n    shaderProp(\"uMainTex\", \"tex2d\")\r\n], ParticleMaterial.prototype, \"texture\", void 0);\r\nexport class ParticleSystem extends RenderObject {\r\n    constructor() {\r\n        super();\r\n        this.mesh = MeshBuilder.quad();\r\n        this.material = new ParticleMaterial();\r\n        this.duration = 1;\r\n        this.lifetime = 1;\r\n        this.spawnRate = 30;\r\n        this.startSize = [0.2, 0.4];\r\n        this.startColor = { r: 1, g: 1, b: 1, a: 1 };\r\n        this.startRotation = { x: 0, y: 0, z: 0 };\r\n        this.startSpeed = [5, 10];\r\n        this.startAcceleration = { x: 0, y: -20, z: 0 };\r\n        this.emitter = ParticleSystem.boxEmitter(vec2.one());\r\n        this.lifeSize = null;\r\n        this.lifeColor = { r: null, g: null, b: null, a: null };\r\n        this.lifeRotation = { x: null, y: null, z: null };\r\n        this.lifeSpeed = null;\r\n        this.lifeAcceleration = { x: null, y: null, z: null };\r\n        this.particlesBuffer = new GLArrayBuffer({\r\n            pos: \"vec3\",\r\n            color: \"vec4\",\r\n            rotation: \"vec3\",\r\n            size: \"float\",\r\n            velocity: \"vec4\",\r\n            lifetime: \"vec2\",\r\n            acceleration: \"vec3\",\r\n        }, 0);\r\n        this.particleCount = 0;\r\n        this.spawnedTime = 0;\r\n        this.state = \"stopped\";\r\n        this.particlesBuffer.static = false;\r\n    }\r\n    get maxCount() { return this.particlesBuffer.length; }\r\n    set maxCount(count) { this.particlesBuffer.resize(count); }\r\n    play() {\r\n        this.state = \"pending\";\r\n    }\r\n    update(time) {\r\n        switch (this.state) {\r\n            case \"stopped\":\r\n                break;\r\n            case \"pending\":\r\n                this.state = \"running\";\r\n                this.spawnedTime = time.time;\r\n            case \"running\":\r\n                const spawnInterval = 1 / this.getScalarValue(this.spawnRate);\r\n                while (this.spawnedTime + spawnInterval <= time.time) {\r\n                    this.spawnedTime += spawnInterval;\r\n                    this.emitOne(this.position);\r\n                }\r\n                break;\r\n        }\r\n        this.updateParticles(time);\r\n    }\r\n    /** @internal */\r\n    render(context, data) {\r\n        context.renderer.drawMeshInstance(this.mesh, this.particlesBuffer, this.material, this.particleCount);\r\n    }\r\n    emit(count, position = this.position) {\r\n        for (let i = 0; i < count; i++)\r\n            this.emitOne(position);\r\n    }\r\n    updateParticles(time) {\r\n        for (let i = 0; i < this.particleCount; i++) {\r\n            const particle = this.particlesBuffer[i];\r\n            const lifetime = particle.lifetime[0] / particle.lifetime[1];\r\n            if (lifetime >= 1) {\r\n                if (i < this.particleCount - 1) {\r\n                    this.particlesBuffer.swapVertices(i, this.particleCount - 1);\r\n                    i--;\r\n                }\r\n                this.particleCount--;\r\n                continue;\r\n            }\r\n            particle.lifetime[0] += time.deltaTime;\r\n            if (this.lifeColor) {\r\n                if (typeof (this.lifeColor) === \"function\")\r\n                    particle.color.set(this.lifeColor(lifetime, this));\r\n                else {\r\n                    particle.color[0] = this.updateScalarValue(this.lifeColor.r, lifetime, particle.color[0]);\r\n                    particle.color[1] = this.updateScalarValue(this.lifeColor.g, lifetime, particle.color[1]);\r\n                    particle.color[2] = this.updateScalarValue(this.lifeColor.b, lifetime, particle.color[2]);\r\n                    particle.color[3] = this.updateScalarValue(this.lifeColor.a, lifetime, particle.color[3]);\r\n                }\r\n            }\r\n            if (this.lifeSize) {\r\n                if (typeof (this.lifeSize) === \"function\")\r\n                    particle.size[0] = this.lifeSize(lifetime);\r\n                else {\r\n                    particle.size[0] = this.updateScalarValue(this.lifeSize, lifetime, particle.size[0]);\r\n                }\r\n            }\r\n            if (this.lifeAcceleration) {\r\n                if (typeof (this.lifeAcceleration) === \"function\")\r\n                    particle.acceleration.set(this.lifeAcceleration(lifetime, this));\r\n                else {\r\n                    particle.acceleration[0] = this.updateScalarValue(this.lifeAcceleration.x, lifetime, particle.acceleration[0]);\r\n                    particle.acceleration[1] = this.updateScalarValue(this.lifeAcceleration.y, lifetime, particle.acceleration[1]);\r\n                    particle.acceleration[2] = this.updateScalarValue(this.lifeAcceleration.z, lifetime, particle.acceleration[2]);\r\n                }\r\n            }\r\n            // const velocity = vec3.set(particle.velocity) as vec3;\r\n            // vec3.mul(particle.velocity, particle.velocity[3]);\r\n            let vx = particle.velocity[0];\r\n            let vy = particle.velocity[1];\r\n            let vz = particle.velocity[2];\r\n            vx *= particle.velocity[3];\r\n            vy *= particle.velocity[3];\r\n            vz *= particle.velocity[3];\r\n            vx += particle.acceleration[0] * time.deltaTime;\r\n            vy += particle.acceleration[1] * time.deltaTime;\r\n            vz += particle.acceleration[2] * time.deltaTime;\r\n            particle.velocity[3] = Math.sqrt(vx * vx\r\n                + vy * vy\r\n                + vz * vz);\r\n            particle.velocity[0] = vx / particle.velocity[3];\r\n            particle.velocity[1] = vy / particle.velocity[3];\r\n            particle.velocity[2] = vz / particle.velocity[3];\r\n            if (this.lifeSpeed) {\r\n                if (typeof (this.lifeSpeed) === \"function\")\r\n                    particle.velocity[3] = this.lifeSpeed(lifetime);\r\n                else\r\n                    particle.velocity[3] = this.updateScalarValue(this.lifeSpeed, lifetime, particle.velocity[3]);\r\n            }\r\n            particle.pos[0] += particle.velocity[0] * particle.velocity[3] * time.deltaTime;\r\n            particle.pos[1] += particle.velocity[1] * particle.velocity[3] * time.deltaTime;\r\n            particle.pos[2] += particle.velocity[2] * particle.velocity[3] * time.deltaTime;\r\n            if (this.lifeRotation) {\r\n                if (typeof (this.lifeRotation) === \"function\")\r\n                    particle.rotation.set(this.lifeRotation(lifetime, this));\r\n                else {\r\n                    particle.rotation[0] = this.updateScalarValue(this.lifeRotation.x, lifetime, particle.rotation[0]);\r\n                    particle.rotation[1] = this.updateScalarValue(this.lifeRotation.y, lifetime, particle.rotation[1]);\r\n                    particle.rotation[2] = this.updateScalarValue(this.lifeRotation.z, lifetime, particle.rotation[2]);\r\n                }\r\n            }\r\n            // Debug().drawLine((vec3.set(particle.pos) as vec3).minus(particle.size[0]), (vec3.set(particle.pos) as vec3).plus(particle.size[0]));\r\n        }\r\n    }\r\n    updateParticleProperty(time, modifier, accessor) {\r\n    }\r\n    emitOne(position) {\r\n        if (this.particleCount >= this.maxCount)\r\n            return;\r\n        let particle = this.particlesBuffer[this.particleCount++];\r\n        let velocity = vec3.zero();\r\n        let pos = vec3.zero();\r\n        this.emitter(this, position, velocity, pos);\r\n        const lifetime = this.getScalarValue(this.lifetime);\r\n        let speed = this.getScalarValue(this.startSpeed);\r\n        // velocity.mul(speed);\r\n        particle.velocity.set(velocity);\r\n        if (speed < 0)\r\n            vec3.negate(particle.velocity, velocity);\r\n        particle.velocity[3] = Math.abs(speed);\r\n        particle.pos.set(pos);\r\n        particle.size[0] = this.getScalarValue(this.startSize);\r\n        particle.lifetime[0] = 0;\r\n        particle.lifetime[1] = lifetime;\r\n        if (typeof (this.startColor) === \"function\") {\r\n            let color = this.startColor(0, this);\r\n            particle.color.set(color);\r\n        }\r\n        else {\r\n            particle.color[0] = this.getScalarValue(this.startColor.r);\r\n            particle.color[1] = this.getScalarValue(this.startColor.g);\r\n            particle.color[2] = this.getScalarValue(this.startColor.b);\r\n            particle.color[3] = this.getScalarValue(this.startColor.a);\r\n        }\r\n        if (typeof (this.startRotation) === \"function\") {\r\n            particle.rotation.set(this.startRotation(0, this));\r\n        }\r\n        else {\r\n            particle.rotation[0] = this.getScalarValue(this.startRotation.x);\r\n            particle.rotation[1] = this.getScalarValue(this.startRotation.y);\r\n            particle.rotation[2] = this.getScalarValue(this.startRotation.z);\r\n        }\r\n        if (typeof (this.startAcceleration) === \"function\")\r\n            particle.acceleration.set(this.startAcceleration(0, this));\r\n        else {\r\n            particle.acceleration[0] = this.getScalarValue(this.startAcceleration.x);\r\n            particle.acceleration[1] = this.getScalarValue(this.startAcceleration.y);\r\n            particle.acceleration[2] = this.getScalarValue(this.startAcceleration.z);\r\n        }\r\n    }\r\n    getScalarValue(settings) {\r\n        if (typeof (settings) === \"number\")\r\n            return settings;\r\n        else if (typeof (settings) === \"function\")\r\n            return settings(this);\r\n        else if (settings instanceof Array)\r\n            return MathUtils.lerp(...settings, Math.random());\r\n        console.warn(\"Unknown property generator: \", settings);\r\n        return 0;\r\n    }\r\n    updateScalarValue(settings, lifetime, value) {\r\n        if (settings === null)\r\n            return value;\r\n        else if (typeof (settings) === \"number\")\r\n            return settings;\r\n        else if (typeof (settings) === \"function\")\r\n            return settings(lifetime);\r\n        else if (settings instanceof Array)\r\n            return MathUtils.lerp(...settings, lifetime);\r\n        console.log(\"Unknown property modifier:\", settings);\r\n        return value;\r\n    }\r\n    static boxEmitter(size) {\r\n        return (particleSystem, center, dirOut, posOut) => {\r\n            posOut[0] = (Math.random() - 0.5) * size.x;\r\n            posOut[1] = (Math.random() - 0.5) * size.y;\r\n            posOut[2] = 0;\r\n            posOut.plus(center);\r\n            vec3.minus(dirOut, posOut, center).normalize();\r\n        };\r\n    }\r\n    static circleEmitter(radius) {\r\n        return (particleSystem, center, dirOut, posOut) => {\r\n            const r = Math.sqrt(Math.random()) * radius;\r\n            const theta = Math.random() * Math.PI * 2;\r\n            posOut.x = Math.cos(theta) * r;\r\n            posOut.y = Math.sin(theta) * r;\r\n            posOut.z = 0;\r\n            posOut.plus(center);\r\n            vec3.minus(dirOut, posOut, center).normalize();\r\n        };\r\n    }\r\n}\r\nParticleSystem.VertexStructure = ParticleVertStruct;\r\nParticleSystem.AttributeNames = ParticleAttributeName;\r\n//# sourceMappingURL=particle-system.js.map","import { GlobalContext } from \"zogra-renderer\";\r\nimport { Entity } from \"./entity\";\r\nexport class RenderObject extends Entity {\r\n    constructor(ctx = GlobalContext()) {\r\n        super();\r\n        this.meshes = [];\r\n        this.materials = [];\r\n        this.materials = [ctx.assets.materials.default];\r\n    }\r\n    on(event, listener) {\r\n        this.eventEmitter.with().on(event, listener);\r\n    }\r\n    off(event, listener) {\r\n        this.eventEmitter.with().off(event, listener);\r\n    }\r\n    /** @internal */\r\n    render(context, data) {\r\n        this.eventEmitter.with().emit(\"render\", this, context, data);\r\n        for (let i = 0; i < this.meshes.length; i++) {\r\n            context.renderer.drawMesh(this.meshes[i], this.localToWorldMatrix, this.materials[i]);\r\n        }\r\n    }\r\n}\r\n//# sourceMappingURL=render-object.js.map","import { EntityManager } from \"./entity\";\r\nimport { EventEmitter } from \"zogra-renderer\";\r\nimport { AssetManager } from \"zogra-renderer\";\r\nexport class Scene extends EntityManager {\r\n    constructor(PhysicsSystem) {\r\n        super();\r\n        //private managers = new Map<Function, EntityManager>();\r\n        /** @internal */\r\n        this.engine = undefined;\r\n        this.eventEmitter = new EventEmitter();\r\n        this.addsNextFrame = new Map();\r\n        this.removesNextFrame = new Set();\r\n        this.assetID = AssetManager.newAssetID(this);\r\n        this.name = `Scene_${this.assetID}`;\r\n        this.physics = new PhysicsSystem();\r\n    }\r\n    add(entity, parent = null) {\r\n        if (entity.destroyed) {\r\n            console.error(\"Attempt to add destroyed entity\");\r\n            return;\r\n        }\r\n        this.addsNextFrame.set(entity, parent);\r\n        for (const child of entity.children)\r\n            this.add(child, entity);\r\n    }\r\n    remove(entity) {\r\n        this.removesNextFrame.add(entity);\r\n    }\r\n    rootEntities() {\r\n        return this._entities.filter(entity => entity.parent === null);\r\n    }\r\n    getEntities() {\r\n        return this._entities;\r\n    }\r\n    getEntitiesOfType(type) {\r\n        return this.entities.filter(entity => entity instanceof type);\r\n        // return (this.managers.get(type)?.entities ?? []) as any as T[];\r\n    }\r\n    withPhysics(physics) {\r\n        this.physics = physics;\r\n        return this;\r\n    }\r\n    on(event, listener) {\r\n        this.eventEmitter.on(event, listener);\r\n    }\r\n    off(event, listener) {\r\n        this.eventEmitter.off(event, listener);\r\n    }\r\n    clearAll() {\r\n        var _a, _b;\r\n        const time = (_b = (_a = this.engine) === null || _a === void 0 ? void 0 : _a.time) !== null && _b !== void 0 ? _b : { time: 0, deltaTime: 0 };\r\n        for (const entity of this._entities) {\r\n            entity.destroy();\r\n        }\r\n        this.addsNextFrame.clear();\r\n        this.removesNextFrame.clear();\r\n        this.removePendingEntites(time);\r\n        this._entities = [];\r\n        this.entityMap.clear();\r\n    }\r\n    destroy() {\r\n        this.clearAll();\r\n    }\r\n    /** @internal */\r\n    __update(time) {\r\n        var _a;\r\n        this.addPendingEntities(time);\r\n        this.removePendingEntites(time);\r\n        const entities = this.rootEntities();\r\n        for (const entity of entities)\r\n            entity.__updateRecursive(time);\r\n        (_a = this.physics) === null || _a === void 0 ? void 0 : _a.update(time);\r\n    }\r\n    addPendingEntities(time) {\r\n        const adds = this.addsNextFrame;\r\n        this.addsNextFrame = new Map();\r\n        for (const [entity, parent] of adds) {\r\n            super.add(entity);\r\n            entity.__addToScene(this);\r\n            const type = entity.constructor;\r\n            // if (!this.managers.has(type))\r\n            //     this.managers.set(type, new EntityManager());\r\n            // this.managers.get(type)?.add(entity);\r\n            if (parent)\r\n                entity.parent = parent;\r\n            this.eventEmitter.emit(\"entity-add\", entity, parent ? parent : null);\r\n        }\r\n        for (const [entity, _] of adds)\r\n            entity.__start(time);\r\n    }\r\n    removePendingEntites(time) {\r\n        const removes = this.removesNextFrame;\r\n        this.removesNextFrame = new Set();\r\n        for (const entity of removes) {\r\n            super.remove(entity);\r\n            entity.__removeFromScene(this);\r\n            this.eventEmitter.emit(\"entity-remove\", entity, entity.parent);\r\n        }\r\n        for (const entity of removes)\r\n            entity.__exit(time);\r\n    }\r\n}\r\n//# sourceMappingURL=scene.js.map","import { mat4 } from \"zogra-renderer\";\r\nimport { vec3 } from \"zogra-renderer\";\r\nimport { quat } from \"zogra-renderer\";\r\nexport class Transform {\r\n    constructor() {\r\n        this._parent = null;\r\n        this.children = new Set();\r\n        this._localPosition = vec3.zero();\r\n        this._localRotation = quat.identity();\r\n        this._localScaling = vec3.one();\r\n        this._rotation = quat.identity();\r\n        this._inv_rotation = quat.identity();\r\n        this._localToWorld = mat4.identity();\r\n        this._worldToLocal = mat4.identity();\r\n        this._scene = null;\r\n    }\r\n    get localPosition() { return this._localPosition; }\r\n    get localRotation() { return this._localRotation; }\r\n    get localScaling() { return this._localScaling; }\r\n    set localPosition(position) {\r\n        this._localPosition.set(position);\r\n        this.updateTransformRecursive();\r\n    }\r\n    set localRotation(rotation) {\r\n        this._localRotation.set(rotation);\r\n        this.updateTransformRecursive();\r\n    }\r\n    set localScaling(scaling) {\r\n        this._localScaling.set(scaling);\r\n        this.updateTransformRecursive();\r\n    }\r\n    get scene() { return this._scene; }\r\n    get position() {\r\n        if (!this._parent)\r\n            return this.localPosition;\r\n        return mat4.mulPoint(this._parent.localToWorldMatrix, this.localPosition);\r\n    }\r\n    set position(position) {\r\n        if (!this._parent)\r\n            this.localPosition.set(position);\r\n        else\r\n            mat4.mulPoint(this._localPosition, this._parent.worldToLocalMatrix, position);\r\n        this.updateTransformRecursive();\r\n    }\r\n    get rotation() {\r\n        return this._rotation;\r\n    }\r\n    set rotation(rotation) {\r\n        if (!this._parent)\r\n            quat.normalize(this._localRotation, rotation);\r\n        else {\r\n            quat.mul(this._localRotation, this._parent._inv_rotation, rotation);\r\n            quat.normalize(this._localRotation, this._localRotation);\r\n        }\r\n        this.updateTransformRecursive();\r\n    }\r\n    // get scaling(): Readonly<vec3>\r\n    // {\r\n    //     if (!this._parent)\r\n    //         return this.localScaling;\r\n    //     return mat4.mulVector(this.localToWorldMatrix, vec3.one());\r\n    // }\r\n    // set scaling(scaling)\r\n    // {\r\n    //     if (!this._parent)\r\n    //         this.localScaling.set(scaling);\r\n    //     else\r\n    //         this.localScaling = mat4.getScaling(this._parent.worldToLocalMatrix).mul(scaling);\r\n    // }\r\n    get localToWorldMatrix() { return this._localToWorld; }\r\n    get worldToLocalMatrix() { return this._worldToLocal; }\r\n    get parent() { return this._parent; }\r\n    set parent(p) {\r\n        this._parent = p;\r\n        if (p) {\r\n            p.children.add(this);\r\n        }\r\n        this.updateTransformRecursive();\r\n    }\r\n    translate(motion) {\r\n        if (!this._parent)\r\n            this.localPosition.plus(motion);\r\n        else\r\n            this.localPosition.plus(mat4.mulVector(this._parent.worldToLocalMatrix, motion));\r\n        this.updateTransformRecursive();\r\n    }\r\n    /** @internal */\r\n    __addToScene(scene) {\r\n        this._scene = scene;\r\n    }\r\n    /** @internal */\r\n    __removeFromScene(scene) {\r\n        this._scene = null;\r\n    }\r\n    updateTransformRecursive() {\r\n        this._rotation.set(this._localRotation);\r\n        mat4.rts(this._localToWorld, this._localRotation, this._localPosition, this._localScaling);\r\n        if (this._parent) {\r\n            mat4.mul(this._localToWorld, this._parent._localToWorld, this._localToWorld);\r\n            quat.mul(this._rotation, this._parent._rotation, this._rotation);\r\n        }\r\n        mat4.invert(this._worldToLocal, this._localToWorld);\r\n        quat.invert(this._inv_rotation, this._rotation);\r\n        for (const child of this.children)\r\n            child.updateTransformRecursive();\r\n    }\r\n}\r\n//# sourceMappingURL=transform.js.map","export * from \"zogra-renderer\";\r\nexport * from \"./engine\";\r\nexport * from \"./render-pipeline\";\r\nexport * from \"./2d\";\r\nexport * from \"./utils\";\r\nimport { ShaderSource } from \"./assets\";\r\nexport const BuiltinShaders = ShaderSource;\r\n//# sourceMappingURL=index.js.map","export class UnknownPhysics {\r\n    /** @internal */\r\n    __addCollider() { }\r\n    /** @internal */\r\n    __removeCollider() { }\r\n    __getColliders() { return []; }\r\n    update() { }\r\n}\r\nexport class ColliderBase {\r\n    constructor() {\r\n        this._physicsSystem = null;\r\n        this._entity = null;\r\n    }\r\n    get physics() { return this._physicsSystem; }\r\n    get entity() { return this._entity; }\r\n    /** @internal */\r\n    __bind(entity, scene) {\r\n        if (this.entity && this.entity !== entity)\r\n            throw new Error(\"Collider should only be bound to single entity.\");\r\n        this._entity = entity;\r\n        this._physicsSystem = scene.physics;\r\n        this._physicsSystem.__addCollider(this);\r\n    }\r\n    /** @internal */\r\n    __unbind() {\r\n        this._entity = null;\r\n        this.__unbindPhysics();\r\n    }\r\n    /** @internal */\r\n    __unbindPhysics() {\r\n        var _a;\r\n        (_a = this._physicsSystem) === null || _a === void 0 ? void 0 : _a.__removeCollider(this);\r\n        this._physicsSystem = null;\r\n    }\r\n}\r\n//# sourceMappingURL=physics-generic.js.map","import { RenderBuffer, TextureFormat, vec2, Debug } from \"zogra-renderer\";\r\nimport { RenderData, RenderOrder } from \"./render-data\";\r\nimport { Color } from \"zogra-renderer\";\r\nimport { FrameBuffer } from \"zogra-renderer\";\r\nimport { DebugLayerRenderer } from \"./render-pass/debug-layer\";\r\nimport { Light2DPass } from \"./render-pass/2d-light-pass\";\r\nimport { DrawScene } from \"./render-pass/draw-scene\";\r\nimport { PostprocessPass } from \"./post-process\";\r\nimport { FinalBlit } from \"./render-pass/final-blit\";\r\nimport { ClearPass } from \"./render-pass/clear-pass\";\r\nexport class Default2DRenderPipeline {\r\n    constructor() {\r\n        this.msaa = 4;\r\n        this.renderFormat = TextureFormat.RGBA8;\r\n        this.debuglayer = new DebugLayerRenderer();\r\n        this.ambientLightColor = new Color(1, 1, 1, 1);\r\n        this.ambientIntensity = 1;\r\n        this.perCameraResources = new Map();\r\n        Debug(this.debuglayer);\r\n    }\r\n    render(context, scene, cameras) {\r\n        for (const camera of cameras) {\r\n            const resource = this.getCameraResources(context, camera);\r\n            const data = RenderData.create(camera, scene, resource.outputFBO);\r\n            this.renderCamera(context, data);\r\n        }\r\n    }\r\n    replaceMaterial(MaterialType, material) {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n    renderCamera(context, data) {\r\n        const camera = data.camera;\r\n        camera.__preRender(context);\r\n        context.renderer.setViewProjection(camera.worldToLocalMatrix, camera.projectionMatrix);\r\n        const resource = this.getCameraResources(context, camera);\r\n        for (const pass of resource.renderPass) {\r\n            pass.setup(context, data);\r\n            pass.render(context, data);\r\n        }\r\n        for (const pass of resource.renderPass) {\r\n            pass.cleanup(context, data);\r\n        }\r\n        this.debuglayer.render(context, data);\r\n        camera.__postRender(context);\r\n    }\r\n    getCameraResources(context, camera) {\r\n        let resource = this.perCameraResources.get(camera);\r\n        if (!resource) {\r\n            const fbo = new FrameBuffer(context.renderer.canvas.width, context.renderer.canvas.height);\r\n            const renderbuffer = new RenderBuffer(fbo.width, fbo.height, this.renderFormat, this.msaa);\r\n            fbo.addColorAttachment(renderbuffer);\r\n            resource = {\r\n                outputFBO: fbo,\r\n                outputBuffer: renderbuffer,\r\n                renderPass: this.createRenderPass(context, camera),\r\n            };\r\n            this.perCameraResources.set(camera, resource);\r\n        }\r\n        const size = camera.output === null\r\n            ? vec2(context.screen.width, context.screen.height)\r\n            : camera.output.size;\r\n        if (!size.equals(resource.outputFBO.size)) {\r\n            console.log(\"resize\", resource.outputFBO.size, size);\r\n            const fbo = resource.outputFBO.colorAttachments[0].resize(size.x, size.y);\r\n            resource.outputFBO.reset(size.x, size.y);\r\n            resource.outputFBO.addColorAttachment(fbo, 0);\r\n        }\r\n        return resource;\r\n    }\r\n    createRenderPass(context, camera) {\r\n        return [\r\n            new ClearPass(),\r\n            new DrawScene(RenderOrder.FarToNear),\r\n            new Light2DPass(context, this),\r\n            new PostprocessPass(context, this.renderFormat),\r\n            new FinalBlit(context, this.renderFormat),\r\n        ];\r\n    }\r\n}\r\n//# sourceMappingURL=2d-default.js.map","import { Default2DMaterial } from \"../2d/rendering/materials\";\r\nimport { ParticleMaterial } from \"../engine/particle-system\";\r\nexport const BuiltinMaterials = {\r\n    spriteDefault: new Default2DMaterial(),\r\n    tilemapDefault: new Default2DMaterial(),\r\n    particleDefault: new ParticleMaterial(),\r\n};\r\n//# sourceMappingURL=default-materials.js.map","export * from \"./preview-renderer\";\r\nexport * from \"./render-data\";\r\nexport * from \"./render-pipeline\";\r\nexport * from \"./2d-default\";\r\nexport * from \"./post-process\";\r\nexport * from \"./render-pass\";\r\nexport * from \"./materials\";\r\n//# sourceMappingURL=index.js.map","export * from \"./lit\";\r\n//# sourceMappingURL=index.js.map","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nimport { Color, MaterialFromShader, Shader, shaderProp } from \"zogra-renderer\";\r\nimport { ShaderSource } from \"../../assets\";\r\nexport class LitLambertian extends MaterialFromShader(new Shader(ShaderSource.defaultVert, ShaderSource.litLambert, {})) {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.color = Color.white;\r\n        this.texture = null;\r\n    }\r\n}\r\n__decorate([\r\n    shaderProp(\"uColor\", \"color\")\r\n], LitLambertian.prototype, \"color\", void 0);\r\n__decorate([\r\n    shaderProp(\"uMainTex\", \"tex2d\")\r\n], LitLambertian.prototype, \"texture\", void 0);\r\n//# sourceMappingURL=lit.js.map","import { Blending, DepthTest, MaterialFromShader, Shader } from \"zogra-renderer\";\r\nimport { ShaderSource } from \"../../assets\";\r\nexport class UnlitColor extends MaterialFromShader(new Shader(...ShaderSource.unlitColor, {\r\n    blend: [Blending.SrcAlpha, Blending.OneMinusSrcAlpha]\r\n})) {\r\n}\r\nexport class UnlitColorOverlay extends MaterialFromShader(new Shader(...ShaderSource.unlitColor, {\r\n    depth: DepthTest.Disable,\r\n    blend: [Blending.SrcAlpha, Blending.OneMinusSrcAlpha]\r\n})) {\r\n}\r\n//# sourceMappingURL=unlit.js.map","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nimport { RenderTexture, MaterialFromShader, Shader, shaderProp, TextureFormat, Blending, DepthTest, TextureResizing } from \"zogra-renderer\";\r\nimport { ShaderSource } from \"../../assets\";\r\nimport { DownsampleBlurRenderer } from \"../../utils/blur-renderer\";\r\nimport { PostProcess } from \"./post-process\";\r\nclass BloomFilterMaterial extends MaterialFromShader(new Shader(...ShaderSource.bloomFilter, {\r\n    depth: DepthTest.Disable,\r\n    zWrite: false,\r\n})) {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.texture = null;\r\n        this.threshold = 1;\r\n        this.softThreshold = 0.5;\r\n    }\r\n}\r\n__decorate([\r\n    shaderProp(\"uMainTex\", \"tex2d\")\r\n], BloomFilterMaterial.prototype, \"texture\", void 0);\r\n__decorate([\r\n    shaderProp(\"uThreshold\", \"float\")\r\n], BloomFilterMaterial.prototype, \"threshold\", void 0);\r\n__decorate([\r\n    shaderProp(\"uSoftThreshold\", \"float\")\r\n], BloomFilterMaterial.prototype, \"softThreshold\", void 0);\r\nclass BloomComposeMaterial extends MaterialFromShader(new Shader(...ShaderSource.bloomCompose, {\r\n    blendRGB: [Blending.One, Blending.One],\r\n    blendAlpha: [Blending.Zero, Blending.One],\r\n    depth: DepthTest.Disable,\r\n    zWrite: false,\r\n})) {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.intensity = 1;\r\n    }\r\n}\r\n__decorate([\r\n    shaderProp(\"uIntensity\", \"float\")\r\n], BloomComposeMaterial.prototype, \"intensity\", void 0);\r\nexport class Bloom extends PostProcess {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.intensity = 1;\r\n        this.blurSteps = 4;\r\n        this.threshold = 1;\r\n        this.softThreshold = 0.25;\r\n        this.materialFilter = new BloomFilterMaterial();\r\n        this.materialCompose = new BloomComposeMaterial();\r\n        this.blurRenderer = new DownsampleBlurRenderer();\r\n        this.filterOutput = null;\r\n    }\r\n    create(context) {\r\n        this.filterOutput = new RenderTexture(context.renderer.canvasSize.x, context.renderer.canvasSize.y, false, TextureFormat.RGBA16F);\r\n        this.blurRenderer.upsampleMaterial.setPipelineStateOverride({\r\n            blend: [Blending.One, Blending.One],\r\n        });\r\n    }\r\n    render(context, src, dst) {\r\n        if (!src.size.equals(this.filterOutput.size))\r\n            this.filterOutput.resize(src.width, src.height, TextureResizing.Discard);\r\n        // this.materialFilter.threshold = this.threshold;\r\n        // this.materialFilter.softThreshold = this.threshold;\r\n        // this.materialFilter.texture = src;\r\n        context.renderer.blit(src, this.filterOutput, this.materialFilter);\r\n        const blurOutput = this.blurRenderer.blur(this.filterOutput, this.blurSteps);\r\n        this.materialCompose.intensity = this.intensity;\r\n        context.renderer.blit(src, dst);\r\n        context.renderer.blit(blurOutput, dst, this.materialCompose);\r\n        // this.materialCompose.intensity = this.intensity;\r\n        // context.renderer.blit(blurOutput, dst, this.materialCompose);\r\n    }\r\n}\r\n//# sourceMappingURL=bloom.js.map","import { DownsampleBlurRenderer } from \"../../utils/blur-renderer\";\r\nimport { PostProcess } from \"./post-process\";\r\nexport var BlurMethod;\r\n(function (BlurMethod) {\r\n    BlurMethod[BlurMethod[\"Downsample\"] = 0] = \"Downsample\";\r\n    BlurMethod[BlurMethod[\"Gussian\"] = 1] = \"Gussian\";\r\n})(BlurMethod || (BlurMethod = {}));\r\nexport class Blur extends PostProcess {\r\n    constructor(method = BlurMethod.Downsample) {\r\n        super();\r\n        this.radius = 64;\r\n        this.blurRenderer = new DownsampleBlurRenderer();\r\n        this.method = method;\r\n    }\r\n    render(context, src, dst) {\r\n        if (this.radius > 0) {\r\n            this.blurRenderer.blur(src, Math.log2(this.radius), dst);\r\n        }\r\n        else {\r\n            context.renderer.blit(src, dst);\r\n        }\r\n    }\r\n}\r\n//# sourceMappingURL=blur.js.map","export * from \"./post-process\";\r\nexport * from \"./bloom\";\r\nexport * from \"./blur\";\r\n//# sourceMappingURL=index.js.map","import { FilterMode, RenderTexture, TextureResizing } from \"zogra-renderer\";\r\nimport { RenderPass } from \"../render-pass/render-pass\";\r\nexport class PostProcess {\r\n    constructor() {\r\n        /** @internal */\r\n        this.__intialized = false;\r\n    }\r\n    create(context) { }\r\n}\r\nexport class PostprocessPass extends RenderPass {\r\n    constructor(context, renderFormat) {\r\n        super();\r\n        this.format = renderFormat;\r\n        this.buffers = [\r\n            new RenderTexture(context.screen.width, context.screen.height, false, this.format, FilterMode.Nearest).createFramebuffer(),\r\n            new RenderTexture(context.screen.width, context.screen.height, false, this.format, FilterMode.Nearest).createFramebuffer(),\r\n        ];\r\n    }\r\n    render(context, data) {\r\n        if (!data.cameraOutput.size.equals(this.buffers[0].size)) {\r\n            const rt0 = this.buffers[0].colorAttachments[0]\r\n                .resize(data.cameraOutput.width, data.cameraOutput.height, TextureResizing.Discard);\r\n            const rt1 = this.buffers[1].colorAttachments[0]\r\n                .resize(data.cameraOutput.width, data.cameraOutput.height, TextureResizing.Discard);\r\n            this.buffers[0].reset(data.cameraOutput.width, data.cameraOutput.height);\r\n            this.buffers[1].reset(data.cameraOutput.width, data.cameraOutput.height);\r\n            this.buffers[0].addColorAttachment(rt0, 0);\r\n            this.buffers[1].addColorAttachment(rt1, 0);\r\n        }\r\n        const camera = data.camera;\r\n        let [src, dst] = this.buffers;\r\n        const cameraBuffer = data.cameraOutput.colorAttachments[0];\r\n        context.renderer.blitCopy(cameraBuffer, src.colorAttachments[0]);\r\n        for (const postprocess of camera.postprocess) {\r\n            if (!postprocess.__intialized) {\r\n                postprocess.create(context);\r\n                postprocess.__intialized = true;\r\n            }\r\n            postprocess.render(context, src.colorAttachments[0], dst);\r\n            [src, dst] = [dst, src];\r\n        }\r\n        data.postprocessOutput = src.colorAttachments[0];\r\n    }\r\n}\r\n//# sourceMappingURL=post-process.js.map","import { Debug, DepthBuffer, FilterMode, RenderBuffer, TextureFormat } from \"zogra-renderer\";\r\nimport { RenderData, RenderOrder } from \"./render-data\";\r\nimport { rgb } from \"zogra-renderer\";\r\nimport { FrameBuffer } from \"zogra-renderer\";\r\nimport { RenderTexture } from \"zogra-renderer\";\r\nimport { DebugLayerRenderer } from \"./render-pass/debug-layer\";\r\nimport { GridRenderer } from \"./render-pass/grid\";\r\nexport class PreviewRenderer {\r\n    constructor(renderer) {\r\n        this.msaa = 4;\r\n        this.materialReplaceMap = new Map();\r\n        this.debugLayer = new DebugLayerRenderer();\r\n        this.grid = new GridRenderer();\r\n        this.cameraOutputFBOs = new Map();\r\n        this.cameraOutputTextures = new Map();\r\n        this.renderer = renderer;\r\n        Debug(this.debugLayer);\r\n    }\r\n    render(context, scene, cameras) {\r\n        for (let i = 0; i < cameras.length; i++) {\r\n            const data = RenderData.create(cameras[i], scene, this.getFramebuffer(context, cameras[i]));\r\n            this.renderCamera(context, data);\r\n        }\r\n    }\r\n    setupLight(context, data) {\r\n        context.renderer.setGlobalUniform(\"uLightDir\", \"vec4[]\", [data.camera.position.toVec4(1)]);\r\n        context.renderer.setGlobalUniform(\"uLightCount\", \"int\", 1);\r\n        context.renderer.setGlobalUniform(\"uAmbientSky\", \"color\", rgb(.2, .2, .2));\r\n        context.renderer.setGlobalUniform(\"uLightColor\", \"color[]\", [rgb(.8, .8, .8)]);\r\n    }\r\n    renderCamera(context, data) {\r\n        // context.renderer.clear(rgb(.3, .3, .3), true);\r\n        const camera = data.camera;\r\n        camera.__preRender(context);\r\n        context.renderer.setFramebuffer(data.cameraOutput);\r\n        context.renderer.clear(camera.clearColor, camera.clearDepth);\r\n        context.renderer.setViewProjection(camera.worldToLocalMatrix, camera.projectionMatrix);\r\n        context.renderer.setGlobalUniform(\"uCameraPos\", \"vec3\", camera.position.clone());\r\n        this.setupLight(context, data);\r\n        const objs = data.getVisibleObjects(RenderOrder.NearToFar);\r\n        for (const obj of objs) {\r\n            obj.render(context, data);\r\n            // const modelMatrix = obj.localToWorldMatrix;\r\n            // for (let i = 0; i < obj.meshes.length; i++)\r\n            // {\r\n            //     if (!obj.meshes[i])\r\n            //         continue;\r\n            //     const mat = obj.materials[i] || context.renderer.assets.materials.default;\r\n            //     this.drawWithMaterial(obj.meshes[i], modelMatrix, mat);\r\n            // }\r\n        }\r\n        this.grid.render(context, data);\r\n        this.debugLayer.render(context, data);\r\n        this.finalBlit(context, data);\r\n        // context.renderer.blitCopy(data.cameraOutput.colorAttachments[0] as RenderBuffer, camera.output);\r\n        camera.__postRender(context);\r\n    }\r\n    finalBlit(context, data) {\r\n        var _a, _b, _c, _d;\r\n        const camera = data.camera;\r\n        let tex = this.cameraOutputTextures.get(camera);\r\n        if (!tex) {\r\n            tex = new RenderTexture((_b = (_a = data.camera.output) === null || _a === void 0 ? void 0 : _a.width) !== null && _b !== void 0 ? _b : context.renderer.canvasSize.x, (_d = (_c = data.camera.output) === null || _c === void 0 ? void 0 : _c.height) !== null && _d !== void 0 ? _d : context.renderer.canvasSize.y, false, TextureFormat.RGBA, FilterMode.Linear);\r\n            this.cameraOutputTextures.set(camera, tex);\r\n        }\r\n        context.renderer.blitCopy(data.cameraOutput.colorAttachments[0], tex);\r\n        context.renderer.blit(tex, FrameBuffer.CanvasBuffer);\r\n    }\r\n    drawWithMaterial(mesh, transform, material) {\r\n        if (this.materialReplaceMap.has(material.constructor))\r\n            this.renderer.drawMesh(mesh, transform, this.materialReplaceMap.get(material.constructor));\r\n        else\r\n            this.renderer.drawMesh(mesh, transform, material);\r\n    }\r\n    replaceMaterial(MaterialType, material) {\r\n        this.materialReplaceMap.set(MaterialType, material);\r\n    }\r\n    getFramebuffer(context, camera) {\r\n        let fbo = this.cameraOutputFBOs.get(camera);\r\n        if (!fbo) {\r\n            fbo = new FrameBuffer(context.renderer.canvas.width, context.renderer.canvas.height);\r\n            const renderbuffer = new RenderBuffer(fbo.width, fbo.height, TextureFormat.RGBA8, this.msaa);\r\n            const depthBuffer = new DepthBuffer(fbo.width, fbo.height, this.msaa);\r\n            fbo.addColorAttachment(renderbuffer);\r\n            fbo.setDepthAttachment(depthBuffer);\r\n            this.cameraOutputFBOs.set(camera, fbo);\r\n        }\r\n        return fbo;\r\n    }\r\n}\r\n//# sourceMappingURL=preview-renderer.js.map","import { RenderObject } from \"../engine\";\r\nimport { mat4 } from \"zogra-renderer\";\r\nexport var RenderOrder;\r\n(function (RenderOrder) {\r\n    RenderOrder[RenderOrder[\"NearToFar\"] = 0] = \"NearToFar\";\r\n    RenderOrder[RenderOrder[\"FarToNear\"] = 1] = \"FarToNear\";\r\n})(RenderOrder || (RenderOrder = {}));\r\nexport const RenderData = {\r\n    create(camera, scene, output) {\r\n        return {\r\n            camera,\r\n            scene,\r\n            cameraOutput: output,\r\n            visibleObjects: scene.getEntitiesOfType(RenderObject),\r\n            getVisibleObjects(renderOrder = RenderOrder.NearToFar, filter) {\r\n                const viewMat = this.camera.worldToLocalMatrix;\r\n                let objects = this.visibleObjects;\r\n                if (filter)\r\n                    objects = objects.filter(filter);\r\n                let wrap = objects.map(obj => ({ pos: mat4.mulPoint(viewMat, obj.position), obj: obj }));\r\n                if (renderOrder === RenderOrder.NearToFar)\r\n                    wrap = wrap.sort((a, b) => b.pos.z - a.pos.z);\r\n                else\r\n                    wrap = wrap.sort((a, b) => a.pos.z - b.pos.z);\r\n                return wrap.map(t => t.obj);\r\n            },\r\n        };\r\n    }\r\n};\r\n// export class RenderData<Extension = {}> extends RenderDataExtension<Extension>\r\n// {\r\n//     camera: Camera;\r\n//     scene: Scene;\r\n//     cameraOutput: FrameBuffer;\r\n//     private visibleObjects: RenderObject[] = [];\r\n//     private visibleLights: Light[] = [];\r\n//     constructor(camera: Camera, output: FrameBuffer, scene: Scene)\r\n//     {\r\n//         this.camera = camera;\r\n//         this.scene = scene;\r\n//         this.cameraOutput = output;\r\n//         this.visibleLights = scene.getEntitiesOfType(Light);\r\n//         this.visibleObjects = scene.getEntitiesOfType(RenderObject);\r\n//     }\r\n//     getVisibleObjects(renderOrder: RenderOrder = RenderOrder.NearToFar) : ReadonlyArray<RenderObject>\r\n//     {\r\n//         const viewMat = this.camera.worldToLocalMatrix;\r\n//         let wrap = this.visibleObjects.map(obj => ({ pos: mat4.mulPoint(viewMat, obj.position), obj: obj }));\r\n//         if (renderOrder === RenderOrder.NearToFar)\r\n//             wrap = wrap.sort((a, b) => b.pos.z - a.pos.z);\r\n//         else\r\n//             wrap = wrap.sort((a, b) => a.pos.z - b.pos.z);\r\n//         return wrap.map(t => t.obj);\r\n//     }\r\n//     getVisibleLights(): ReadonlyArray<Light>\r\n//     {\r\n//         return this.visibleLights;\r\n//     }\r\n// }\r\n//# sourceMappingURL=render-data.js.map","export class RenderPass {\r\n    setup(context, data) {\r\n    }\r\n    cleanup(context, data) {\r\n    }\r\n}\r\n//# sourceMappingURL=render-pass.js.map","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nimport { Blending, Color, DefaultVertexData, DepthTest, FilterMode, GLArrayBuffer, MaterialFromShader, MeshBuilder, RenderTexture, Shader, shaderProp, TextureFormat, TextureResizing, vec2, vec3, vec4, VertexStruct } from \"zogra-renderer\";\r\nimport { Light2D, ShadowType } from \"../../2d/rendering/light-2d\";\r\nimport { ShaderSource } from \"../../assets\";\r\nimport { RenderPass } from \"./render-pass\";\r\nexport class Light2DPass extends RenderPass {\r\n    constructor(context, pipelineSettings) {\r\n        super();\r\n        this.light2DShadowMaterial = new Light2DWithShadow();\r\n        this.lightComposeMaterial = new Light2DCompose();\r\n        this.lightInstancingMaterial = new Light2DSimpleInstancing();\r\n        this.lightInstancingBuffer = new GLArrayBuffer(Light2DInstancingStruct, 64);\r\n        this.settings = pipelineSettings;\r\n        this.lightmap = new RenderTexture(context.screen.width, context.screen.height, false, TextureFormat.RGBA16F, FilterMode.Linear);\r\n        this.simpleLightMesh = MeshBuilder.quad(vec2.zero(), vec2(2));\r\n        this.lightInstancingBuffer.static = false;\r\n    }\r\n    render(context, data) {\r\n        if (!data.cameraOutput.size.equals(this.lightmap.size))\r\n            this.lightmap.resize(data.cameraOutput.width, data.cameraOutput.height, TextureResizing.Discard);\r\n        const lightList = data.scene.getEntitiesOfType(Light2D);\r\n        const shadowLights = lightList.filter(light => light.shadowType === ShadowType.Hard || light.shadowType === ShadowType.Soft);\r\n        const simpleLights = lightList.filter(light => light.shadowType === false);\r\n        context.renderer.setFramebuffer(this.lightmap);\r\n        context.renderer.clear(Color.black);\r\n        this.drawShadowLights(context, data, shadowLights);\r\n        this.drawSimpleLights(context, data, simpleLights);\r\n        context.renderer.blit(this.lightmap, data.cameraOutput, this.lightComposeMaterial);\r\n    }\r\n    drawSimpleLights(context, data, simpleLights) {\r\n        if (simpleLights.length > this.lightInstancingBuffer.length)\r\n            this.lightInstancingBuffer.resize(this.lightInstancingBuffer.length * 2);\r\n        for (let i = 0; i < simpleLights.length; i++) {\r\n            vec4.set(this.lightInstancingBuffer[i].lightColor, simpleLights[i].lightColor);\r\n            vec3.set(this.lightInstancingBuffer[i].lightPos, simpleLights[i].position);\r\n            this.lightInstancingBuffer[i].lightParams[0] = simpleLights[i].volumnRadius;\r\n            this.lightInstancingBuffer[i].lightParams[1] = simpleLights[i].lightRange;\r\n            this.lightInstancingBuffer[i].lightParams[2] = simpleLights[i].attenuation;\r\n            this.lightInstancingBuffer[i].lightParams[3] = simpleLights[i].intensity;\r\n        }\r\n        context.renderer.drawMeshInstance(this.simpleLightMesh, this.lightInstancingBuffer, this.lightInstancingMaterial, simpleLights.length);\r\n    }\r\n    drawShadowLights(context, data, shadowLights) {\r\n        for (let i = 0; i < this.light2DShadowMaterial.lightParamsList.length; i++)\r\n            this.light2DShadowMaterial.lightParamsList[i].fill(0);\r\n        for (let i = 0; i < shadowLights.length; i++) {\r\n            const light = shadowLights[i];\r\n            this.light2DShadowMaterial.lightPosList[i] = this.light2DShadowMaterial.lightPosList[i] || vec4.zero();\r\n            vec4.set(this.light2DShadowMaterial.lightPosList[i], light.position);\r\n            this.light2DShadowMaterial.lightPosList[i].w = 1;\r\n            this.light2DShadowMaterial.lightParamsList[i] = this.light2DShadowMaterial.lightParamsList[i] || vec4.zero();\r\n            this.light2DShadowMaterial.lightParamsList[i].x = light.volumnRadius;\r\n            this.light2DShadowMaterial.lightParamsList[i].y = light.lightRange;\r\n            this.light2DShadowMaterial.lightParamsList[i].z = light.attenuation;\r\n            this.light2DShadowMaterial.lightParamsList[i].w = light.intensity;\r\n            this.light2DShadowMaterial.lightColorList[i] = this.light2DShadowMaterial.lightColorList[i] || Color.white;\r\n            this.light2DShadowMaterial.lightColorList[i].set(light.lightColor);\r\n            this.light2DShadowMaterial.shadowMapList[i] = light.getShadowMap(context, data);\r\n        }\r\n        this.light2DShadowMaterial.lightCount = shadowLights.length;\r\n        this.light2DShadowMaterial.cameraParams.x = data.camera.position.x;\r\n        this.light2DShadowMaterial.cameraParams.y = data.camera.position.y;\r\n        this.light2DShadowMaterial.cameraParams.z = data.camera.viewHeight * 2 * data.camera.aspectRatio;\r\n        this.light2DShadowMaterial.cameraParams.w = data.camera.viewHeight * 2;\r\n        vec4.mul(this.light2DShadowMaterial.ambientLightColor, this.settings.ambientLightColor, this.settings.ambientIntensity);\r\n        context.renderer.blit(null, this.lightmap, this.light2DShadowMaterial);\r\n    }\r\n}\r\nclass Light2DWithShadow extends MaterialFromShader(new Shader(...ShaderSource.light2D, {\r\n    blend: [Blending.One, Blending.Zero],\r\n    depth: DepthTest.Disable,\r\n    zWrite: false,\r\n})) {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.lightPosList = [];\r\n        this.lightColorList = [];\r\n        this.lightParamsList = [];\r\n        this.shadowMapList = [];\r\n        this.lightCount = 0;\r\n        this.cameraParams = vec4.zero();\r\n        this.ambientLightColor = Color.white;\r\n    }\r\n}\r\n__decorate([\r\n    shaderProp(\"uLightPosList\", \"vec4[]\")\r\n], Light2DWithShadow.prototype, \"lightPosList\", void 0);\r\n__decorate([\r\n    shaderProp(\"uLightColorList\", \"color[]\")\r\n], Light2DWithShadow.prototype, \"lightColorList\", void 0);\r\n__decorate([\r\n    shaderProp(\"uLightParamsList\", \"vec4[]\")\r\n], Light2DWithShadow.prototype, \"lightParamsList\", void 0);\r\n__decorate([\r\n    shaderProp(\"uShadowMapList\", \"tex2d[]\")\r\n], Light2DWithShadow.prototype, \"shadowMapList\", void 0);\r\n__decorate([\r\n    shaderProp(\"uLightCount\", \"int\")\r\n], Light2DWithShadow.prototype, \"lightCount\", void 0);\r\n__decorate([\r\n    shaderProp(\"uCameraParams\", \"vec4\")\r\n], Light2DWithShadow.prototype, \"cameraParams\", void 0);\r\n__decorate([\r\n    shaderProp(\"uAmbientLightColor\", \"color\")\r\n], Light2DWithShadow.prototype, \"ambientLightColor\", void 0);\r\nclass Light2DCompose extends MaterialFromShader(new Shader(...ShaderSource.blitCopy, {\r\n    blend: [Blending.DstColor, Blending.Zero],\r\n    depth: DepthTest.Disable,\r\n    zWrite: false,\r\n})) {\r\n}\r\nconst Light2DInstancingStruct = VertexStruct({\r\n    lightPos: \"vec3\",\r\n    lightParams: \"vec4\",\r\n    lightColor: \"vec4\",\r\n});\r\nclass Light2DSimpleInstancing extends MaterialFromShader(new Shader(...ShaderSource.light2DSimple, {\r\n    vertexStructure: Object.assign(Object.assign({}, DefaultVertexData), Light2DInstancingStruct),\r\n    attributes: {\r\n        lightPos: \"aLightPos\",\r\n        lightColor: \"aLightColor\",\r\n        lightParams: \"aLightParams\",\r\n    },\r\n    blend: [Blending.One, Blending.One],\r\n})) {\r\n}\r\n//# sourceMappingURL=2d-light-pass.js.map","import { RenderPass } from \"./render-pass\";\r\nexport class ClearPass extends RenderPass {\r\n    render(context, data) {\r\n        const camera = data.camera;\r\n        context.renderer.setFramebuffer(data.cameraOutput);\r\n        context.renderer.clear(camera.clearColor, camera.clearDepth);\r\n    }\r\n}\r\n//# sourceMappingURL=clear-pass.js.map","import { DebugProvider, Lines } from \"zogra-renderer\";\r\nimport { Color } from \"zogra-renderer\";\r\nimport { mat4 } from \"zogra-renderer\";\r\nimport { UnlitColor, UnlitColorOverlay } from \"../materials/unlit\";\r\nexport class DebugLayerRenderer extends DebugProvider {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.lines = new Lines();\r\n        this.overlayLines = new Lines();\r\n        this.material = new UnlitColor();\r\n        this.materialOverlay = new UnlitColorOverlay();\r\n    }\r\n    drawLine(from, to, color = Color.white, overlay = false) {\r\n        const lineBuffer = overlay ? this.overlayLines : this.lines;\r\n        const verts = lineBuffer.verts;\r\n        const lines = lineBuffer.lines;\r\n        const colors = lineBuffer.colors;\r\n        const base = verts.length;\r\n        verts.push(from, to);\r\n        colors.push(color, color);\r\n        lines.push(base, base + 1);\r\n        lineBuffer.verts = verts;\r\n        lineBuffer.colors = colors;\r\n        lineBuffer.lines = lines;\r\n    }\r\n    render(context, data) {\r\n        context.renderer.drawLines(this.lines, mat4.identity(), this.material);\r\n        context.renderer.drawLines(this.overlayLines, mat4.identity(), this.materialOverlay);\r\n        this.lines.clear();\r\n        this.overlayLines.clear();\r\n    }\r\n}\r\n//# sourceMappingURL=debug-layer.js.map","import { RenderPass } from \"./render-pass\";\r\nexport class DrawScene extends RenderPass {\r\n    constructor(order, filter) {\r\n        super();\r\n        this.renderOrder = order;\r\n        this.filter = filter;\r\n    }\r\n    render(context, data) {\r\n        const camera = data.camera;\r\n        context.renderer.setFramebuffer(data.cameraOutput);\r\n        const objs = data.getVisibleObjects(this.renderOrder, this.filter);\r\n        for (const obj of objs) {\r\n            obj.render(context, data);\r\n        }\r\n    }\r\n}\r\n//# sourceMappingURL=draw-scene.js.map","import { FrameBuffer, RenderBuffer, RenderTexture } from \"zogra-renderer\";\r\nimport { RenderPass } from \"./render-pass\";\r\nexport class FinalBlit extends RenderPass {\r\n    constructor(context, format) {\r\n        super();\r\n        this.tempRT = new RenderTexture(context.screen.width, context.screen.height, false, format);\r\n    }\r\n    render(context, data) {\r\n        var _a, _b;\r\n        if (!data.cameraOutput.size.equals(this.tempRT.size)) {\r\n            this.tempRT.resize(data.cameraOutput.width, data.cameraOutput.height);\r\n        }\r\n        const camera = data.camera;\r\n        if (data.postprocessOutput) {\r\n            context.renderer.blit(data.postprocessOutput, (_a = camera.output) !== null && _a !== void 0 ? _a : FrameBuffer.CanvasBuffer);\r\n        }\r\n        else if (data.cameraOutput === FrameBuffer.CanvasBuffer) {\r\n            return;\r\n        }\r\n        else if (data.cameraOutput instanceof FrameBuffer) {\r\n            if (data.cameraOutput.colorAttachments[0] instanceof RenderBuffer) {\r\n                if (camera.output instanceof RenderTexture)\r\n                    context.renderer.blitCopy(data.cameraOutput.colorAttachments[0], camera.output);\r\n                else {\r\n                    context.renderer.blitCopy(data.cameraOutput.colorAttachments[0], this.tempRT);\r\n                    context.renderer.blit(this.tempRT, FrameBuffer.CanvasBuffer);\r\n                }\r\n            }\r\n            else if (data.cameraOutput.colorAttachments[0] instanceof RenderTexture) {\r\n                context.renderer.blit(data.cameraOutput.colorAttachments[0], (_b = camera.output) !== null && _b !== void 0 ? _b : FrameBuffer.CanvasBuffer);\r\n            }\r\n        }\r\n    }\r\n}\r\n//# sourceMappingURL=final-blit.js.map","import { LineBuilder, vec3, rgba, mat4 } from \"zogra-renderer\";\r\nimport { RenderPass } from \".\";\r\nimport { UnlitColor } from \"../materials/unlit\";\r\nexport class GridRenderer extends RenderPass {\r\n    constructor(Size = 10, Grid = 1, color = rgba(1, 1, 1, 0.1)) {\r\n        super();\r\n        this.material = new UnlitColor();\r\n        const lb = new LineBuilder();\r\n        for (let i = -Size; i <= Size; i += Grid) {\r\n            lb.addLine([\r\n                vec3(i, 0, -Size),\r\n                vec3(i, 0, Size),\r\n            ], color);\r\n            lb.addLine([\r\n                vec3(-Size, 0, i),\r\n                vec3(Size, 0, i)\r\n            ], color);\r\n        }\r\n        this.grid = lb.toLines();\r\n    }\r\n    render(context, data) {\r\n        context.renderer.drawLines(this.grid, mat4.identity(), this.material);\r\n    }\r\n}\r\n//# sourceMappingURL=grid.js.map","export class RenderPass {\r\n    setup(context, data) {\r\n    }\r\n    cleanup(context, data) {\r\n    }\r\n}\r\n//# sourceMappingURL=render-pass.js.map","export const RenderContext = {\r\n    create(renderer) {\r\n        return {\r\n            renderer,\r\n            screen: {\r\n                width: renderer.canvas.width,\r\n                height: renderer.canvas.height\r\n            },\r\n        };\r\n    }\r\n};\r\n//# sourceMappingURL=render-pipeline.js.map","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nimport { div, FilterMode, MaterialFromShader, mul, RenderTexture, Shader, shaderProp, TextureResizing, vec2, vec4, WrapMode, TextureFormat, GlobalContext, Color } from \"zogra-renderer\";\r\nimport { ShaderSource } from \"../assets\";\r\nclass MaterialBlur extends MaterialFromShader(new Shader(...ShaderSource.boxBlur)) {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.texture = null;\r\n        this.textureSize = vec4.one();\r\n        this.sampleOffset = 1;\r\n    }\r\n}\r\n__decorate([\r\n    shaderProp(\"uMainTex\", \"tex2d\")\r\n], MaterialBlur.prototype, \"texture\", void 0);\r\n__decorate([\r\n    shaderProp(\"uTexSize\", \"vec4\")\r\n], MaterialBlur.prototype, \"textureSize\", void 0);\r\n__decorate([\r\n    shaderProp(\"uSampleOffset\", \"float\")\r\n], MaterialBlur.prototype, \"sampleOffset\", void 0);\r\nexport class DownsampleBlurRenderer {\r\n    constructor() {\r\n        this.steps = [];\r\n        this.downsampleMaterial = new MaterialBlur();\r\n        this.upsampleMaterial = new MaterialBlur();\r\n    }\r\n    init(texture) {\r\n        if (!this.steps[0]) {\r\n            this.steps[0] = new RenderTexture(texture.width, texture.height, false, texture.format, texture.filterMode);\r\n            this.steps[0].wrapMode = WrapMode.Clamp;\r\n            this.steps[0].updateParameters();\r\n        }\r\n        if (this.steps[0].width !== texture.width || this.steps[0].height !== texture.height)\r\n            this.steps[0].resize(texture.width, texture.height, TextureResizing.Discard);\r\n    }\r\n    blur(texture, iteration = 4, output = this.steps[0], ctx = GlobalContext()) {\r\n        if (output == this.steps[0]) {\r\n            if (!this.steps[0])\r\n                this.steps[0] = new RenderTexture(texture.width, texture.height, false, texture.format, texture.filterMode);\r\n            this.init(texture);\r\n            output = this.steps[0];\r\n        }\r\n        ctx.renderer.setFramebuffer(output);\r\n        ctx.renderer.clear(Color.black);\r\n        this.downSample(ctx.renderer, texture, iteration);\r\n        return this.upSample(ctx.renderer, iteration, output);\r\n    }\r\n    downSample(renderer, input, iteration) {\r\n        for (let i = 1; i <= iteration; i++) {\r\n            const downSize = vec2.floor(div(input.size, vec2(2)));\r\n            if (!this.steps[i]) {\r\n                this.steps[i] = new RenderTexture(downSize.x, downSize.y, false, TextureFormat.RGBA, FilterMode.Linear);\r\n                this.steps[i].wrapMode = WrapMode.Clamp;\r\n                this.steps[i].updateParameters();\r\n            }\r\n            const output = this.steps[i];\r\n            if (output.width !== downSize.x || output.height !== downSize.y)\r\n                output.resize(downSize.x, downSize.y, TextureResizing.Discard);\r\n            this.downsampleMaterial.texture = input;\r\n            this.downsampleMaterial.textureSize = vec4(input.width, input.height, 1 / input.width, 1 / input.height);\r\n            this.downsampleMaterial.sampleOffset = 1;\r\n            renderer.blit(input, output, this.downsampleMaterial);\r\n            input = output;\r\n        }\r\n    }\r\n    upSample(renderer, iteration, finalOutput = this.steps[0]) {\r\n        let input = this.steps[iteration];\r\n        for (let i = iteration - 1; i >= 0; i--) {\r\n            const upSize = mul(input.size, vec2(2));\r\n            if (!this.steps[i]) {\r\n                this.steps[i] = new RenderTexture(upSize.x, upSize.y, false, TextureFormat.RGBA, FilterMode.Linear);\r\n                this.steps[i].wrapMode = WrapMode.Clamp;\r\n                this.steps[i].updateParameters();\r\n            }\r\n            const output = i === 0 ? finalOutput : this.steps[i];\r\n            this.upsampleMaterial.texture = input;\r\n            this.upsampleMaterial.textureSize = vec4(input.width, input.height, 1 / input.width, 1 / input.height);\r\n            this.upsampleMaterial.sampleOffset = 0.5;\r\n            renderer.blit(input, output, this.upsampleMaterial);\r\n            input = output;\r\n        }\r\n        return input;\r\n    }\r\n}\r\n//# sourceMappingURL=blur-renderer.js.map","export {};\r\n//# sourceMappingURL=index.js.map","export class DoubleBuffer {\r\n    constructor(init) {\r\n        this.currentIdx = 0;\r\n        this.buffers = [init(), init()];\r\n    }\r\n    get current() { return this.buffers[this.currentIdx % 2]; }\r\n    set current(value) { this.buffers[this.currentIdx % 2] = value; }\r\n    get back() { return this.buffers[(this.currentIdx + 1) % 2]; }\r\n    set back(value) { this.buffers[(this.currentIdx + 1) % 2] = value; }\r\n    update() {\r\n        this.currentIdx++;\r\n    }\r\n}\r\n//# sourceMappingURL=util.js.map","import { createBuiltinMaterialTypes, createBuiltinMaterial } from \"./materials\";\r\nimport { BuiltinShaderSources, BuiltinUniformNames, compileBuiltinShaders } from \"./shaders\";\r\nimport { createDefaultTextures } from \"./textures\";\r\nimport { createBuiltinMesh } from \"./mesh\";\r\nexport class BuiltinAssets {\r\n    constructor(ctx) {\r\n        const gl = ctx.gl;\r\n        this.gl = gl;\r\n        ctx.assets = this;\r\n        this.BuiltinUniforms = BuiltinUniformNames;\r\n        this.shaderSources = BuiltinShaderSources;\r\n        this.shaders = compileBuiltinShaders(gl);\r\n        this.meshes = createBuiltinMesh(ctx);\r\n        this.textures = createDefaultTextures(ctx);\r\n        this.types = createBuiltinMaterialTypes(gl, this.textures, this.shaders);\r\n        this.materials = createBuiltinMaterial(gl, this.types, this.shaders, this.textures);\r\n    }\r\n}\r\n//# sourceMappingURL=assets.js.map","var o = `#version 300 es\\r\nprecision mediump float;\\r\n\\r\nin vec3 aPos;\\r\nin vec4 aColor;\\r\nin vec2 aUV;\\r\nin vec3 aNormal;\\r\n\\r\nuniform mat4 uTransformM;\\r\nuniform mat4 uTransformVP;\\r\nuniform mat4 uTransformMVP;\\r\n\\r\nout vec4 vColor;\\r\nout vec4 vPos;\\r\nout vec2 vUV;\\r\nout vec3 vNormal;\\r\n\\r\nvoid main()\\r\n{\\r\n    gl_Position = uTransformMVP * vec4(aPos, 1);\\r\n    vColor = aColor;\\r\n    vUV = aUV;\\r\n    vNormal = aNormal;\\r\n}`;\r\nvar r = `#version 300 es\\r\nprecision mediump float;\\r\n\\r\nin vec4 vColor;\\r\nin vec4 vPos;\\r\nin vec2 vUV;\\r\n\\r\nuniform sampler2D uMainTex;\\r\nuniform vec4 uColor;\\r\n\\r\nout vec4 fragColor;\\r\n\\r\nvoid main()\\r\n{\\r\n    vec4 color = texture(uMainTex, vUV.xy).rgba;\\r\n    color = color * vColor * uColor;\\r\n    fragColor = color;\\r\n}`;\r\nvar e = `#version 300 es\\r\nprecision mediump float;\\r\n\\r\nin vec4 vColor;\\r\nin vec4 vPos;\\r\nin vec2 vUV;\\r\nin vec3 vNormal;\\r\n\\r\nuniform sampler2D uMainTex;\\r\n\\r\nout vec4 fragColor;\\r\n\\r\nvoid main()\\r\n{\\r\n    fragColor = texture(uMainTex, vUV).rgba;\\r\n}`;\r\nvar i = `#version 300 es\\r\nprecision mediump float;\\r\n\\r\nin vec4 vColor;\\r\nin vec4 vPos;\\r\n\\r\nout vec4 fragColor;\\r\n\\r\nvoid main()\\r\n{\\r\n    fragColor = vColor;\\r\n}`;\r\nvar a = `#version 300 es\\r\nprecision mediump float;\\r\n\\r\nin vec3 aPos;\\r\nin vec4 aColor;\\r\n\\r\nuniform mat4 uTransformM;\\r\nuniform mat4 uTransformVP;\\r\nuniform mat4 uTransformMVP;\\r\n\\r\nout vec4 vColor;\\r\nout vec4 vPos;\\r\n\\r\nvoid main()\\r\n{\\r\n    gl_Position = uTransformMVP * vec4(aPos, 1);\\r\n    vColor = aColor;\\r\n}`;\r\nvar v = `#version 300 es\\r\nprecision mediump float;\\r\n\\r\nin vec3 aPos;\\r\nin vec2 aUV;\\r\n\\r\nout vec2 vUV;\\r\n\\r\nvoid main()\\r\n{\\r\n    gl_Position = vec4(aPos, 1);\\r\n    vUV = vec2(aUV.x, vec2(1) - aUV.y);\\r\n}`;\r\nvar l = `#version 300 es\\r\nprecision mediump float;\\r\n\\r\nin vec4 vPos;\\r\nin vec2 vUV;\\r\n\\r\nuniform sampler2D uMainTex;\\r\n\\r\nout vec4 fragColor;\\r\n\\r\nvoid main()\\r\n{\\r\n    fragColor = texture(uMainTex, vUV).rgba;\\r\n}`;\r\nvar n = { defaultVert: o, defaultFrag: r, blitCopy: e, colorFrag: i, colorVert: a, flipVert: v, texFrag: l };\r\nexport { n as BuiltinShaderSources };\r\n//# sourceMappingURL=index.js.map\r\n//# sourceMappingURL=index.js.map","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nimport { MaterialFromShader, materialDefine, shaderProp, Material } from \"../core/material\";\r\nimport { Color } from \"../types/color\";\r\nimport { MaterialType } from \"../core/material-type\";\r\nimport { vec2 } from \"../types/vec2\";\r\nexport function createBuiltinMaterial(gl, types, shaders, textures) {\r\n    const errorMat = new Material(shaders.ErrorShader, gl);\r\n    errorMat.setProp(\"uMainTex\", \"tex2d\", textures.error);\r\n    return {\r\n        error: errorMat,\r\n        default: new types.DefaultMaterial(gl),\r\n        blitCopy: new types.BlitCopy(gl),\r\n        ColoredLine: new Material(shaders.ColoredLine, gl),\r\n    };\r\n}\r\nexport function createBuiltinMaterialTypes(gl, builtinTexs, shaders) {\r\n    let DefaultMaterial = class DefaultMaterial extends MaterialFromShader(shaders.DefaultShader) {\r\n        constructor() {\r\n            super(...arguments);\r\n            this.color = Color.white;\r\n            this.mainTexture = builtinTexs.default;\r\n        }\r\n    };\r\n    __decorate([\r\n        shaderProp(\"uColor\", \"color\")\r\n    ], DefaultMaterial.prototype, \"color\", void 0);\r\n    __decorate([\r\n        shaderProp(\"uMainTex\", \"tex2d\")\r\n    ], DefaultMaterial.prototype, \"mainTexture\", void 0);\r\n    DefaultMaterial = __decorate([\r\n        materialDefine\r\n    ], DefaultMaterial);\r\n    let BlitCopy = class BlitCopy extends MaterialFromShader(shaders.BlitCopy) {\r\n        constructor() {\r\n            super(...arguments);\r\n            this.source = null;\r\n            this.flip = vec2(0, 0);\r\n        }\r\n    };\r\n    __decorate([\r\n        shaderProp(\"uMainTex\", \"tex2d\")\r\n    ], BlitCopy.prototype, \"source\", void 0);\r\n    __decorate([\r\n        shaderProp(\"uFlip\", \"vec2\")\r\n    ], BlitCopy.prototype, \"flip\", void 0);\r\n    BlitCopy = __decorate([\r\n        materialDefine\r\n    ], BlitCopy);\r\n    let DefaultLit = class DefaultLit extends MaterialFromShader(shaders.DefaultShader) {\r\n        constructor() {\r\n            super(...arguments);\r\n            this.color = Color.white;\r\n            this.mainTexture = builtinTexs.default;\r\n            this.normalTexture = builtinTexs.defaultNormal;\r\n            this.emission = Color.black;\r\n            this.specular = Color.white;\r\n            this.metiallic = 0.023;\r\n            this.smoothness = 0.5;\r\n            this.fresnel = 5;\r\n        }\r\n    };\r\n    __decorate([\r\n        shaderProp(\"uColor\", \"color\")\r\n    ], DefaultLit.prototype, \"color\", void 0);\r\n    __decorate([\r\n        shaderProp(\"uMainTex\", \"tex2d\")\r\n    ], DefaultLit.prototype, \"mainTexture\", void 0);\r\n    __decorate([\r\n        shaderProp(\"uNormalTex\", \"tex2d\")\r\n    ], DefaultLit.prototype, \"normalTexture\", void 0);\r\n    __decorate([\r\n        shaderProp(\"uEmission\", \"color\")\r\n    ], DefaultLit.prototype, \"emission\", void 0);\r\n    __decorate([\r\n        shaderProp(\"uSpecular\", \"color\")\r\n    ], DefaultLit.prototype, \"specular\", void 0);\r\n    __decorate([\r\n        shaderProp(\"uMetallic\", \"float\")\r\n    ], DefaultLit.prototype, \"metiallic\", void 0);\r\n    __decorate([\r\n        shaderProp(\"uSmoothness\", \"float\")\r\n    ], DefaultLit.prototype, \"smoothness\", void 0);\r\n    __decorate([\r\n        shaderProp(\"uFresnel\", \"float\")\r\n    ], DefaultLit.prototype, \"fresnel\", void 0);\r\n    DefaultLit = __decorate([\r\n        materialDefine\r\n    ], DefaultLit);\r\n    return {\r\n        DefaultMaterial: DefaultMaterial,\r\n        BlitCopy: BlitCopy,\r\n        DefaultLit: DefaultLit,\r\n    };\r\n}\r\n//# sourceMappingURL=materials.js.map","import { vec3 } from \"../types/vec3\";\r\nimport { vec2 } from \"../types/vec2\";\r\nimport { MeshBuilder } from \"../utils/mesh-builder\";\r\nexport function createBuiltinMesh(ctx) {\r\n    return {\r\n        quad: MeshBuilder.quad(vec2.zero(), vec2.one(), ctx),\r\n        screenQuad: MeshBuilder.ndcQuad(ctx),\r\n        cube: MeshBuilder.cube(vec3.zero(), vec3.one(), ctx),\r\n    };\r\n}\r\n//# sourceMappingURL=mesh.js.map","import { Shader, DepthTest, Blending } from \"../core/shader\";\r\nimport { BuiltinShaderSources } from \"./generated\";\r\nexport const BuiltinUniformNames = {\r\n    matM: \"uTransformM\",\r\n    matM_IT: \"uTransformM_IT\",\r\n    matMInv: \"uTransformMInv\",\r\n    matVP: \"uTransformVP\",\r\n    matMVP: \"uTransformMVP\",\r\n    matMV_IT: \"uTransformMV_IT\",\r\n    flipUV: \"uFlipUV\",\r\n    mainTex: \"uMainTex\",\r\n    color: \"uColor\",\r\n};\r\nexport function compileBuiltinShaders(gl) {\r\n    return {\r\n        DefaultShader: new Shader(BuiltinShaderSources.defaultVert, BuiltinShaderSources.defaultFrag, { name: \"DefaultShader\" }, gl),\r\n        BlitCopy: new Shader(BuiltinShaderSources.defaultVert, BuiltinShaderSources.blitCopy, {\r\n            name: \"BlitCopy\",\r\n            depth: DepthTest.Always,\r\n            blend: Blending.Disable,\r\n            zWrite: false\r\n        }, gl),\r\n        FlipTexture: new Shader(BuiltinShaderSources.flipVert, BuiltinShaderSources.blitCopy, {}, gl),\r\n        ColoredLine: new Shader(BuiltinShaderSources.colorVert, BuiltinShaderSources.colorFrag, {\r\n            blend: [Blending.SrcAlpha, Blending.OneMinusSrcAlpha],\r\n            depth: DepthTest.Disable,\r\n            zWrite: false,\r\n        }, gl),\r\n        ErrorShader: new Shader(BuiltinShaderSources.defaultVert, BuiltinShaderSources.texFrag, {\r\n            name: \"Error\"\r\n        }, gl)\r\n    };\r\n}\r\nexport { BuiltinShaderSources };\r\n//# sourceMappingURL=shaders.js.map","import { panic } from \"../utils/util\";\r\nimport { Texture2D, FilterMode } from \"../core/texture\";\r\nimport { TextureFormat } from \"../core/texture-format\";\r\nexport function createDefaultTextures(context) {\r\n    var _a;\r\n    const size = 64;\r\n    const canvas = document.createElement(\"canvas\");\r\n    canvas.width = canvas.height = size;\r\n    const ctx = (_a = canvas.getContext(\"2d\")) !== null && _a !== void 0 ? _a : panic(\"Failed to create default texture.\");\r\n    ctx.fillStyle = \"black\";\r\n    ctx.fillRect(0, 0, size, size);\r\n    ctx.fillStyle = \"cyan\";\r\n    ctx.fillRect(0, 0, size / 2, size / 2);\r\n    ctx.fillRect(size / 2, size / 2, size / 2, size / 2);\r\n    const errorTex = new Texture2D(size, size, TextureFormat.RGBA, FilterMode.Linear, context);\r\n    errorTex.setData(canvas);\r\n    errorTex.name = \"Texture-Error\";\r\n    ctx.fillStyle = \"blue\";\r\n    ctx.fillRect(0, 0, size, size);\r\n    const defaultNormalTex = new Texture2D(size, size, TextureFormat.RGBA, FilterMode.Linear, context);\r\n    defaultNormalTex.setData(canvas);\r\n    defaultNormalTex.name = \"Default-Normal\";\r\n    ctx.fillStyle = \"white\";\r\n    ctx.fillRect(0, 0, size, size);\r\n    const defaultTex = new Texture2D(size, size, TextureFormat.RGBA, FilterMode.Linear, context);\r\n    defaultTex.setData(canvas);\r\n    defaultTex.name = \"Default-White\";\r\n    return {\r\n        default: defaultTex,\r\n        defaultNormal: defaultNormalTex,\r\n        error: errorTex\r\n    };\r\n}\r\n//# sourceMappingURL=textures.js.map","import { panic } from \"../utils/util\";\r\nimport { AssetManager } from \"./asset\";\r\nimport { GlobalContext } from \"./global\";\r\nexport function BufferStructure(structure) {\r\n    return structure;\r\n}\r\nconst ElementLength = {\r\n    float: 1,\r\n    vec2: 2,\r\n    vec3: 3,\r\n    vec4: 4,\r\n    mat4: 16,\r\n    int: 1,\r\n    ivec2: 2,\r\n    ivec3: 3,\r\n    ivec4: 4\r\n};\r\nexport const BufferStructureInfo = {\r\n    from(structure) {\r\n        const structInfo = {\r\n            elements: [],\r\n            byteSize: 0,\r\n            totalSize: 0,\r\n        };\r\n        let location = 0;\r\n        for (const key in structure) {\r\n            const element = {\r\n                key,\r\n                type: structure[key],\r\n                location: location,\r\n                length: ElementLength[structure[key]],\r\n            };\r\n            element.byteLength = element.length * 4;\r\n            element.offset = structInfo.totalSize;\r\n            element.byteOffset = structInfo.byteSize;\r\n            structInfo.totalSize += element.length;\r\n            structInfo.byteSize += element.byteLength;\r\n            structInfo.elements.push(element);\r\n            location += structure[key] === \"mat4\" ? 4 : 1;\r\n        }\r\n        return structInfo;\r\n    }\r\n};\r\nexport class GLArrayBuffer extends Array {\r\n    constructor(structure, items, createElementView = true, ctx = GlobalContext()) {\r\n        super(items);\r\n        this.static = true;\r\n        this.Data = null;\r\n        this.dirty = false;\r\n        this.initialized = false;\r\n        this.destroyed = false;\r\n        this.glBuf = null;\r\n        this.swapBuffer = null;\r\n        this.structure = BufferStructureInfo.from(structure);\r\n        // this.structure = structure;\r\n        this.ctx = ctx;\r\n        this.innerBuffer = null;\r\n        this.resize(items, createElementView);\r\n        this.tryInit(false);\r\n        this.assetID = AssetManager.newAssetID(this);\r\n        this.name = `GLArrayBuffer_${this.assetID}`;\r\n    }\r\n    get byteLength() { return this.length * this.structure.byteSize; }\r\n    resize(length, keepContent = true, createElementView = true) {\r\n        const oldBuffer = this.innerBuffer;\r\n        this.innerBuffer = new Float32Array(this.structure.totalSize * length);\r\n        if (keepContent && oldBuffer) {\r\n            if (oldBuffer.length > this.innerBuffer.length) {\r\n                this.innerBuffer.set(new Float32Array(oldBuffer.buffer, 0, this.innerBuffer.length));\r\n            }\r\n            else\r\n                this.innerBuffer.set(oldBuffer, 0);\r\n        }\r\n        this.length = length;\r\n        if (createElementView) {\r\n            for (let i = 0; i < this.length; i++) {\r\n                const elementView = {};\r\n                for (const element of this.structure.elements) {\r\n                    const bufferOffset = i * this.structure.byteSize + element.byteOffset;\r\n                    switch (element.type) {\r\n                        case \"float\":\r\n                        case \"vec2\":\r\n                        case \"vec3\":\r\n                        case \"vec4\":\r\n                        case \"mat4\":\r\n                            elementView[element.key] = new Float32Array(this.innerBuffer.buffer, bufferOffset, ElementLength[element.type]);\r\n                            break;\r\n                        case \"int\":\r\n                        case \"ivec2\":\r\n                        case \"ivec3\":\r\n                        case \"ivec4\":\r\n                            elementView[element.key] = new Int32Array(this.innerBuffer.buffer, bufferOffset, ElementLength[element.type]);\r\n                            break;\r\n                        default:\r\n                            console.warn(`Unknown element type '${element.type}'`);\r\n                    }\r\n                }\r\n                this[i] = elementView;\r\n            }\r\n        }\r\n        this.dirty = true;\r\n    }\r\n    copyFrom(source, selfElementOffset = 0, sourceElementOffset = 0, sourceElementLength = source.length) {\r\n        const byteOffset = selfElementOffset * this.structure.byteSize;\r\n        const maxWriteSize = this.innerBuffer.buffer.byteLength - byteOffset;\r\n        const srcByteOffset = sourceElementOffset * source.structure.byteSize;\r\n        const srcSize = (sourceElementLength - sourceElementOffset) * source.structure.byteSize;\r\n        const writeSize = Math.min(maxWriteSize, srcSize);\r\n        const dstView = new Uint8Array(this.innerBuffer.buffer, byteOffset, writeSize);\r\n        const srcView = new Uint8Array(source.innerBuffer.buffer, srcByteOffset, writeSize);\r\n        dstView.set(srcView);\r\n    }\r\n    swapVertices(a, b) {\r\n        if (!this.swapBuffer)\r\n            this.swapBuffer = new Float32Array(this.structure.totalSize);\r\n        const offsetI = a * this.structure.byteSize;\r\n        const offsetJ = b * this.structure.byteSize;\r\n        let temp = this.swapBuffer;\r\n        let viewA = new Float32Array(this.innerBuffer.buffer, offsetI, this.structure.totalSize);\r\n        temp.set(viewA);\r\n        const viewB = new Float32Array(this.innerBuffer.buffer, offsetJ, this.structure.totalSize);\r\n        this.innerBuffer.set(viewB, a * this.structure.totalSize);\r\n        this.innerBuffer.set(temp, b * this.structure.totalSize);\r\n    }\r\n    markDirty() {\r\n        this.dirty = true;\r\n    }\r\n    upload(force = false) {\r\n        this.tryInit(true);\r\n        if (!this.dirty && !force && this.static)\r\n            return false;\r\n        const gl = this.ctx.gl;\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.glBuf);\r\n        gl.bufferData(gl.ARRAY_BUFFER, this.innerBuffer, this.static ? gl.STATIC_DRAW : gl.DYNAMIC_DRAW);\r\n        this.dirty = false;\r\n        return true;\r\n    }\r\n    bind() {\r\n        this.tryInit(true);\r\n        const gl = this.ctx.gl;\r\n        this.upload();\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.glBuf);\r\n    }\r\n    bindVertexArray(instancing = false, attributes) {\r\n        this.tryInit(true);\r\n        const gl = this.ctx.gl;\r\n        this.upload();\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.glBuf);\r\n        for (const element of this.structure.elements) {\r\n            const location = attributes\r\n                ? attributes[element.key] || -1\r\n                : element.location;\r\n            if (location < 0)\r\n                continue;\r\n            switch (element.type) {\r\n                case \"float\":\r\n                case \"vec2\":\r\n                case \"vec3\":\r\n                case \"vec4\":\r\n                    gl.enableVertexAttribArray(location);\r\n                    gl.vertexAttribPointer(location, element.length, gl.FLOAT, false, this.structure.byteSize, element.byteOffset);\r\n                    instancing && gl.vertexAttribDivisor(location, 1);\r\n                    break;\r\n                case \"int\":\r\n                case \"ivec2\":\r\n                case \"ivec3\":\r\n                case \"ivec4\":\r\n                    gl.enableVertexAttribArray(location);\r\n                    gl.vertexAttribIPointer(location, element.length, gl.INT, this.structure.byteSize, element.byteOffset);\r\n                    instancing && gl.vertexAttribDivisor(location, 1);\r\n                    break;\r\n                case \"mat4\":\r\n                    gl.enableVertexAttribArray(location + 0);\r\n                    gl.enableVertexAttribArray(location + 1);\r\n                    gl.enableVertexAttribArray(location + 2);\r\n                    gl.enableVertexAttribArray(location + 3);\r\n                    gl.vertexAttribPointer(location + 0, 4, gl.FLOAT, false, this.structure.byteSize, element.byteOffset + 0);\r\n                    gl.vertexAttribPointer(location + 1, 4, gl.FLOAT, false, this.structure.byteSize, element.byteOffset + 1);\r\n                    gl.vertexAttribPointer(location + 2, 4, gl.FLOAT, false, this.structure.byteSize, element.byteOffset + 2);\r\n                    gl.vertexAttribPointer(location + 3, 4, gl.FLOAT, false, this.structure.byteSize, element.byteOffset + 3);\r\n                    if (instancing) {\r\n                        gl.vertexAttribDivisor(location + 0, 1);\r\n                        gl.vertexAttribDivisor(location + 1, 1);\r\n                        gl.vertexAttribDivisor(location + 2, 1);\r\n                        gl.vertexAttribDivisor(location + 3, 1);\r\n                    }\r\n                    break;\r\n                default:\r\n                    console.warn(`Unknown attribute type '${element.type}'`);\r\n            }\r\n        }\r\n    }\r\n    unbindVertexArray(instancing = false, attributes) {\r\n        this.tryInit(true);\r\n        const gl = this.ctx.gl;\r\n        for (const element of this.structure.elements) {\r\n            const location = attributes\r\n                ? attributes[element.key] || -1\r\n                : element.location;\r\n            if (location < 0)\r\n                continue;\r\n            if (element.type === \"mat4\") {\r\n                gl.disableVertexAttribArray(location + 0);\r\n                gl.disableVertexAttribArray(location + 1);\r\n                gl.disableVertexAttribArray(location + 2);\r\n                gl.disableVertexAttribArray(location + 3);\r\n                if (instancing) {\r\n                    gl.vertexAttribDivisor(location + 0, 0);\r\n                    gl.vertexAttribDivisor(location + 1, 0);\r\n                    gl.vertexAttribDivisor(location + 2, 0);\r\n                    gl.vertexAttribDivisor(location + 3, 0);\r\n                }\r\n            }\r\n            else {\r\n                gl.disableVertexAttribArray(location);\r\n                instancing && gl.vertexAttribDivisor(location, 0);\r\n            }\r\n        }\r\n    }\r\n    unbind() {\r\n        this.tryInit(true);\r\n        const gl = this.ctx.gl;\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, null);\r\n        gl.bindVertexArray(null);\r\n    }\r\n    destroy() {\r\n        if (this.destroyed)\r\n            return;\r\n        if (!this.initialized)\r\n            return;\r\n        const gl = this.ctx.gl;\r\n        this.length = 0;\r\n        gl.deleteBuffer(this.glBuf);\r\n        this.destroyed = true;\r\n        this.initialized = false;\r\n    }\r\n    tryInit(required = false) {\r\n        var _a;\r\n        if (this.destroyed)\r\n            throw new Error(\"Attempt to use destroyed array buffer.\");\r\n        if (this.initialized)\r\n            return true;\r\n        const ctx = this.ctx || GlobalContext();\r\n        if (!ctx) {\r\n            if (required)\r\n                throw new Error(\"Failed to init render buffer without a global GL context.\");\r\n            return false;\r\n        }\r\n        this.ctx = ctx;\r\n        const gl = ctx.gl;\r\n        this.glBuf = (_a = gl.createBuffer()) !== null && _a !== void 0 ? _a : panic(\"Failed to create render buffer\");\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.glBuf);\r\n        gl.bufferData(gl.ARRAY_BUFFER, this.byteLength, this.static ? gl.STATIC_DRAW : gl.DYNAMIC_DRAW);\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, null);\r\n        this.initialized = true;\r\n        return true;\r\n    }\r\n}\r\n//# sourceMappingURL=array-buffer.js.map","import { EventEmitter } from \"./event\";\r\nimport { GlobalContext } from \"./global\";\r\nexport class Asset {\r\n    constructor(name) {\r\n        this.destroyed = false;\r\n        this.assetID = AssetManager.newAssetID(this);\r\n        this.name = name || `Asset_${this.assetID}`;\r\n    }\r\n    destroy() {\r\n        this.destroyed = true;\r\n        AssetManager.destroy(this.assetID);\r\n    }\r\n}\r\nexport class GPUAsset extends Asset {\r\n    constructor(ctx = GlobalContext(), name) {\r\n        super(name);\r\n        this.initialized = false;\r\n        this.ctx = ctx;\r\n    }\r\n    tryInit(required = false) {\r\n        if (this.initialized)\r\n            return true;\r\n        if (!this.ctx)\r\n            this.ctx = GlobalContext();\r\n        const success = this.ctx && this.init();\r\n        if (!success && required)\r\n            throw new Error(`Failed to init GPU Asset '${this.name}' without global gl context.`);\r\n        this.initialized = success;\r\n        return success;\r\n    }\r\n}\r\nexport class LazyInitAsset extends Asset {\r\n    constructor(ctx = GlobalContext()) {\r\n        super();\r\n        this.initialzed = false;\r\n        this.ctx = ctx;\r\n    }\r\n    tryInit(required = false) {\r\n        if (this.initialzed)\r\n            return true;\r\n        const ctx = this.ctx || GlobalContext();\r\n        if (!ctx) {\r\n            if (required)\r\n                throw new Error(\"Failed to initialize GPU resource withou a global GL context.\");\r\n            return false;\r\n        }\r\n        this.ctx = ctx;\r\n        if (this.init()) {\r\n            this.initialzed = true;\r\n            return true;\r\n        }\r\n        else {\r\n            if (required)\r\n                throw new Error(\"Failed to initialize required GPU resource.\");\r\n            return false;\r\n        }\r\n    }\r\n}\r\nclass AssetManagerType {\r\n    constructor() {\r\n        this.assetsMap = new Map();\r\n        this.id = 1;\r\n        this.eventEmitter = new EventEmitter();\r\n    }\r\n    newAssetID(asset) {\r\n        const currentId = ++this.id;\r\n        this.assetsMap.set(currentId, asset);\r\n        // setImmediate(() => this.eventEmitter.emit(\"asset-created\", asset));\r\n        return asset.assetID = currentId;\r\n    }\r\n    find(id) {\r\n        if (typeof (id) === \"number\")\r\n            return this.assetsMap.get(id);\r\n        else if (typeof (id) === \"string\") {\r\n            for (const asset of this.assetsMap.values())\r\n                if (asset.name === id)\r\n                    return asset;\r\n        }\r\n        return undefined;\r\n    }\r\n    destroy(id) {\r\n        const asset = this.assetsMap.get(id);\r\n        if (!asset)\r\n            return;\r\n        this.assetsMap.delete(id);\r\n        // setImmediate(() => this.eventEmitter.emit(\"asset-destroyed\", asset));\r\n    }\r\n    findAssetsOfType(type) {\r\n        return Array.from(this.assetsMap.values()).filter(asset => asset instanceof type);\r\n    }\r\n    on(event, listener) {\r\n        return this.eventEmitter.on(event, listener);\r\n    }\r\n    off(event, listener) {\r\n        return this.eventEmitter.off(event, listener);\r\n    }\r\n}\r\nexport const AssetManager = new AssetManagerType();\r\n//# sourceMappingURL=asset.js.map","import { Color } from \"../types/color\";\r\nimport { mul } from \"../types/math\";\r\nimport { Rect } from \"../types/rect\";\r\nimport { vec2 } from \"../types/vec2\";\r\nimport { vec3 } from \"../types/vec3\";\r\nexport class DebugProvider {\r\n    drawRay(origin, dir, distance = 1, color = Color.red, overlay = false) {\r\n        this.drawLine(origin, mul(dir, distance).plus(origin), color, overlay);\r\n    }\r\n    drawRect(...args) {\r\n        let min, max, color;\r\n        let overlay = false;\r\n        if (args[0] instanceof Rect) {\r\n            min = args[0].min;\r\n            max = args[0].max;\r\n            color = args[1] || Color.red;\r\n            overlay = args[2] || false;\r\n        }\r\n        else {\r\n            min = args[0];\r\n            max = args[1];\r\n            color = args[2] || Color.red;\r\n            overlay = args[3] || false;\r\n        }\r\n        this.drawLine(vec2(min.x, min.y).toVec3(), vec2(max.x, min.y).toVec3(), color, overlay);\r\n        this.drawLine(vec2(max.x, min.y).toVec3(), vec2(max.x, max.y).toVec3(), color, overlay);\r\n        this.drawLine(vec2(max.x, max.y).toVec3(), vec2(min.x, max.y).toVec3(), color, overlay);\r\n        this.drawLine(vec2(min.x, max.y).toVec3(), vec2(min.x, min.y).toVec3(), color, overlay);\r\n    }\r\n    drawLines(points, color = Color.red, overlay = false) {\r\n        for (let i = 0; i < points.length; i++) {\r\n            this.drawLine(points[i], points[(i + 1) % points.length], color, overlay);\r\n        }\r\n    }\r\n    drawCircle(center, radius, color = Color.red, overlay = false) {\r\n        const edges = 24;\r\n        for (let i = 0; i < edges; i++) {\r\n            const p0 = vec3(Math.cos(i * 2 * Math.PI / edges), Math.sin(i * 2 * Math.PI / edges), 0);\r\n            const p1 = vec3(Math.cos((i + 1) % edges * 2 * Math.PI / edges), Math.sin((i + 1) % edges * 2 * Math.PI / edges), 0);\r\n            this.drawLine(p0.mul(radius).plus(center), p1.mul(radius).plus(center), color, overlay);\r\n        }\r\n    }\r\n}\r\n//# sourceMappingURL=debug.js.map","export class EventEmitter {\r\n    constructor() {\r\n        this.listeners = new Map();\r\n    }\r\n    // on(event: string, listener: EventListener): void\r\n    // on<T extends EventKeys<TEvents>>(event: T, listener: TEvents[T]): void\r\n    on(event, listener) {\r\n        var _a;\r\n        if (!this.listeners.has(event))\r\n            this.listeners.set(event, []);\r\n        (_a = this.listeners.get(event)) === null || _a === void 0 ? void 0 : _a.push(listener);\r\n    }\r\n    // off(event: string, listener: EventListener): void\r\n    // off<T extends EventKeys<TEvents>>(event: T, listener: TEvents[T]): void\r\n    off(event, listener) {\r\n        var _a, _b;\r\n        if (this.listeners.has(event))\r\n            this.listeners.set(event, (_b = (_a = this.listeners.get(event)) === null || _a === void 0 ? void 0 : _a.filter(f => f !== listener)) !== null && _b !== void 0 ? _b : []);\r\n    }\r\n    // emit(event: string, ...args: any[]): void\r\n    // emit<T extends EventKeys<TEvents>>(event: T, ...args: Parameters<TEvents[T]>): void\r\n    emit(event, ...args) {\r\n        var _a;\r\n        (_a = this.listeners.get(event)) === null || _a === void 0 ? void 0 : _a.forEach(f => f(...args));\r\n    }\r\n    with() {\r\n        return this;\r\n    }\r\n}\r\n//# sourceMappingURL=event.js.map","import { GlobalContext } from \"./global\";\r\nimport { panic } from \"../utils/util\";\r\nimport { vec2 } from \"../types/vec2\";\r\nimport { GPUAsset } from \"./asset\";\r\nconst FrameBufferAttachment = {\r\n    canvasOutput: { tex: null, attachPoint: WebGL2RenderingContext.BACK },\r\n    fromRenderTexture: (rt) => ({ tex: rt.glTex() })\r\n};\r\nclass CanvasBuffer {\r\n    get name() { return \"\"; }\r\n    get assetID() { return -1; }\r\n    get width() { return GlobalContext().width; }\r\n    get height() { return GlobalContext().height; }\r\n    get size() { return GlobalContext().renderer.canvasSize; }\r\n    bind() {\r\n        const gl = GlobalContext().gl;\r\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n        gl.viewport(0, 0, this.width, this.height);\r\n    }\r\n    destroy() { }\r\n}\r\nexport class FrameBuffer extends GPUAsset {\r\n    constructor(width = 0, height = 0, ctx = GlobalContext()) {\r\n        super(ctx);\r\n        this.frameBuffer = null;\r\n        this._colorAttachments = [];\r\n        this._depthAttachment = null;\r\n        this.activeBuffers = [];\r\n        this.dirty = true;\r\n        this.size = vec2(Math.floor(width), Math.floor(height));\r\n        this.tryInit(false);\r\n    }\r\n    get width() { return this.size.x; }\r\n    get height() { return this.size.y; }\r\n    get colorAttachments() { return this._colorAttachments; }\r\n    get depthAttachment() { return this._depthAttachment; }\r\n    /** @internal */\r\n    glFBO() {\r\n        this.tryInit(true);\r\n        return this.frameBuffer;\r\n    }\r\n    addColorAttachment(attachment, attachPoit = this._colorAttachments.length) {\r\n        if (attachment.width !== this.size.x || attachment.height !== this.size.y)\r\n            console.warn(`Color attachment size [${attachment.width}, ${attachment.height}] missmatch with framebuffer.`);\r\n        this._colorAttachments[attachPoit] = attachment;\r\n        this.dirty = true;\r\n    }\r\n    setDepthAttachment(attachment) {\r\n        if (attachment.width !== this.size.x || attachment.height !== this.size.y)\r\n            console.warn(`Depth attachment size [${attachment.width}, ${attachment.height}] missmatch with framebuffer.`);\r\n        this._depthAttachment = attachment;\r\n        this.dirty = true;\r\n    }\r\n    reset(width = this.width, height = this.height) {\r\n        this.size.x = width;\r\n        this.size.y = height;\r\n        this._colorAttachments = [];\r\n        this._depthAttachment = null;\r\n        this.dirty = true;\r\n    }\r\n    init() {\r\n        var _a;\r\n        const gl = this.ctx.gl;\r\n        this.frameBuffer = (_a = gl.createFramebuffer()) !== null && _a !== void 0 ? _a : panic(\"Failed to create frame buffer object\");\r\n        return true;\r\n    }\r\n    bind() {\r\n        this.tryInit(true);\r\n        const gl = this.ctx.gl;\r\n        this.activeBuffers = [];\r\n        gl.bindFramebuffer(gl.FRAMEBUFFER, this.frameBuffer);\r\n        for (let i = 0; i < this._colorAttachments.length; i++) {\r\n            if (this._colorAttachments[i]) {\r\n                this._colorAttachments[i].bindFramebuffer(i);\r\n                this.activeBuffers.push(gl.COLOR_ATTACHMENT0 + i);\r\n            }\r\n            else\r\n                gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + i, gl.RENDERBUFFER, null);\r\n        }\r\n        if (this._depthAttachment) {\r\n            this._depthAttachment.bindFramebuffer();\r\n        }\r\n        else\r\n            gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, null);\r\n        gl.viewport(0, 0, this.width, this.height);\r\n        gl.drawBuffers(this.activeBuffers);\r\n    }\r\n    destroy() {\r\n        super.destroy();\r\n        const gl = this.ctx.gl;\r\n        gl.deleteFramebuffer(this.frameBuffer);\r\n    }\r\n}\r\nFrameBuffer.CanvasBuffer = Object.freeze(new CanvasBuffer());\r\n//# sourceMappingURL=frame-buffer.js.map","import { DebugProvider } from \"./debug\";\r\nexport class GLContext {\r\n    constructor() {\r\n        this.gl = null;\r\n        this.width = 0;\r\n        this.height = 0;\r\n        this.assets = null;\r\n        this.renderer = null;\r\n    }\r\n}\r\nlet ctx;\r\nlet debugProvider = new class EmptyDebugProvider extends DebugProvider {\r\n    drawLine(start, end, color) {\r\n        // console.warn(\"No debug provider.\");\r\n    }\r\n};\r\nexport const setGlobalContext = (_ctx) => ctx = _ctx;\r\nexport const GlobalContext = () => ctx;\r\nexport const GL = () => { var _a; return (_a = GlobalContext()) === null || _a === void 0 ? void 0 : _a.gl; };\r\nexport const Debug = (provider) => {\r\n    if (provider)\r\n        debugProvider = provider;\r\n    return debugProvider;\r\n};\r\n//# sourceMappingURL=global.js.map","export * from \"./material\";\r\nexport * from \"./material-type\";\r\nexport * from \"./mesh\";\r\nexport * from \"./renderer\";\r\nexport * from \"./shader\";\r\nexport * from \"./texture\";\r\nexport * from \"./asset\";\r\nexport * from \"./lines\";\r\nexport * from \"./event\";\r\nexport * from \"./array-buffer\";\r\nexport * from \"./render-buffer\";\r\nexport * from \"./frame-buffer\";\r\nexport * from \"./debug\";\r\nexport { TextureFormat } from \"./texture-format\";\r\n//# sourceMappingURL=index.js.map","import { Color } from \"../types/color\";\r\nimport { GL } from \"./global\";\r\nimport { panic, fillArray } from \"../utils/util\";\r\nimport { Asset } from \"./asset\";\r\nexport class Lines extends Asset {\r\n    constructor(gl = GL()) {\r\n        var _a, _b;\r\n        super();\r\n        this._verts = [];\r\n        this._colors = [];\r\n        this._lines = [];\r\n        this.dirty = true;\r\n        this.vertices = new Float32Array(0);\r\n        this.indices = new Uint32Array(0);\r\n        this.name = `Lines_${this.assetID}`;\r\n        this.gl = gl;\r\n        this.VBO = (_a = gl.createBuffer()) !== null && _a !== void 0 ? _a : panic(\"Failed to create vertex buffer.\");\r\n        this.EBO = (_b = gl.createBuffer()) !== null && _b !== void 0 ? _b : panic(\"Failed to create element buffer.\");\r\n    }\r\n    get verts() { return this._verts; }\r\n    set verts(verts) {\r\n        this._verts = verts;\r\n        this.dirty = true;\r\n    }\r\n    get colors() { return this._colors; }\r\n    set colors(colors) {\r\n        this._colors = colors;\r\n        this.dirty = true;\r\n    }\r\n    get lines() { return this._lines; }\r\n    set lines(lines) {\r\n        this._lines = lines;\r\n        this.dirty = true;\r\n    }\r\n    clear() {\r\n        this.verts = [];\r\n        this.colors = [];\r\n        this.lines = [];\r\n    }\r\n    update() {\r\n        if (this.dirty) {\r\n            const gl = this.gl;\r\n            // Prepare VBO data.\r\n            if (this.lines.length % 2 !== 0)\r\n                throw new Error(\"Invalid lines.\");\r\n            if (this.colors.length !== this.verts.length)\r\n                this.colors = [...this.colors, ...fillArray(Color.white, this.verts.length - this.colors.length)];\r\n            this.vertices = new Float32Array(this.verts.flatMap((vert, idx) => [\r\n                ...vert,\r\n                ...this.colors[idx],\r\n            ]));\r\n            if (this.vertices.length != this.verts.length * 7)\r\n                throw new Error(\"Buffer with invalid length.\");\r\n            this.indices = new Uint32Array(this.lines.flat());\r\n            gl.bindBuffer(gl.ARRAY_BUFFER, this.VBO);\r\n            gl.bufferData(gl.ARRAY_BUFFER, this.vertices, gl.DYNAMIC_DRAW);\r\n            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.EBO);\r\n            gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, this.indices, gl.DYNAMIC_DRAW);\r\n            this.dirty = false;\r\n        }\r\n    }\r\n    bind(shader) {\r\n        const gl = this.gl;\r\n        this.update();\r\n        const attributes = shader.attributes;\r\n        // Setup VAO\r\n        const stride = 7 * 4;\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.VBO);\r\n        // vert: vec3\r\n        if (attributes.vert >= 0) {\r\n            gl.vertexAttribPointer(attributes.vert, 3, gl.FLOAT, false, stride, 0);\r\n            gl.enableVertexAttribArray(attributes.vert);\r\n        }\r\n        // color: vec4\r\n        if (attributes.color >= 0) {\r\n            gl.vertexAttribPointer(attributes.color, 4, gl.FLOAT, false, stride, 3 * 4);\r\n            gl.enableVertexAttribArray(attributes.color);\r\n        }\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.EBO);\r\n    }\r\n    destroy() {\r\n        if (this.destroyed)\r\n            return;\r\n        this.gl.deleteBuffer(this.VBO);\r\n        this.gl.deleteBuffer(this.EBO);\r\n        super.destroy();\r\n    }\r\n}\r\nexport class LineBuilder {\r\n    constructor(capacity = 0, gl = GL()) {\r\n        this.verts = [];\r\n        this.colors = [];\r\n        this.lines = [];\r\n        this.gl = gl;\r\n    }\r\n    addLine(line, color = Color.white) {\r\n        const base = this.verts.length;\r\n        const [u, v] = line;\r\n        this.verts.push(u, v);\r\n        this.colors.push(color, color);\r\n        this.lines.push(base, base + 1);\r\n    }\r\n    toLines() {\r\n        const line = new Lines(this.gl);\r\n        line.verts = this.verts;\r\n        line.colors = this.colors;\r\n        line.lines = this.lines;\r\n        line.update();\r\n        return line;\r\n    }\r\n}\r\n//# sourceMappingURL=lines.js.map","import { Material } from \"./material\";\r\n//# sourceMappingURL=material-type.js.map","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nimport { Blending, Culling, DepthTest } from \"./shader\";\r\nimport { Color } from \"../types/color\";\r\nimport \"reflect-metadata\";\r\nimport { GL, GlobalContext } from \"./global\";\r\nimport \"reflect-metadata\";\r\nimport { RenderTexture } from \"./texture\";\r\nimport { Asset } from \"./asset\";\r\nimport { BuiltinUniformNames } from \"../builtin-assets/shaders\";\r\n/**\r\n * Inicate where to get the value from material\r\n */\r\nvar ValueReference;\r\n(function (ValueReference) {\r\n    ValueReference[ValueReference[\"Field\"] = 0] = \"Field\";\r\n    ValueReference[ValueReference[\"Dynamic\"] = 1] = \"Dynamic\";\r\n})(ValueReference || (ValueReference = {}));\r\n// export type MaterialProperties = Map<string, NumericProperty<NumericUnifromTypes> | TextureProperty<TextureUniformTypes>>;\r\nexport class Material extends Asset {\r\n    constructor(shader, gl = GL()) {\r\n        super();\r\n        this.properties = {};\r\n        this.textureCount = 0;\r\n        this.boundTextures = [];\r\n        this.initialized = false;\r\n        this.name = `Material_${this.assetID}`;\r\n        this.gl = gl;\r\n        this._shader = shader;\r\n        this.pipelineStateOverride = Object.assign({}, shader.pipelineStates);\r\n    }\r\n    get shader() { return this._shader; }\r\n    // set shader(value)\r\n    // {\r\n    //     const gl = this.gl;\r\n    //     if (value != this._shader)\r\n    //     {\r\n    //         this._shader = value;\r\n    //         for (const uniformName in this.properties)\r\n    //         {\r\n    //             const loc = this._shader.uniformLocation(uniformName);\r\n    //             this.properties[uniformName].location = loc;\r\n    //         }\r\n    //     }\r\n    // }\r\n    upload(data) {\r\n        this.tryInit(true);\r\n        this.setupPipelineStateOverride();\r\n        for (const uniformName in this.properties) {\r\n            const prop = this.properties[uniformName];\r\n            const value = prop.key\r\n                ? this[prop.key]\r\n                : prop.value;\r\n            if (value !== undefined)\r\n                this.uploadUniform(prop, value);\r\n        }\r\n    }\r\n    // setProp<T extends UniformType>(key: string, uniformName: string, type: T, value: UniformValueType<T>): void\r\n    // setProp<T extends UniformType>(name: string, type: T, value: UniformValueType<T>): void\r\n    setProp(uniformName, type, value) {\r\n        this.tryInit(true);\r\n        const prop = this.getOrCreatePropInfo(uniformName, type);\r\n        if (type !== prop.type) {\r\n            console.warn(\"Uniform type missmatch\");\r\n            return;\r\n        }\r\n        if (prop.key)\r\n            this[prop.key] = value;\r\n        else {\r\n            prop.value = value;\r\n        }\r\n    }\r\n    /**\r\n     * Unbind all render textures from active texture slot due to avoid\r\n     * 'Feedback loop formed between Framebuffer and active Texture' in chrome since version 83\r\n     */\r\n    unbindRenderTextures() {\r\n        this.tryInit(true);\r\n        const gl = this.gl;\r\n        for (let unit = 0; unit < this.boundTextures.length; unit++) {\r\n            const texture = this.boundTextures[unit];\r\n            if (texture instanceof RenderTexture) {\r\n                texture.unbind(unit);\r\n            }\r\n        }\r\n        this.boundTextures.length = 0;\r\n    }\r\n    tryInit(required = false) {\r\n        if (this.initialized)\r\n            return true;\r\n        const gl = this.gl || GL();\r\n        if (!gl) {\r\n            if (required)\r\n                throw new Error(\"Failed to intialize material without global GL context\");\r\n            return false;\r\n        }\r\n        this.gl = gl;\r\n        for (const key in this) {\r\n            const propInfo = getShaderProp(this, key);\r\n            if (!propInfo)\r\n                continue;\r\n            const prop = this.getOrCreatePropInfo(propInfo.name, propInfo.type);\r\n            prop.key = key;\r\n        }\r\n        this.initialized = true;\r\n        return true;\r\n    }\r\n    setUniformDirectly(uniformName, type, value) {\r\n        if (value === undefined)\r\n            throw new Error(\"\");\r\n        this.tryInit(true);\r\n        const prop = this.getOrCreatePropInfo(uniformName, type);\r\n        if (!prop.location)\r\n            return;\r\n        this.uploadUniform(prop, value);\r\n    }\r\n    getOrCreatePropInfo(uniformName, type) {\r\n        let prop = this.properties[uniformName];\r\n        if (prop)\r\n            return prop;\r\n        if (type === \"tex2d\") {\r\n            prop = {\r\n                type: type,\r\n                value: undefined,\r\n                uploaed: undefined,\r\n                location: this.shader.uniformLocation(uniformName),\r\n            };\r\n        }\r\n        else if (type === \"tex2d[]\") {\r\n            prop = {\r\n                type: type,\r\n                value: undefined,\r\n                uploaded: undefined,\r\n                location: this.shader.uniformLocation(uniformName),\r\n                buffer: new Array(),\r\n            };\r\n        }\r\n        else if (type.endsWith(\"[]\"))\r\n            prop = {\r\n                type: type,\r\n                value: undefined,\r\n                uploaded: undefined,\r\n                location: this.shader.uniformLocation(uniformName),\r\n                buffer: new Float32Array(),\r\n            };\r\n        else {\r\n            prop = {\r\n                type: type,\r\n                value: undefined,\r\n                uploaded: undefined,\r\n                location: this.shader.uniformLocation(uniformName),\r\n            };\r\n        }\r\n        this.properties[uniformName] = prop;\r\n        return prop;\r\n    }\r\n    setPipelineStateOverride(settings) {\r\n        let blend = false;\r\n        let blendRGB = [Blending.One, Blending.Zero];\r\n        let blendAlpha = [Blending.One, Blending.OneMinusSrcAlpha];\r\n        if (typeof (settings.blend) === \"number\" && settings.blend !== Blending.Disable) {\r\n            blend = true;\r\n            blendRGB = [settings.blend, settings.blend];\r\n            blendAlpha = [settings.blend, settings.blend];\r\n        }\r\n        else if (settings.blend instanceof Array) {\r\n            blend = true;\r\n            blendRGB = settings.blend;\r\n        }\r\n        if (settings.blendRGB) {\r\n            blend = settings.blend !== false && settings.blend !== Blending.Disable;\r\n            blendRGB = settings.blendRGB;\r\n        }\r\n        if (settings.blendAlpha) {\r\n            blend = settings.blend !== false && settings.blend !== Blending.Disable;\r\n            blendAlpha = settings.blendAlpha;\r\n        }\r\n        this.pipelineStateOverride = {\r\n            depth: settings.depth || DepthTest.Less,\r\n            blend,\r\n            blendRGB,\r\n            blendAlpha,\r\n            zWrite: settings.zWrite === false ? false : true,\r\n            cull: settings.cull || Culling.Back\r\n        };\r\n    }\r\n    setupPipelineStateOverride() {\r\n        const gl = this.gl;\r\n        if (this.pipelineStateOverride.depth === DepthTest.Disable)\r\n            gl.disable(gl.DEPTH_TEST);\r\n        else {\r\n            gl.enable(gl.DEPTH_TEST);\r\n            gl.depthMask(this.pipelineStateOverride.zWrite);\r\n            gl.depthFunc(this.pipelineStateOverride.depth);\r\n        }\r\n        if (!this.pipelineStateOverride.blend)\r\n            gl.disable(gl.BLEND);\r\n        else {\r\n            const [srcRGB, dstRGB] = this.pipelineStateOverride.blendRGB;\r\n            const [srcAlpha, dstAlpha] = this.pipelineStateOverride.blendAlpha;\r\n            gl.enable(gl.BLEND);\r\n            gl.blendFuncSeparate(srcRGB, dstRGB, srcAlpha, dstAlpha);\r\n        }\r\n        if (this.pipelineStateOverride.cull === Culling.Disable)\r\n            gl.disable(gl.CULL_FACE);\r\n        else {\r\n            gl.enable(gl.CULL_FACE);\r\n            gl.cullFace(this.pipelineStateOverride.cull);\r\n            gl.frontFace(gl.CCW);\r\n        }\r\n    }\r\n    uploadUniform(prop, value) {\r\n        var _a;\r\n        const gl = this.gl;\r\n        const ctx = GlobalContext();\r\n        if (!prop.location)\r\n            return false;\r\n        let dirty = false;\r\n        if (prop.uploaded === null && value === null && prop.type !== \"tex2d\")\r\n            return false;\r\n        // switch (prop.type)\r\n        // {\r\n        //     case \"tex2d\":\r\n        //     case \"float\":\r\n        //     case \"int\":\r\n        //         dirty = prop.uploaded !== value;\r\n        //         break;\r\n        //     case \"mat4\":\r\n        //         dirty = !mat4.exactEquals(prop.uploaded as mat4, value as mat4);\r\n        //         break;\r\n        //     default:\r\n        //         dirty = !(prop.uploaded as Vector).equals(value);\r\n        //         break;\r\n        // }\r\n        // if (!dirty)\r\n        //     return false;\r\n        let uploaded = value;\r\n        switch (prop.type) {\r\n            case \"int\":\r\n                gl.uniform1i(prop.location, value);\r\n                break;\r\n            case \"float\":\r\n                gl.uniform1f(prop.location, value);\r\n                break;\r\n            case \"vec2\":\r\n                gl.uniform2fv(prop.location, value);\r\n                break;\r\n            case \"vec3\":\r\n                gl.uniform3fv(prop.location, value);\r\n                break;\r\n            case \"vec4\":\r\n                gl.uniform4fv(prop.location, value);\r\n                break;\r\n            case \"color\":\r\n                gl.uniform4fv(prop.location, value);\r\n                break;\r\n            case \"mat4\":\r\n                gl.uniformMatrix4fv(prop.location, false, value);\r\n                break;\r\n            case \"int[]\":\r\n                value.length && gl.uniform1iv(prop.location, value);\r\n                break;\r\n            case \"float[]\":\r\n                value.length && gl.uniform1fv(prop.location, value);\r\n                break;\r\n            case \"vec2[]\": {\r\n                const length = this.setVectorUniformBuffer(prop, 2, value);\r\n                length && gl.uniform2fv(prop.location, prop.buffer, 0, length);\r\n                break;\r\n            }\r\n            case \"vec3[]\": {\r\n                const length = this.setVectorUniformBuffer(prop, 3, value);\r\n                length && gl.uniform3fv(prop.location, prop.buffer, 0, length);\r\n                break;\r\n            }\r\n            case \"color[]\":\r\n            case \"vec4[]\": {\r\n                const length = this.setVectorUniformBuffer(prop, 4, value);\r\n                length && gl.uniform4fv(prop.location, prop.buffer, 0, length);\r\n                break;\r\n            }\r\n            case \"mat4[]\": {\r\n                const length = this.setVectorUniformBuffer(prop, 16, value);\r\n                length && gl.uniform4fv(prop.location, prop.buffer, 0, length);\r\n                break;\r\n            }\r\n            case \"tex2d\": {\r\n                // Update texture to texture unit instead of update uniform1i\r\n                // Due to performance issue mentioned in https://www.khronos.org/registry/webgl/specs/latest/1.0/#5.14.10\r\n                const texProp = prop;\r\n                value = value || ctx.renderer.assets.textures.default;\r\n                let unit = this.bindNextTexture(value);\r\n                if (texProp.uploaded !== unit) {\r\n                    gl.uniform1i(texProp.location, unit);\r\n                    texProp.uploaded = unit;\r\n                }\r\n                uploaded = unit;\r\n                break;\r\n            }\r\n            case \"tex2d[]\": {\r\n                const texProp = prop;\r\n                const texArray = value;\r\n                let shouldUpload = false;\r\n                const uniformValues = texProp.uploaded || [];\r\n                for (let i = 0; i < texArray.length; i++) {\r\n                    const tex = texArray[i] || ctx.renderer.assets.textures.default;\r\n                    let unit = this.bindNextTexture(tex);\r\n                    if (((_a = texProp.uploaded) === null || _a === void 0 ? void 0 : _a[i]) !== unit)\r\n                        shouldUpload = true;\r\n                    uniformValues[i] = unit;\r\n                }\r\n                if (shouldUpload) {\r\n                    gl.uniform1iv(texProp.location, uniformValues, 0, texArray.length);\r\n                    texProp.uploaded = uniformValues;\r\n                }\r\n                uploaded = uniformValues;\r\n            }\r\n        }\r\n        prop.uploaded = uploaded;\r\n    }\r\n    bindNextTexture(texture) {\r\n        texture.bind(this.boundTextures.length);\r\n        return this.boundTextures.push(texture) - 1;\r\n    }\r\n    setVectorUniformBuffer(prop, elementSize, valueArray) {\r\n        if (prop.buffer.length < elementSize * valueArray.length) {\r\n            prop.buffer = new Float32Array(elementSize * valueArray.length);\r\n        }\r\n        for (let i = 0; i < valueArray.length; i++) {\r\n            prop.buffer.set(valueArray[i], i * elementSize);\r\n        }\r\n        return elementSize * valueArray.length;\r\n    }\r\n}\r\nconst shaderPropMetaKey = Symbol(\"shaderProp\");\r\nexport function shaderProp(name, type) {\r\n    return Reflect.metadata(shaderPropMetaKey, { name: name, type: type });\r\n}\r\nfunction getShaderProp(target, propKey) {\r\n    return Reflect.getMetadata(shaderPropMetaKey, target, propKey);\r\n}\r\nexport function MaterialFromShader(shader) {\r\n    return class Mat extends Material {\r\n        constructor(gl = GL()) {\r\n            super(shader, gl);\r\n        }\r\n    };\r\n}\r\nexport function SimpleTexturedMaterial(shader) {\r\n    class Mat extends MaterialFromShader(shader) {\r\n        constructor() {\r\n            super(...arguments);\r\n            this.texture = null;\r\n            this.color = new Color(1, 1, 1, 1);\r\n        }\r\n    }\r\n    __decorate([\r\n        shaderProp(BuiltinUniformNames.mainTex, \"tex2d\")\r\n    ], Mat.prototype, \"texture\", void 0);\r\n    __decorate([\r\n        shaderProp(BuiltinUniformNames.color, \"color\")\r\n    ], Mat.prototype, \"color\", void 0);\r\n    return Mat;\r\n}\r\n/**\r\n *\r\n * @deprecated\r\n */\r\nexport function materialDefine(constructor) {\r\n    return class extends constructor {\r\n        constructor(...arg) {\r\n            super(...arg);\r\n        }\r\n    };\r\n}\r\n//# sourceMappingURL=material.js.map","import { vec3 } from \"../types/vec3\";\r\nimport { vec2 } from \"../types/vec2\";\r\nimport { Color } from \"../types/color\";\r\nimport { GL, GLContext, GlobalContext } from \"./global\";\r\nimport { panic, fillArray } from \"../utils/util\";\r\nimport { minus, cross } from \"../types/math\";\r\nimport { Asset } from \"./asset\";\r\nimport { BufferStructure, BufferStructureInfo, GLArrayBuffer } from \"./array-buffer\";\r\nconst VertDataFloatCount = 14;\r\nexport const DefaultVertexData = {\r\n    vert: \"vec3\",\r\n    color: \"vec4\",\r\n    normal: \"vec3\",\r\n    uv: \"vec2\",\r\n    uv2: \"vec2\",\r\n};\r\nexport const DefaultVertexStructInfo = BufferStructureInfo.from(DefaultVertexData);\r\nexport const VertexStruct = BufferStructure;\r\nexport class Mesh extends Asset {\r\n    constructor(...args) {\r\n        super(\"Mesh\");\r\n        this.ctx = null;\r\n        this.initialized = false;\r\n        this.vertexArray = null;\r\n        this.elementBuffer = null;\r\n        this.dirty = true;\r\n        this.indices = new Uint32Array();\r\n        if (args.length === 0) {\r\n            this.ctx = GlobalContext();\r\n            this.vertices = new GLArrayBuffer(DefaultVertexData, 0, true, this.ctx);\r\n        }\r\n        else if (args.length === 1) {\r\n            if (args[0] instanceof GLContext) {\r\n                this.ctx = args[0];\r\n                this.vertices = new GLArrayBuffer(DefaultVertexData, 0, true, this.ctx);\r\n            }\r\n            else {\r\n                this.ctx = GlobalContext();\r\n                this.vertices = new GLArrayBuffer(args[0], 0, true, this.ctx);\r\n            }\r\n        }\r\n        else {\r\n            this.ctx = args[1] || GlobalContext();\r\n            this.vertices = new GLArrayBuffer(args[0], 0, true, this.ctx);\r\n        }\r\n        this.tryInit(false);\r\n    }\r\n    /** @deprecated */\r\n    get verts() {\r\n        return this.getVertexDataArray(\"vert\", vec3.zero);\r\n    }\r\n    /** @deprecated */\r\n    set verts(verts) {\r\n        this.setVertexDataArray(\"vert\", verts);\r\n    }\r\n    /** @deprecated */\r\n    get uvs() {\r\n        return this.getVertexDataArray(\"uv\", vec2.zero);\r\n    }\r\n    /** @deprecated */\r\n    set uvs(uvs) {\r\n        this.setVertexDataArray(\"uv\", uvs);\r\n    }\r\n    /** @deprecated */\r\n    get colors() {\r\n        return this.getVertexDataArray(\"color\", () => Color.black);\r\n    }\r\n    /** @deprecated */\r\n    set colors(colors) {\r\n        this.setVertexDataArray(\"color\", colors);\r\n    }\r\n    /** @deprecated */\r\n    get normals() {\r\n        return this.getVertexDataArray(\"uv2\", vec3.zero);\r\n    }\r\n    /** @deprecated */\r\n    set normals(normals) {\r\n        this.setVertexDataArray(\"normal\", normals);\r\n    }\r\n    /** @deprecated */\r\n    get uv2() {\r\n        return this.getVertexDataArray(\"uv2\", vec2.zero);\r\n    }\r\n    /** @deprecated */\r\n    set uv2(uv2) {\r\n        this.setVertexDataArray(\"uv2\", uv2);\r\n    }\r\n    /** @deprecated */\r\n    get triangles() {\r\n        return Array.from(this.indices);\r\n    }\r\n    /** @deprecated */\r\n    set triangles(triangles) {\r\n        if (triangles.length > this.indices.length)\r\n            this.indices = new Uint32Array(triangles.length);\r\n        this.indices.set(triangles);\r\n    }\r\n    getVertexDataArray(key, allocator) {\r\n        return this.vertices.map(vert => allocator().set(vert[key]));\r\n    }\r\n    setVertexDataArray(key, values) {\r\n        const vertices = this.vertices;\r\n        if (values.length >= this.vertices.length)\r\n            this.vertices.resize(values.length);\r\n        values.forEach((value, i) => this.vertices[i][key].set(value));\r\n    }\r\n    resize(vertices, indices, keepData = false) {\r\n        this.vertices.resize(vertices, keepData);\r\n        let oldTriangles = this.indices;\r\n        this.indices = new Uint32Array(indices);\r\n        if (keepData) {\r\n            if (indices < oldTriangles.length) {\r\n                oldTriangles = new Uint32Array(oldTriangles.buffer, 0, indices);\r\n            }\r\n            this.indices.set(oldTriangles, 0);\r\n        }\r\n        this.dirty = true;\r\n    }\r\n    update(upload = false) {\r\n        this.dirty = true;\r\n        this.vertices.markDirty();\r\n        if (upload)\r\n            this.upload();\r\n    }\r\n    upload() {\r\n        this.tryInit(true);\r\n        if (!this.dirty)\r\n            return false;\r\n        const gl = this.ctx.gl;\r\n        this.vertices.upload();\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.elementBuffer);\r\n        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, this.indices, gl.STATIC_DRAW);\r\n        this.dirty = false;\r\n        return true;\r\n    }\r\n    bind() {\r\n        this.upload();\r\n        const gl = this.ctx.gl;\r\n        gl.bindVertexArray(this.vertexArray);\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.elementBuffer);\r\n        return this.indices.length;\r\n    }\r\n    unbind() {\r\n        this.tryInit(true);\r\n        const gl = this.ctx.gl;\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\r\n        gl.bindVertexArray(null);\r\n    }\r\n    // https://schemingdeveloper.com/2014/10/17/better-method-recalculate-normals-unity/\r\n    /**\r\n     * Heavy cost\r\n     * @param angleThreshold\r\n     */\r\n    calculateNormals(angleThreshold = 0) {\r\n        if (this.triangles.length % 3 !== 0)\r\n            throw new Error(\"Invalid triangles.\");\r\n        // this.normals = fillArray(() => vec3(0, 0, 0), this.verts.length);\r\n        for (let i = 0; i < this.triangles.length; i += 3) {\r\n            const a = this.vertices[this.triangles[i + 0]].vert;\r\n            const b = this.vertices[this.triangles[i + 1]].vert;\r\n            const c = this.vertices[this.triangles[i + 2]].vert;\r\n            const u = minus(b, a);\r\n            const v = minus(c, a);\r\n            const normal = cross(u, v).normalize();\r\n            vec3.plus(this.vertices[this.triangles[i + 0]].normal, this.vertices[this.triangles[i + 0]].normal, normal);\r\n            vec3.plus(this.vertices[this.triangles[i + 1]].normal, this.vertices[this.triangles[i + 1]].normal, normal);\r\n            vec3.plus(this.vertices[this.triangles[i + 2]].normal, this.vertices[this.triangles[i + 2]].normal, normal);\r\n        }\r\n        for (let i = 0; i < this.vertices.length; i++) {\r\n            vec3.normalize(this.vertices[i].normal, this.vertices[i].normal);\r\n        }\r\n    }\r\n    destroy() {\r\n        super.destroy();\r\n        if (this.destroyed)\r\n            return;\r\n        this.vertices.destroy();\r\n        const gl = this.ctx.gl;\r\n        gl.deleteBuffer(this.elementBuffer);\r\n        gl.deleteVertexArray(this.vertexArray);\r\n        this.destroyed = true;\r\n        this.initialized = false;\r\n    }\r\n    tryInit(required = false) {\r\n        var _a, _b;\r\n        if (this.initialized)\r\n            return true;\r\n        if (this.destroyed)\r\n            throw new Error(\"Attempt to use destroyed mesh\");\r\n        this.ctx = this.ctx || GlobalContext();\r\n        if (!this.ctx) {\r\n            if (required)\r\n                throw new Error(\"Failed to init mesh without global GL context\");\r\n            return false;\r\n        }\r\n        const gl = this.ctx.gl;\r\n        this.elementBuffer = (_a = gl.createBuffer()) !== null && _a !== void 0 ? _a : panic(\"Failed to create element buffer object.\");\r\n        this.vertexArray = (_b = gl.createVertexArray()) !== null && _b !== void 0 ? _b : panic(\"Failed to create vertex array object.\");\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.elementBuffer);\r\n        gl.bindVertexArray(this.vertexArray);\r\n        this.vertices.bindVertexArray();\r\n        gl.bindVertexArray(null);\r\n        this.initialized = true;\r\n        return true;\r\n    }\r\n}\r\n/** @deprecated */\r\nexport class MeshLegacy extends Asset {\r\n    constructor(gl = GL()) {\r\n        super();\r\n        this._verts = [];\r\n        this._triangles = [];\r\n        this._uvs = [];\r\n        this._uv2 = [];\r\n        this._colors = [];\r\n        this._normals = [];\r\n        this.dirty = true;\r\n        this.uploaded = false;\r\n        this.vertices = new Float32Array(0);\r\n        this.indices = new Uint32Array(0);\r\n        this.VAO = null;\r\n        this.VBO = null;\r\n        this.EBO = null;\r\n        this.initialized = false;\r\n        this.name = `Mesh_${this.assetID}`;\r\n        this.vertexStruct = DefaultVertexStructInfo;\r\n        this.gl = gl;\r\n        this.tryInit(false);\r\n    }\r\n    get verts() { return this._verts; }\r\n    set verts(verts) {\r\n        this._verts = verts;\r\n        this.dirty = true;\r\n    }\r\n    get triangles() { return this._triangles; }\r\n    set triangles(triangles) {\r\n        this._triangles = triangles;\r\n        this.dirty = true;\r\n    }\r\n    get uvs() { return this._uvs; }\r\n    set uvs(uvs) {\r\n        this._uvs = uvs;\r\n        this.dirty = true;\r\n    }\r\n    get uv2() { return this._uv2; }\r\n    set uv2(uv) {\r\n        this._uv2 = uv;\r\n        this.dirty = true;\r\n    }\r\n    get colors() { return this._colors; }\r\n    set colors(colors) {\r\n        this._colors = colors;\r\n        this.dirty = true;\r\n    }\r\n    get normals() { return this._normals; }\r\n    set normals(normals) {\r\n        this._normals = normals;\r\n        this.dirty = true;\r\n    }\r\n    clear() {\r\n        this.verts = [];\r\n        this.uvs = [];\r\n        this.triangles = [];\r\n        this.colors = [];\r\n        this.normals = [];\r\n    }\r\n    // https://schemingdeveloper.com/2014/10/17/better-method-recalculate-normals-unity/\r\n    calculateNormals(angleThreshold = 0) {\r\n        if (this.triangles.length % 3 !== 0)\r\n            throw new Error(\"Invalid triangles.\");\r\n        this.normals = fillArray(() => vec3(0, 0, 0), this.verts.length);\r\n        for (let i = 0; i < this.triangles.length; i += 3) {\r\n            const a = this.verts[this.triangles[i]];\r\n            const b = this.verts[this.triangles[i + 1]];\r\n            const c = this.verts[this.triangles[i + 2]];\r\n            const u = minus(b, a);\r\n            const v = minus(c, a);\r\n            const normal = cross(u, v).normalize();\r\n            this.normals[this.triangles[i + 0]].plus(normal);\r\n            this.normals[this.triangles[i + 1]].plus(normal);\r\n            this.normals[this.triangles[i + 2]].plus(normal);\r\n        }\r\n        for (let i = 0; i < this.normals.length; i++)\r\n            this.normals[i] = this.normals[i].normalize();\r\n    }\r\n    update() {\r\n        if (this.dirty) {\r\n            if (this.triangles.length % 3 !== 0)\r\n                throw new Error(\"Invalid triangles.\");\r\n            if (this.colors.length !== this.verts.length)\r\n                this.colors = [...this.colors, ...fillArray(Color.white, this.verts.length - this.colors.length)];\r\n            if (this.uvs.length !== this.verts.length)\r\n                this.uvs = [...this.uvs, ...fillArray(vec2(0, 0), this.verts.length - this.uvs.length)];\r\n            if (this.uv2.length !== this.verts.length)\r\n                this.uv2 = [...this.uv2, ...fillArray(vec2(0, 0), this.verts.length - this.uv2.length)];\r\n            if (this.normals.length !== this.verts.length)\r\n                this.normals = [...this.normals, ...fillArray(vec3(0, 0, 0), this.verts.length - this.normals.length)];\r\n            this.vertices = new Float32Array(this.verts.flatMap((vert, idx) => [\r\n                ...vert,\r\n                ...this.colors[idx],\r\n                ...this.normals[idx],\r\n                ...this.uvs[idx],\r\n                ...this.uv2[idx],\r\n            ]));\r\n            if (this.vertices.length != this.verts.length * VertDataFloatCount)\r\n                throw new Error(\"Buffer with invalid length.\");\r\n            this.indices = new Uint32Array(this.triangles.flat());\r\n            this.dirty = false;\r\n            this.uploaded = false;\r\n        }\r\n    }\r\n    setup() {\r\n        this.update();\r\n        this.tryInit(true);\r\n        const gl = this.gl;\r\n        if (!this.uploaded) {\r\n            gl.bindBuffer(gl.ARRAY_BUFFER, this.VBO);\r\n            gl.bufferData(gl.ARRAY_BUFFER, this.vertices, gl.STATIC_DRAW);\r\n            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.EBO);\r\n            gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, this.indices, gl.STATIC_DRAW);\r\n            this.uploaded = true;\r\n        }\r\n        return [this.VBO, this.EBO];\r\n    }\r\n    bind(shader) {\r\n        this.setup();\r\n        const gl = this.gl;\r\n        // const attributes = shader._internal().attributes;\r\n        // // Setup VAO\r\n        // const stride = VertDataFloatCount * 4;\r\n        // gl.bindBuffer(gl.ARRAY_BUFFER, this.VBO);\r\n        // // vert: vec3\r\n        // if (attributes.vert >= 0)\r\n        // {\r\n        //     gl.vertexAttribPointer(attributes.vert, 3, gl.FLOAT, false, stride, 0);\r\n        //     gl.enableVertexAttribArray(attributes.vert);\r\n        // }\r\n        // // color: vec4\r\n        // if (attributes.color >= 0)\r\n        // {\r\n        //     gl.vertexAttribPointer(attributes.color, 4, gl.FLOAT, false, stride, 3 * 4);\r\n        //     gl.enableVertexAttribArray(attributes.color);\r\n        // }\r\n        // // uv: vec2\r\n        // if (attributes.uv >= 0)\r\n        // {\r\n        //     gl.vertexAttribPointer(attributes.uv, 2, gl.FLOAT, false, stride, 7 * 4);\r\n        //     gl.enableVertexAttribArray(attributes.uv);\r\n        // }\r\n        // // uv2: vec2\r\n        // if (attributes.uv2 >= 0)\r\n        // {\r\n        //     gl.vertexAttribPointer(attributes.uv2, 2, gl.FLOAT, false, stride, 9 * 4);\r\n        //     gl.enableVertexAttribArray(attributes.uv2);\r\n        // }\r\n        // if (attributes.uv)\r\n        // // normal: vec3\r\n        // if (attributes.normal >= 0)\r\n        // {\r\n        //     gl.vertexAttribPointer(attributes.normal, 3, gl.FLOAT, true, stride, 11 * 4);\r\n        //     gl.enableVertexAttribArray(attributes.normal);\r\n        // }\r\n        // gl.bindBuffer(gl.ARRAY_BUFFER, this.VBO);\r\n        gl.bindVertexArray(this.VAO);\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.EBO);\r\n        // gl.bindVertexArray(shader.vertexArray);\r\n    }\r\n    unbind() {\r\n        const gl = this.gl;\r\n        // gl.bindBuffer(gl.ARRAY_BUFFER, null);\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\r\n        gl.bindVertexArray(null);\r\n    }\r\n    destroy() {\r\n        if (!this.initialized)\r\n            return;\r\n        if (this.destroyed)\r\n            return;\r\n        this.gl.deleteBuffer(this.VBO);\r\n        this.gl.deleteBuffer(this.EBO);\r\n        super.destroy();\r\n    }\r\n    tryInit(required = false) {\r\n        var _a, _b;\r\n        if (this.initialized)\r\n            return true;\r\n        const gl = this.gl || GL();\r\n        if (!gl) {\r\n            if (required)\r\n                throw new Error(\"Failed to init mesh without global GL context\");\r\n            return false;\r\n        }\r\n        this.gl = gl;\r\n        this.VBO = (_a = gl.createBuffer()) !== null && _a !== void 0 ? _a : panic(\"Failed to create vertex buffer.\");\r\n        this.EBO = (_b = gl.createBuffer()) !== null && _b !== void 0 ? _b : panic(\"Failed to create element buffer.\");\r\n        this.initVAO();\r\n        this.initialized = true;\r\n        return true;\r\n    }\r\n    initVAO() {\r\n        var _a;\r\n        const gl = this.gl;\r\n        this.VAO = (_a = gl.createVertexArray()) !== null && _a !== void 0 ? _a : panic(\"Failed to create vertex array object.\");\r\n        gl.bindVertexArray(this.VAO);\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.VBO);\r\n        for (const element of this.vertexStruct.elements) {\r\n            gl.enableVertexAttribArray(element.location);\r\n            gl.vertexAttribPointer(element.location, element.length, gl.FLOAT, false, this.vertexStruct.byteSize, element.byteOffset);\r\n        }\r\n        gl.bindVertexArray(null);\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, null);\r\n    }\r\n}\r\n//# sourceMappingURL=mesh.js.map","import { vec2 } from \"../types/vec2\";\r\nimport { panic } from \"../utils/util\";\r\nimport { GPUAsset } from \"./asset\";\r\nimport { GlobalContext } from \"./global\";\r\nimport { TextureFormat } from \"./texture-format\";\r\nexport class RenderBuffer extends GPUAsset {\r\n    constructor(width, height, format = TextureFormat.RGBA8, multiSampling = 0, ctx = GlobalContext()) {\r\n        super(ctx);\r\n        this.multiSampling = 0;\r\n        this.format = TextureFormat.RGBA8;\r\n        this._glBuf = null;\r\n        this.size = vec2(width, height);\r\n        this.format = format;\r\n        this.multiSampling = multiSampling;\r\n        this.tryInit(false);\r\n    }\r\n    get width() { return this.size.x; }\r\n    // set width(w) { this.size.x = w }\r\n    get height() { return this.size.y; }\r\n    // set height(h) { this.size.y = h }\r\n    /** @internal */\r\n    glBuf() {\r\n        this.tryInit(true);\r\n        return this._glBuf;\r\n    }\r\n    resize(width, height) {\r\n        this.size.x = width;\r\n        this.size.y = height;\r\n        if (!this.initialized)\r\n            return this;\r\n        const gl = this.ctx.gl;\r\n        gl.bindRenderbuffer(gl.RENDERBUFFER, this._glBuf);\r\n        gl.renderbufferStorageMultisample(gl.RENDERBUFFER, this.multiSampling, this.format, this.size.x, this.size.y);\r\n        gl.bindRenderbuffer(gl.RENDERBUFFER, null);\r\n        return this;\r\n    }\r\n    updateParams() {\r\n        this.tryInit(true);\r\n        const gl = this.ctx.gl;\r\n        gl.bindRenderbuffer(gl.RENDERBUFFER, this._glBuf);\r\n        gl.renderbufferStorageMultisample(gl.RENDERBUFFER, this.multiSampling, this.format, this.size.x, this.size.y);\r\n    }\r\n    init() {\r\n        var _a;\r\n        const gl = this.ctx.gl;\r\n        this._glBuf = (_a = gl.createRenderbuffer()) !== null && _a !== void 0 ? _a : panic(\"Failed to create render buffer.\");\r\n        gl.bindRenderbuffer(gl.RENDERBUFFER, this._glBuf);\r\n        gl.renderbufferStorageMultisample(gl.RENDERBUFFER, this.multiSampling, this.format, this.size.x, this.size.y);\r\n        gl.bindRenderbuffer(gl.RENDERBUFFER, null);\r\n        return true;\r\n    }\r\n    bindFramebuffer(attachment) {\r\n        this.tryInit(true);\r\n        const gl = this.ctx.gl;\r\n        gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + attachment, gl.RENDERBUFFER, this._glBuf);\r\n    }\r\n    destroy() {\r\n        super.destroy();\r\n        const gl = this.ctx.gl;\r\n        gl.deleteRenderbuffer(this._glBuf);\r\n    }\r\n}\r\nexport class DepthBuffer extends GPUAsset {\r\n    constructor(width, height, multiSampling = 0, ctx = GlobalContext()) {\r\n        super(ctx);\r\n        this.multiSampling = 0;\r\n        this.format = TextureFormat.DEPTH_COMPONENT;\r\n        this._glBuf = null;\r\n        this.size = vec2(width, height);\r\n        this.format = TextureFormat.DEPTH_COMPONENT;\r\n        this.multiSampling = multiSampling;\r\n        this.tryInit(false);\r\n    }\r\n    /** @internal */\r\n    glBuf() {\r\n        this.tryInit(true);\r\n        return this._glBuf;\r\n    }\r\n    get width() { return this.size.x; }\r\n    set width(w) { this.size.x = w; }\r\n    get height() { return this.size.y; }\r\n    set height(h) { this.size.y = h; }\r\n    updateParams() {\r\n        this.tryInit(true);\r\n        const gl = this.ctx.gl;\r\n        gl.bindRenderbuffer(gl.RENDERBUFFER, this._glBuf);\r\n        gl.renderbufferStorageMultisample(gl.RENDERBUFFER, this.multiSampling, WebGL2RenderingContext.DEPTH_COMPONENT32F, this.size.x, this.size.y);\r\n    }\r\n    init() {\r\n        var _a;\r\n        const gl = this.ctx.gl;\r\n        this._glBuf = (_a = gl.createRenderbuffer()) !== null && _a !== void 0 ? _a : panic(\"Failed to create render buffer.\");\r\n        gl.bindRenderbuffer(gl.RENDERBUFFER, this._glBuf);\r\n        gl.renderbufferStorageMultisample(gl.RENDERBUFFER, this.multiSampling, WebGL2RenderingContext.DEPTH_COMPONENT32F, this.size.x, this.size.y);\r\n        gl.bindRenderbuffer(gl.RENDERBUFFER, null);\r\n        return true;\r\n    }\r\n    bindFramebuffer() {\r\n        this.tryInit(true);\r\n        const gl = this.ctx.gl;\r\n        gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, this._glBuf);\r\n    }\r\n    destroy() {\r\n        super.destroy();\r\n        const gl = this.ctx.gl;\r\n        gl.deleteRenderbuffer(this._glBuf);\r\n    }\r\n}\r\n//# sourceMappingURL=render-buffer.js.map","import { panicNull } from \"../utils/util\";\r\nimport { setGlobalContext, GLContext, GlobalContext } from \"./global\";\r\nimport { Color } from \"../types/color\";\r\nimport { mat4 } from \"../types/mat4\";\r\nimport { FrameBuffer } from \"./frame-buffer\";\r\nimport { RenderTexture, DepthTexture } from \"./texture\";\r\nimport { vec2 } from \"../types/vec2\";\r\nimport { BuiltinAssets } from \"../builtin-assets/assets\";\r\nimport { Rect } from \"../types/rect\";\r\nimport { MeshBuilder } from \"../utils/mesh-builder\";\r\nimport { div } from \"../types/math\";\r\nimport { BuiltinUniformNames } from \"../builtin-assets/shaders\";\r\nimport { ObjectPool } from \"../utils/object-pool\";\r\nimport { DepthBuffer } from \".\";\r\nexport class ZograRenderer {\r\n    constructor(canvasElement, width, height) {\r\n        this.viewProjectionMatrix = mat4.identity();\r\n        this.viewMatrix = mat4.identity();\r\n        this.projectionMatrix = mat4.identity();\r\n        this.target = FrameBuffer.CanvasBuffer;\r\n        this.shader = null;\r\n        this.globalUniforms = new Map();\r\n        this.globalTextures = new Map();\r\n        this.framebufferPool = new ObjectPool((w, h) => new FrameBuffer(w, h));\r\n        this.blitFramebuffer = [new FrameBuffer(), new FrameBuffer()];\r\n        this.canvas = canvasElement;\r\n        this.width = width === undefined ? canvasElement.width : width;\r\n        this.height = height === undefined ? canvasElement.height : height;\r\n        this.canvas.width = this.width;\r\n        this.canvas.height = this.height;\r\n        this.scissor = new Rect(vec2.zero(), vec2(this.width, this.height));\r\n        this.gl = panicNull(this.canvas.getContext(\"webgl2\"), \"WebGL2 is not support on current device.\");\r\n        this.gl.getExtension(\"EXT_color_buffer_float\");\r\n        this.gl.getExtension(\"EXT_color_buffer_half_float\");\r\n        this.gl.getExtension(\"WEBGL_depth_texture\");\r\n        console.log(this.gl.getExtension('WEBGL_depth_texture') || this.gl.getExtension('MOZ_WEBGL_depth_texture') || this.gl.getExtension('WEBKIT_WEBGL_depth_texture'));\r\n        console.log(this.gl.getSupportedExtensions());\r\n        this.ctx = new GLContext();\r\n        Object.assign(this.ctx, {\r\n            gl: this.gl,\r\n            width: this.width,\r\n            height: this.height,\r\n            assets: {},\r\n            renderer: this,\r\n        });\r\n        this.assets = new BuiltinAssets(this.ctx);\r\n        this.ctx.assets = this.assets;\r\n        if (!GlobalContext())\r\n            this.use();\r\n        this.helperAssets = {\r\n            clipBlitMesh: MeshBuilder.ndcQuad(),\r\n            blitMesh: MeshBuilder.ndcTriangle(),\r\n            depthBlitTex: new DepthTexture(this.width, this.height),\r\n        };\r\n    }\r\n    use() {\r\n        setGlobalContext(this.ctx);\r\n    }\r\n    setSize(width, height) {\r\n        width = Math.floor(width);\r\n        height = Math.floor(height);\r\n        this.canvas.width = width;\r\n        this.canvas.height = height;\r\n        this.width = width;\r\n        this.height = height;\r\n        this.ctx.width = width;\r\n        this.ctx.height = height;\r\n    }\r\n    get canvasSize() { return vec2(this.width, this.height); }\r\n    setViewProjection(view, projection) {\r\n        mat4.mul(this.viewProjectionMatrix, projection, view);\r\n    }\r\n    setFramebuffer(colorAttachments, depthAttachment) {\r\n        let newFramebuffer;\r\n        if (colorAttachments === FrameBuffer.CanvasBuffer)\r\n            newFramebuffer = FrameBuffer.CanvasBuffer;\r\n        else if (colorAttachments instanceof FrameBuffer) {\r\n            newFramebuffer = colorAttachments;\r\n        }\r\n        else {\r\n            if (colorAttachments instanceof Array) {\r\n                let width = 0, height = 0;\r\n                if (colorAttachments.length > 0) {\r\n                    width = colorAttachments[0].width;\r\n                    height = colorAttachments[0].height;\r\n                }\r\n                else if (depthAttachment) {\r\n                    width = depthAttachment.width;\r\n                    height = depthAttachment.height;\r\n                }\r\n                const framebuffer = this.getTempFramebuffer(width, height);\r\n                for (let i = 0; i < colorAttachments.length; i++)\r\n                    framebuffer.addColorAttachment(colorAttachments[i], i);\r\n                if (depthAttachment)\r\n                    framebuffer.setDepthAttachment(depthAttachment);\r\n                newFramebuffer = framebuffer;\r\n            }\r\n            else {\r\n                const colorAttachment = colorAttachments;\r\n                const framebuffer = this.getTempFramebuffer(colorAttachment.width, colorAttachment.height);\r\n                framebuffer.addColorAttachment(colorAttachment, 0);\r\n                if (depthAttachment)\r\n                    framebuffer.setDepthAttachment(depthAttachment);\r\n                newFramebuffer = framebuffer;\r\n            }\r\n        }\r\n        if (newFramebuffer !== this.target) {\r\n            this.detachCurrentFramebuffer();\r\n            this.target = newFramebuffer;\r\n        }\r\n        this.scissor.min.set([0, 0]);\r\n        this.scissor.max.set(this.target.size);\r\n        this.target.bind();\r\n    }\r\n    detachCurrentFramebuffer() {\r\n        if (this.target.__isTemp) {\r\n            this.framebufferPool.release(this.target);\r\n        }\r\n    }\r\n    getTempFramebuffer(width, height) {\r\n        const framebuffer = this.framebufferPool.get(width, height);\r\n        framebuffer.__isTemp = true;\r\n        framebuffer.reset(width, height);\r\n        return framebuffer;\r\n    }\r\n    blitCopy(src, dst) {\r\n        const gl = this.gl;\r\n        const [readBuffer, writeBuffer] = this.blitFramebuffer;\r\n        readBuffer.reset(src.width, src.height);\r\n        readBuffer.addColorAttachment(src);\r\n        readBuffer.bind();\r\n        writeBuffer.reset(src.width, src.height);\r\n        // gl.bindFramebuffer(gl.FRAMEBUFFER, readBuffer.glFBO());\r\n        // gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.RENDERBUFFER, renderBuffer.glBuf());\r\n        // gl.bindFramebuffer(gl.FRAMEBUFFER, writeBuffer.glFBO());\r\n        // gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture.glTex(), 0);\r\n        gl.bindFramebuffer(gl.READ_FRAMEBUFFER, readBuffer.glFBO());\r\n        src instanceof RenderTexture\r\n            ? gl.framebufferTexture2D(gl.READ_FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.RENDERBUFFER, src.glTex(), 0)\r\n            : gl.framebufferRenderbuffer(gl.READ_FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.RENDERBUFFER, src.glBuf());\r\n        gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, writeBuffer.glFBO());\r\n        dst instanceof RenderTexture\r\n            ? gl.framebufferTexture2D(gl.DRAW_FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, dst.glTex(), 0)\r\n            : gl.framebufferRenderbuffer(gl.DRAW_FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, dst.glBuf());\r\n        gl.blitFramebuffer(0, 0, src.width, src.height, 0, 0, dst.width, dst.height, gl.COLOR_BUFFER_BIT, gl.NEAREST);\r\n        gl.bindFramebuffer(gl.READ_FRAMEBUFFER, null);\r\n        gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, null);\r\n    }\r\n    blitCopyDepth(src, dst) {\r\n        const gl = this.gl;\r\n        if (src instanceof DepthBuffer) {\r\n            const depthTex = this.helperAssets.depthBlitTex;\r\n            depthTex.resize(src.width, src.height);\r\n            const [readBuffer, writeBuffer] = this.blitFramebuffer;\r\n            readBuffer.reset(src.width, src.height);\r\n            readBuffer.bind();\r\n            writeBuffer.reset(src.width, src.height);\r\n            writeBuffer.bind();\r\n            gl.bindFramebuffer(gl.READ_FRAMEBUFFER, readBuffer.glFBO());\r\n            gl.framebufferRenderbuffer(gl.READ_FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, src.glBuf());\r\n            gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, writeBuffer.glFBO());\r\n            gl.framebufferTexture2D(gl.DRAW_FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.TEXTURE_2D, depthTex.glTex(), 0);\r\n            gl.blitFramebuffer(0, 0, src.width, src.height, 0, 0, dst.width, dst.height, gl.DEPTH_BUFFER_BIT, gl.NEAREST);\r\n            src = depthTex;\r\n        }\r\n        this.blit(src, dst);\r\n    }\r\n    clear(color = Color.black, clearDepth = true) {\r\n        this.target.bind();\r\n        this.setupScissor();\r\n        this.gl.clearColor(color.r, color.g, color.b, color.a);\r\n        this.gl.clearDepth(1.0);\r\n        this.gl.depthMask(clearDepth);\r\n        this.gl.clear(this.gl.COLOR_BUFFER_BIT | this.gl.DEPTH_BUFFER_BIT | this.gl.STENCIL_BUFFER_BIT);\r\n    }\r\n    blit(src, dst, material = this.assets.materials.blitCopy, srcRect, dstRect) {\r\n        const prevTarget = this.target;\r\n        this.setFramebuffer(dst);\r\n        dst = this.target;\r\n        const prevVP = this.viewProjectionMatrix;\r\n        // const prevTarget = this.target;\r\n        let mesh = this.helperAssets.blitMesh;\r\n        let viewport = dst === FrameBuffer.CanvasBuffer ? new Rect(vec2.zero(), this.canvasSize) : new Rect(vec2.zero(), dst.size.clone());\r\n        if (src && (srcRect || dstRect)) {\r\n            viewport = dstRect || viewport;\r\n            if (srcRect) {\r\n                mesh = this.helperAssets.clipBlitMesh;\r\n                let uvMin = div(srcRect.min, src.size);\r\n                let uvMax = div(srcRect.max, src.size);\r\n                mesh.uvs = [\r\n                    vec2(uvMin.x, uvMin.y),\r\n                    vec2(uvMax.x, uvMin.y),\r\n                    vec2(uvMax.x, uvMax.y),\r\n                    vec2(uvMin.x, uvMax.y),\r\n                ];\r\n                mesh.update();\r\n            }\r\n        }\r\n        this.target = dst;\r\n        this.scissor = viewport;\r\n        this.viewProjectionMatrix = mat4.identity();\r\n        if (src)\r\n            material.setProp(BuiltinUniformNames.mainTex, \"tex2d\", src);\r\n        this.drawMesh(mesh, mat4.identity(), material);\r\n        // this.unsetGlobalTexture(BuiltinUniformNames.mainTex);\r\n        this.setFramebuffer(prevTarget);\r\n        this.viewProjectionMatrix = prevVP;\r\n    }\r\n    useShader(shader) {\r\n        // Shader state may be modified by flip texure.\r\n        // if (shader === this.shader)\r\n        //     return;\r\n        const gl = this.gl;\r\n        this.shader = shader;\r\n        shader.use();\r\n        // shader.setupPipelineStates();\r\n    }\r\n    setupTransforms(shader, transformModel) {\r\n        const gl = this.gl;\r\n        const mvp = mat4.mul(this.viewProjectionMatrix, transformModel);\r\n        const mit = mat4.create();\r\n        if (mat4.invert(mit, transformModel))\r\n            mat4.transpose(mit, mit);\r\n        else\r\n            mit.fill(0);\r\n        const mvit = mat4.mul(this.viewMatrix, transformModel);\r\n        if (mat4.invert(mvit, mvit))\r\n            mat4.transpose(mvit, mvit);\r\n        else\r\n            mvit.fill(0);\r\n        shader.setupBuiltinUniform({\r\n            matM: transformModel,\r\n            matVP: this.viewProjectionMatrix,\r\n            matMVP: mvp,\r\n            matM_IT: mit,\r\n            matMV_IT: mvit,\r\n        });\r\n    }\r\n    setupGlobalUniforms(material) {\r\n        for (const val of this.globalUniforms.values()) {\r\n            material.setUniformDirectly(val.name, val.type, val.value);\r\n        }\r\n    }\r\n    drawMeshInstance(mesh, buffer, material, count) {\r\n        if (!material)\r\n            material = this.assets.materials.error;\r\n        const gl = this.gl;\r\n        const data = {\r\n            assets: this.assets,\r\n            gl: gl,\r\n            nextTextureUnit: 0,\r\n            size: vec2(this.width, this.height),\r\n        };\r\n        this.target.bind();\r\n        this.setupScissor();\r\n        this.useShader(material.shader);\r\n        material.upload(data);\r\n        this.setupTransforms(material.shader, mat4.identity());\r\n        const elementCount = mesh.bind();\r\n        buffer.bindVertexArray(true, material.shader.attributes);\r\n        gl.drawElementsInstanced(gl.TRIANGLES, elementCount, gl.UNSIGNED_INT, 0, count);\r\n        buffer.unbindVertexArray(true, material.shader.attributes);\r\n        mesh.unbind();\r\n        material.unbindRenderTextures();\r\n    }\r\n    drawMeshProceduralInstance(mesh, material, count) {\r\n        if (!material)\r\n            material = this.assets.materials.error;\r\n        const gl = this.gl;\r\n        const data = {\r\n            assets: this.assets,\r\n            gl: gl,\r\n            nextTextureUnit: 0,\r\n            size: vec2(this.width, this.height),\r\n        };\r\n        this.target.bind();\r\n        this.setupScissor();\r\n        this.useShader(material.shader);\r\n        material.upload(data);\r\n        this.setupTransforms(material.shader, mat4.identity());\r\n        const elementCount = mesh.bind();\r\n        gl.drawElementsInstanced(gl.TRIANGLES, elementCount, gl.UNSIGNED_INT, 0, count);\r\n        material.unbindRenderTextures();\r\n    }\r\n    drawMesh(mesh, transform, material) {\r\n        if (!material)\r\n            material = this.assets.materials.error;\r\n        const gl = this.gl;\r\n        const data = {\r\n            assets: this.assets,\r\n            gl: gl,\r\n            nextTextureUnit: 0,\r\n            size: vec2(this.width, this.height),\r\n        };\r\n        this.target.bind();\r\n        this.setupScissor();\r\n        this.useShader(material.shader);\r\n        material.upload(data);\r\n        this.setupTransforms(material.shader, transform);\r\n        this.setupGlobalUniforms(material);\r\n        let elementCount = mesh.bind();\r\n        gl.drawElements(gl.TRIANGLES, elementCount, gl.UNSIGNED_INT, 0);\r\n        mesh.unbind();\r\n        material.unbindRenderTextures();\r\n    }\r\n    drawLines(lines, transform, material) {\r\n        const gl = this.gl;\r\n        const data = {\r\n            assets: this.assets,\r\n            gl: gl,\r\n            nextTextureUnit: 0,\r\n            size: vec2(this.width, this.height),\r\n        };\r\n        this.target.bind();\r\n        this.setupScissor();\r\n        this.useShader(material.shader);\r\n        material.upload(data);\r\n        this.setupTransforms(material.shader, transform);\r\n        // this.setupGlobalUniforms(material.shader, data);\r\n        lines.bind(material.shader);\r\n        gl.drawElements(gl.LINES, lines.lines.length, gl.UNSIGNED_INT, 0);\r\n    }\r\n    setGlobalUniform(name, type, value) {\r\n        this.globalUniforms.set(name, {\r\n            name: name,\r\n            type: type,\r\n            value: value,\r\n        });\r\n    }\r\n    unsetGlobalUniform(name) {\r\n        this.globalUniforms.delete(name);\r\n    }\r\n    setupScissor() {\r\n        const gl = this.gl;\r\n        gl.viewport(this.scissor.xMin, this.scissor.yMin, this.scissor.size.x, this.scissor.size.y);\r\n    }\r\n}\r\n//# sourceMappingURL=renderer.js.map","import { panic, panicNull } from \"../utils/util\";\r\nimport { GL } from \"./global\";\r\nimport { BuiltinUniformNames } from \"../builtin-assets/shaders\";\r\nimport { getUniformsLocation } from \"../utils/util\";\r\nimport { Asset } from \"./asset\";\r\nimport { BufferStructureInfo } from \"./array-buffer\";\r\nimport { DefaultVertexData } from \"./mesh\";\r\nexport var DepthTest;\r\n(function (DepthTest) {\r\n    DepthTest[DepthTest[\"Disable\"] = -1] = \"Disable\";\r\n    DepthTest[DepthTest[\"Always\"] = WebGL2RenderingContext.ALWAYS] = \"Always\";\r\n    DepthTest[DepthTest[\"Never\"] = WebGL2RenderingContext.NEVER] = \"Never\";\r\n    DepthTest[DepthTest[\"Less\"] = WebGL2RenderingContext.LESS] = \"Less\";\r\n    DepthTest[DepthTest[\"Equal\"] = WebGL2RenderingContext.EQUAL] = \"Equal\";\r\n    DepthTest[DepthTest[\"LEqual\"] = WebGL2RenderingContext.LEQUAL] = \"LEqual\";\r\n    DepthTest[DepthTest[\"Greater\"] = WebGL2RenderingContext.GREATER] = \"Greater\";\r\n    DepthTest[DepthTest[\"NotEqual\"] = WebGL2RenderingContext.NOTEQUAL] = \"NotEqual\";\r\n    DepthTest[DepthTest[\"GEqual\"] = WebGL2RenderingContext.GEQUAL] = \"GEqual\";\r\n})(DepthTest || (DepthTest = {}));\r\nexport var Blending;\r\n(function (Blending) {\r\n    Blending[Blending[\"Disable\"] = -1] = \"Disable\";\r\n    Blending[Blending[\"Zero\"] = WebGL2RenderingContext.ZERO] = \"Zero\";\r\n    Blending[Blending[\"One\"] = WebGL2RenderingContext.ONE] = \"One\";\r\n    Blending[Blending[\"SrcColor\"] = WebGL2RenderingContext.SRC_COLOR] = \"SrcColor\";\r\n    Blending[Blending[\"OneMinusSrcColor\"] = WebGL2RenderingContext.ONE_MINUS_SRC_COLOR] = \"OneMinusSrcColor\";\r\n    Blending[Blending[\"DstColor\"] = WebGL2RenderingContext.DST_COLOR] = \"DstColor\";\r\n    Blending[Blending[\"OneMinusDstColor\"] = WebGL2RenderingContext.ONE_MINUS_DST_COLOR] = \"OneMinusDstColor\";\r\n    Blending[Blending[\"SrcAlpha\"] = WebGL2RenderingContext.SRC_ALPHA] = \"SrcAlpha\";\r\n    Blending[Blending[\"OneMinusSrcAlpha\"] = WebGL2RenderingContext.ONE_MINUS_SRC_ALPHA] = \"OneMinusSrcAlpha\";\r\n    Blending[Blending[\"DstAlpha\"] = WebGL2RenderingContext.DST_ALPHA] = \"DstAlpha\";\r\n    Blending[Blending[\"OneMinusDstAlpha\"] = WebGL2RenderingContext.ONE_MINUS_DST_ALPHA] = \"OneMinusDstAlpha\";\r\n})(Blending || (Blending = {}));\r\nexport var Culling;\r\n(function (Culling) {\r\n    Culling[Culling[\"Disable\"] = -1] = \"Disable\";\r\n    Culling[Culling[\"Back\"] = WebGL2RenderingContext.BACK] = \"Back\";\r\n    Culling[Culling[\"Front\"] = WebGL2RenderingContext.FRONT] = \"Front\";\r\n    Culling[Culling[\"Both\"] = WebGL2RenderingContext.FRONT_AND_BACK] = \"Both\";\r\n})(Culling || (Culling = {}));\r\nexport const DefaultShaderAttributeNames = {\r\n    vert: \"aPos\",\r\n    color: \"aColor\",\r\n    uv: \"aUV\",\r\n    uv2: \"aUV2\",\r\n    normal: \"aNormal\",\r\n};\r\nexport class Shader extends Asset {\r\n    constructor(vertexShader, fragmentShader, options = {}, gl = GL()) {\r\n        super(options.name);\r\n        /** @internal */\r\n        this.attributes = {};\r\n        this.initialized = false;\r\n        this.gl = null;\r\n        this.program = null;\r\n        this.vertexShader = null;\r\n        this.fragmentShader = null;\r\n        this.pipelineStates = {};\r\n        this.builtinUniformLocations = null;\r\n        this._compiled = false;\r\n        if (!options.name)\r\n            this.name = `Shader_${this.assetID}`;\r\n        this.vertexShaderSource = vertexShader;\r\n        this.fragmentShaderSouce = fragmentShader;\r\n        this.options = options;\r\n        this.gl = gl;\r\n        this.vertexStruct = BufferStructureInfo.from(this.options.vertexStructure || DefaultVertexData);\r\n        this.attributeNames = Object.assign(Object.assign({}, DefaultShaderAttributeNames), options.attributes);\r\n        this.setPipelineStateInternal(this.options);\r\n        this.tryInit();\r\n    }\r\n    get compiled() { return this._compiled; }\r\n    uniformLocation(name) {\r\n        this.tryInit(true);\r\n        return this.gl.getUniformLocation(this.program, name);\r\n    }\r\n    use() {\r\n        this.tryInit(true);\r\n        this.gl.useProgram(this.program);\r\n    }\r\n    setupBuiltinUniform(params) {\r\n        this.tryInit(true);\r\n        const gl = this.gl;\r\n        // gl.useProgram(this.program);\r\n        // console.log(this.builtinUniformLocations.matMVP);\r\n        this.builtinUniformLocations.matM && gl.uniformMatrix4fv(this.builtinUniformLocations.matM, false, params.matM.asMut());\r\n        this.builtinUniformLocations.matVP && gl.uniformMatrix4fv(this.builtinUniformLocations.matVP, false, params.matVP.asMut());\r\n        this.builtinUniformLocations.matMVP && gl.uniformMatrix4fv(this.builtinUniformLocations.matMVP, false, params.matMVP.asMut());\r\n        this.builtinUniformLocations.matM_IT && gl.uniformMatrix4fv(this.builtinUniformLocations.matM_IT, false, params.matM_IT.asMut());\r\n        this.builtinUniformLocations.matMV_IT && gl.uniformMatrix4fv(this.builtinUniformLocations.matMV_IT, false, params.matMV_IT.asMut());\r\n    }\r\n    setPipelineStateInternal(settings) {\r\n        let blend = false;\r\n        let blendRGB = [Blending.One, Blending.Zero];\r\n        let blendAlpha = [Blending.One, Blending.OneMinusSrcAlpha];\r\n        if (typeof (settings.blend) === \"number\" && settings.blend !== Blending.Disable) {\r\n            blend = true;\r\n            blendRGB = [settings.blend, settings.blend];\r\n            blendAlpha = [settings.blend, settings.blend];\r\n        }\r\n        else if (settings.blend instanceof Array) {\r\n            blend = true;\r\n            blendRGB = settings.blend;\r\n        }\r\n        if (settings.blendRGB) {\r\n            blend = settings.blend !== false && settings.blend !== Blending.Disable;\r\n            blendRGB = settings.blendRGB;\r\n        }\r\n        if (settings.blendAlpha) {\r\n            blend = settings.blend !== false && settings.blend !== Blending.Disable;\r\n            blendAlpha = settings.blendAlpha;\r\n        }\r\n        this.pipelineStates = {\r\n            depth: settings.depth || DepthTest.Less,\r\n            blend,\r\n            blendRGB,\r\n            blendAlpha,\r\n            zWrite: settings.zWrite === false ? false : true,\r\n            cull: settings.cull || Culling.Back\r\n        };\r\n    }\r\n    _internal() {\r\n        this.tryInit(true);\r\n        return {\r\n            options: this.options,\r\n        };\r\n    }\r\n    tryInit(required = false) {\r\n        if (this.initialized)\r\n            return true;\r\n        const gl = this.gl || GL();\r\n        if (!gl) {\r\n            return required\r\n                ? panic(\"Failed to init shader without a global GL context\")\r\n                : false;\r\n        }\r\n        this.gl = gl;\r\n        this.program = panicNull(gl.createProgram(), \"Failed to create shader program\");\r\n        this.vertexShader = panicNull(gl.createShader(gl.VERTEX_SHADER), \"Failed to create vertex shader\");\r\n        this.fragmentShader = panicNull(gl.createShader(gl.FRAGMENT_SHADER), \"Failed to create fragment shader\");\r\n        this.compile();\r\n        gl.useProgram(this.program);\r\n        // const attributes = this.options.attributes || DefaultShaderAttributes;\r\n        const attributeNames = Object.assign(Object.assign({}, DefaultShaderAttributeNames), this.options.attributes);\r\n        this.attributes = {};\r\n        for (const key in attributeNames) {\r\n            this.attributes[key] = gl.getAttribLocation(this.program, attributeNames[key]);\r\n        }\r\n        this.builtinUniformLocations = getUniformsLocation(gl, this.program, BuiltinUniformNames);\r\n        this.initialized = true;\r\n        return true;\r\n    }\r\n    compile() {\r\n        this.gl.shaderSource(this.vertexShader, this.vertexShaderSource);\r\n        this.gl.compileShader(this.vertexShader);\r\n        if (!this.gl.getShaderParameter(this.vertexShader, this.gl.COMPILE_STATUS)) {\r\n            //this.gl.deleteShader(this.vertexShader);\r\n            throw new Error(\"Failed to compile vertex shader:\\r\\n\" + this.gl.getShaderInfoLog(this.vertexShader));\r\n        }\r\n        this.gl.shaderSource(this.fragmentShader, this.fragmentShaderSouce);\r\n        this.gl.compileShader(this.fragmentShader);\r\n        if (!this.gl.getShaderParameter(this.fragmentShader, this.gl.COMPILE_STATUS)) {\r\n            //this.gl.deleteShader(this.fragmentShader);\r\n            throw new Error(\"Failed to compile fragment shader:\\r\\n\" + this.gl.getShaderInfoLog(this.fragmentShader));\r\n        }\r\n        this.gl.attachShader(this.program, this.vertexShader);\r\n        this.gl.attachShader(this.program, this.fragmentShader);\r\n        for (const element of this.vertexStruct.elements) {\r\n            if (this.attributeNames[element.key])\r\n                this.gl.bindAttribLocation(this.program, element.location, this.attributeNames[element.key]);\r\n        }\r\n        this.gl.linkProgram(this.program);\r\n        if (!this.gl.getProgramParameter(this.program, this.gl.LINK_STATUS)) {\r\n            throw new Error(\"Failed to link shader program:\\r\\n\" + this.gl.getProgramInfoLog(this.program));\r\n        }\r\n    }\r\n}\r\n//# sourceMappingURL=shader.js.map","export var TextureFormat;\r\n(function (TextureFormat) {\r\n    TextureFormat[TextureFormat[\"RGB\"] = WebGL2RenderingContext.RGB] = \"RGB\";\r\n    TextureFormat[TextureFormat[\"RGBA\"] = WebGL2RenderingContext.RGBA] = \"RGBA\";\r\n    TextureFormat[TextureFormat[\"LUMINANCE_ALPHA\"] = WebGL2RenderingContext.LUMINANCE_ALPHA] = \"LUMINANCE_ALPHA\";\r\n    TextureFormat[TextureFormat[\"LUMINANCE\"] = WebGL2RenderingContext.LUMINANCE] = \"LUMINANCE\";\r\n    TextureFormat[TextureFormat[\"ALPHA\"] = WebGL2RenderingContext.ALPHA] = \"ALPHA\";\r\n    TextureFormat[TextureFormat[\"R8\"] = WebGL2RenderingContext.R8] = \"R8\";\r\n    TextureFormat[TextureFormat[\"R16F\"] = WebGL2RenderingContext.R16F] = \"R16F\";\r\n    TextureFormat[TextureFormat[\"R32F\"] = WebGL2RenderingContext.R32F] = \"R32F\";\r\n    TextureFormat[TextureFormat[\"R8UI\"] = WebGL2RenderingContext.R8UI] = \"R8UI\";\r\n    TextureFormat[TextureFormat[\"RG8\"] = WebGL2RenderingContext.RG8] = \"RG8\";\r\n    TextureFormat[TextureFormat[\"RG16F\"] = WebGL2RenderingContext.RG16F] = \"RG16F\";\r\n    TextureFormat[TextureFormat[\"RG32F\"] = WebGL2RenderingContext.RG32F] = \"RG32F\";\r\n    TextureFormat[TextureFormat[\"RG8UI\"] = WebGL2RenderingContext.RG8UI] = \"RG8UI\";\r\n    TextureFormat[TextureFormat[\"RGB8\"] = WebGL2RenderingContext.RGB8] = \"RGB8\";\r\n    TextureFormat[TextureFormat[\"SRGB8\"] = WebGL2RenderingContext.SRGB8] = \"SRGB8\";\r\n    TextureFormat[TextureFormat[\"RGB565\"] = WebGL2RenderingContext.RGB565] = \"RGB565\";\r\n    TextureFormat[TextureFormat[\"R11F_G11F_B10F\"] = WebGL2RenderingContext.R11F_G11F_B10F] = \"R11F_G11F_B10F\";\r\n    TextureFormat[TextureFormat[\"RGB9_E5\"] = WebGL2RenderingContext.RGB9_E5] = \"RGB9_E5\";\r\n    TextureFormat[TextureFormat[\"RGB16F\"] = WebGL2RenderingContext.RGB16F] = \"RGB16F\";\r\n    TextureFormat[TextureFormat[\"RGB32F\"] = WebGL2RenderingContext.RGB32F] = \"RGB32F\";\r\n    TextureFormat[TextureFormat[\"RGB8UI\"] = WebGL2RenderingContext.RGB8UI] = \"RGB8UI\";\r\n    TextureFormat[TextureFormat[\"RGBA8\"] = WebGL2RenderingContext.RGBA8] = \"RGBA8\";\r\n    TextureFormat[TextureFormat[\"SRGB8_ALPHA8\"] = WebGL2RenderingContext.SRGB8_ALPHA8] = \"SRGB8_ALPHA8\";\r\n    TextureFormat[TextureFormat[\"RGB5_A1\"] = WebGL2RenderingContext.RGB5_A1] = \"RGB5_A1\";\r\n    TextureFormat[TextureFormat[\"RGB10_A2\"] = WebGL2RenderingContext.RGB10_A2] = \"RGB10_A2\";\r\n    TextureFormat[TextureFormat[\"RGBA4\"] = WebGL2RenderingContext.RGBA4] = \"RGBA4\";\r\n    TextureFormat[TextureFormat[\"RGBA16F\"] = WebGL2RenderingContext.RGBA16F] = \"RGBA16F\";\r\n    TextureFormat[TextureFormat[\"RGBA32F\"] = WebGL2RenderingContext.RGBA32F] = \"RGBA32F\";\r\n    TextureFormat[TextureFormat[\"RGBA8UI\"] = WebGL2RenderingContext.RGBA8UI] = \"RGBA8UI\";\r\n    TextureFormat[TextureFormat[\"DEPTH_COMPONENT\"] = WebGL2RenderingContext.DEPTH_COMPONENT] = \"DEPTH_COMPONENT\";\r\n    TextureFormat[TextureFormat[\"DEPTH_STENCIL\"] = WebGL2RenderingContext.DEPTH_STENCIL] = \"DEPTH_STENCIL\";\r\n    TextureFormat[TextureFormat[\"DEPTH24_STENCIL8\"] = WebGL2RenderingContext.DEPTH24_STENCIL8] = \"DEPTH24_STENCIL8\";\r\n    TextureFormat[TextureFormat[\"DEPTH32F_STENCIL8\"] = WebGL2RenderingContext.DEPTH32F_STENCIL8] = \"DEPTH32F_STENCIL8\";\r\n    TextureFormat[TextureFormat[\"DEPTH_COMPONENT24\"] = WebGL2RenderingContext.DEPTH_COMPONENT24] = \"DEPTH_COMPONENT24\";\r\n    TextureFormat[TextureFormat[\"DEPTH_COMPONENT32F\"] = WebGL2RenderingContext.DEPTH_COMPONENT32F] = \"DEPTH_COMPONENT32F\";\r\n})(TextureFormat || (TextureFormat = {}));\r\n;\r\n// Reference: https://www.khronos.org/registry/webgl/specs/latest/2.0/#TEXTURE_TYPES_FORMATS_FROM_DOM_ELEMENTS_TABLE\r\nexport function mapGLFormat(gl, format) {\r\n    const map = {\r\n        [TextureFormat.RGB]: [gl.RGB, gl.RGB, gl.UNSIGNED_BYTE],\r\n        [TextureFormat.RGBA]: [gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE],\r\n        [TextureFormat.LUMINANCE_ALPHA]: [gl.LUMINANCE_ALPHA, gl.LUMINANCE_ALPHA, gl.UNSIGNED_BYTE],\r\n        [TextureFormat.LUMINANCE]: [gl.LUMINANCE, gl.LUMINANCE, gl.UNSIGNED_BYTE],\r\n        [TextureFormat.ALPHA]: [gl.ALPHA, gl.ALPHA, gl.UNSIGNED_BYTE],\r\n        [TextureFormat.R8]: [gl.R8, gl.RED, gl.UNSIGNED_BYTE],\r\n        [TextureFormat.R16F]: [gl.R16F, gl.RED, gl.HALF_FLOAT],\r\n        [TextureFormat.R32F]: [gl.R32F, gl.RED, gl.FLOAT],\r\n        [TextureFormat.R8UI]: [gl.R8UI, gl.RED_INTEGER, gl.UNSIGNED_BYTE],\r\n        [TextureFormat.RG8]: [gl.RG8, gl.RG, gl.UNSIGNED_BYTE],\r\n        [TextureFormat.RG16F]: [gl.RG16F, gl.RG, gl.HALF_FLOAT],\r\n        [TextureFormat.RG32F]: [gl.RG32F, gl.RG, gl.FLOAT],\r\n        [TextureFormat.RG8UI]: [gl.RG8UI, gl.RG_INTEGER, gl.UNSIGNED_BYTE],\r\n        [TextureFormat.RGB8]: [gl.RGB8, gl.RGB, gl.UNSIGNED_BYTE],\r\n        [TextureFormat.SRGB8]: [gl.SRGB8, gl.RGB, gl.UNSIGNED_BYTE],\r\n        [TextureFormat.RGB565]: [gl.RGB565, gl.RGB, gl.UNSIGNED_BYTE],\r\n        [TextureFormat.R11F_G11F_B10F]: [gl.R11F_G11F_B10F, gl.RGB, gl.UNSIGNED_INT_10F_11F_11F_REV],\r\n        [TextureFormat.RGB9_E5]: [gl.RGB9_E5, gl.RGB, gl.HALF_FLOAT],\r\n        [TextureFormat.RGB16F]: [gl.RGB16F, gl.RGB, gl.HALF_FLOAT],\r\n        [TextureFormat.RGB32F]: [gl.RGB32F, gl.RGB, gl.FLOAT],\r\n        [TextureFormat.RGB8UI]: [gl.RGB8UI, gl.RGB_INTEGER, gl.UNSIGNED_BYTE],\r\n        [TextureFormat.RGBA8]: [gl.RGBA8, gl.RGBA, gl.UNSIGNED_BYTE],\r\n        [TextureFormat.SRGB8_ALPHA8]: [gl.SRGB8_ALPHA8, gl.RGBA, gl.UNSIGNED_BYTE],\r\n        [TextureFormat.RGB5_A1]: [gl.RGB5_A1, gl.RGBA, gl.UNSIGNED_BYTE],\r\n        [TextureFormat.RGB10_A2]: [gl.RGB10_A2, gl.RGBA, gl.UNSIGNED_INT_2_10_10_10_REV],\r\n        [TextureFormat.RGBA4]: [gl.RGBA4, gl.RGBA, gl.UNSIGNED_BYTE],\r\n        [TextureFormat.RGBA16F]: [gl.RGBA16F, gl.RGBA, gl.HALF_FLOAT],\r\n        [TextureFormat.RGBA32F]: [gl.RGBA32F, gl.RGBA, gl.FLOAT],\r\n        [TextureFormat.RGBA8UI]: [gl.RGBA8UI, gl.RGBA_INTEGER, gl.UNSIGNED_BYTE],\r\n        [TextureFormat.DEPTH_COMPONENT]: [gl.DEPTH_COMPONENT, gl.DEPTH_COMPONENT, gl.UNSIGNED_INT],\r\n        [TextureFormat.DEPTH_STENCIL]: [gl.DEPTH_STENCIL, gl.DEPTH_COMPONENT, gl.UNSIGNED_INT],\r\n        [TextureFormat.DEPTH_COMPONENT24]: [gl.DEPTH_COMPONENT24, gl.DEPTH_COMPONENT, gl.UNSIGNED_INT],\r\n        [TextureFormat.DEPTH_COMPONENT32F]: [gl.DEPTH_COMPONENT32F, gl.DEPTH_COMPONENT, gl.FLOAT],\r\n    };\r\n    return map[format];\r\n}\r\n//# sourceMappingURL=texture-format.js.map","import { GlobalContext } from \"./global\";\r\nimport { TextureFormat, mapGLFormat } from \"./texture-format\";\r\nimport { panic } from \"../utils/util\";\r\nimport { Asset } from \"./asset\";\r\nimport { BuiltinUniformNames } from \"../builtin-assets/shaders\";\r\nimport { vec2 } from \"../types/vec2\";\r\nimport { imageResize } from \"../utils/image-sizing\";\r\nimport { FrameBuffer } from \"./frame-buffer\";\r\nexport var FilterMode;\r\n(function (FilterMode) {\r\n    FilterMode[FilterMode[\"Linear\"] = WebGL2RenderingContext.LINEAR] = \"Linear\";\r\n    FilterMode[FilterMode[\"Nearest\"] = WebGL2RenderingContext.NEAREST] = \"Nearest\";\r\n})(FilterMode || (FilterMode = {}));\r\nexport var WrapMode;\r\n(function (WrapMode) {\r\n    WrapMode[WrapMode[\"Repeat\"] = WebGL2RenderingContext.REPEAT] = \"Repeat\";\r\n    WrapMode[WrapMode[\"Clamp\"] = WebGL2RenderingContext.CLAMP_TO_EDGE] = \"Clamp\";\r\n    WrapMode[WrapMode[\"Mirror\"] = WebGL2RenderingContext.MIRRORED_REPEAT] = \"Mirror\";\r\n})(WrapMode || (WrapMode = {}));\r\nexport class Texture extends Asset {\r\n}\r\nexport var TextureResizing;\r\n(function (TextureResizing) {\r\n    TextureResizing[TextureResizing[\"Discard\"] = 0] = \"Discard\";\r\n    TextureResizing[TextureResizing[\"Stretch\"] = 1] = \"Stretch\";\r\n    TextureResizing[TextureResizing[\"Cover\"] = 2] = \"Cover\";\r\n    TextureResizing[TextureResizing[\"Contain\"] = 3] = \"Contain\";\r\n    TextureResizing[TextureResizing[\"KeepLower\"] = 4] = \"KeepLower\";\r\n    TextureResizing[TextureResizing[\"KeepHigher\"] = 5] = \"KeepHigher\";\r\n    TextureResizing[TextureResizing[\"Center\"] = 6] = \"Center\";\r\n})(TextureResizing || (TextureResizing = {}));\r\nclass TextureBase extends Asset {\r\n    constructor(width, height, format = TextureFormat.RGBA, filterMode = FilterMode.Linear, ctx = GlobalContext()) {\r\n        super();\r\n        this.autoMipmap = true;\r\n        this.wrapMode = WrapMode.Repeat;\r\n        this._glTex = null;\r\n        this.initialized = false;\r\n        this.created = false;\r\n        this.name = `Texture_${this.assetID}`;\r\n        this.ctx = ctx;\r\n        this.format = format;\r\n        this.width = width;\r\n        this.height = height;\r\n        this.filterMode = filterMode;\r\n        this.tryInit(false);\r\n    }\r\n    get size() { return vec2(this.width, this.height); }\r\n    glTex() {\r\n        this.create();\r\n        return this._glTex;\r\n    }\r\n    bind(unit) {\r\n        this.create();\r\n        const gl = this.ctx.gl;\r\n        gl.activeTexture(gl.TEXTURE0 + unit);\r\n        gl.bindTexture(gl.TEXTURE_2D, this._glTex);\r\n        // gl.uniform1i(location, data.nextTextureUnit);\r\n        // data.nextTextureUnit++;\r\n    }\r\n    unbind(unit) {\r\n        this.create();\r\n        const gl = this.ctx.gl;\r\n        gl.activeTexture(gl.TEXTURE0 + unit);\r\n        gl.bindTexture(gl.TEXTURE_2D, null);\r\n    }\r\n    destroy() {\r\n        if (!this.initialized || this.destroyed)\r\n            return;\r\n        const gl = this.ctx.gl;\r\n        gl.deleteTexture(this._glTex);\r\n        super.destroy();\r\n    }\r\n    resize(width, height, textureContent = TextureResizing.Discard) {\r\n        this.tryInit(true);\r\n        const gl = this.ctx.gl;\r\n        let oldTex = TextureBase.wrapGlTex(this._glTex, this.width, this.height, this.format, this.filterMode, this.ctx);\r\n        let newTex = new RenderTexture(width, height, false, this.format, this.filterMode, this.ctx);\r\n        newTex.wrapMode = this.wrapMode;\r\n        newTex.autoMipmap = this.autoMipmap;\r\n        newTex.create();\r\n        newTex.updateParameters();\r\n        const prevSize = this.size;\r\n        this.width = width;\r\n        this.height = height;\r\n        switch (textureContent) {\r\n            case TextureResizing.Discard:\r\n                break;\r\n            default:\r\n                const [srcRect, dstrEect] = imageResize(prevSize, newTex.size, textureContent);\r\n                this.ctx.renderer.blit(oldTex, newTex, this.ctx.assets.materials.blitCopy, srcRect, dstrEect);\r\n                break;\r\n        }\r\n        if (this.autoMipmap)\r\n            newTex.generateMipmap();\r\n        this._glTex = newTex._glTex;\r\n        gl.deleteTexture(oldTex._glTex);\r\n        return this;\r\n    }\r\n    generateMipmap() {\r\n        this.create();\r\n        const gl = this.ctx.gl;\r\n        gl.bindTexture(gl.TEXTURE_2D, this._glTex);\r\n        gl.generateMipmap(gl.TEXTURE_2D);\r\n    }\r\n    updateParameters() {\r\n        this.create();\r\n        const gl = this.ctx.gl;\r\n        gl.bindTexture(gl.TEXTURE_2D, this._glTex);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, this.filterMode);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, this.filterMode);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, this.wrapMode);\r\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, this.wrapMode);\r\n    }\r\n    /**\r\n     * Create & allocate texture if not\r\n     */\r\n    create() {\r\n        if (this.created)\r\n            return;\r\n        this.tryInit(true);\r\n        const gl = this.ctx.gl;\r\n        gl.bindTexture(gl.TEXTURE_2D, this._glTex);\r\n        const [internalFormat, format, type] = mapGLFormat(gl, this.format);\r\n        gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, this.width, this.height, 0, format, type, null);\r\n        this.created = true;\r\n        this.updateParameters();\r\n        gl.bindTexture(gl.TEXTURE_2D, null);\r\n    }\r\n    setData(pixels) {\r\n        this.create();\r\n        const gl = this.ctx.gl;\r\n        gl.bindTexture(gl.TEXTURE_2D, this._glTex);\r\n        flipTexture(this.ctx, this._glTex, pixels, this.width, this.height, this.format, this.filterMode, this.wrapMode, 0);\r\n    }\r\n    tryInit(required = false) {\r\n        var _a;\r\n        if (this.initialized)\r\n            return true;\r\n        const ctx = this.ctx || GlobalContext();\r\n        if (!ctx) {\r\n            if (required)\r\n                throw new Error(\"Failed to initialize texture without a global GL context\");\r\n            return false;\r\n        }\r\n        const gl = ctx.gl;\r\n        this._glTex = (_a = gl.createTexture()) !== null && _a !== void 0 ? _a : panic(\"Failed to create texture.\");\r\n        this.initialized = true;\r\n        return true;\r\n    }\r\n    static wrapGlTex(glTex, width, height, format = TextureFormat.RGBA, filterMode = FilterMode.Linear, ctx = GlobalContext()) {\r\n        var texture = new TextureBase(width, height, format, filterMode, ctx);\r\n        texture._glTex = glTex;\r\n        texture.initialized = true;\r\n        texture.created = true;\r\n        return texture;\r\n    }\r\n}\r\nexport class Texture2D extends TextureBase {\r\n    constructor(width = 0, height = 0, format = TextureFormat.RGBA, filterMode = FilterMode.Linear, ctx = GlobalContext()) {\r\n        super(width, height, format, filterMode, ctx);\r\n    }\r\n    setData(pixels) {\r\n        if (pixels.width !== undefined && pixels.height !== undefined) {\r\n            pixels = pixels;\r\n            this.width = pixels.width;\r\n            this.height = pixels.height;\r\n        }\r\n        super.setData(pixels);\r\n    }\r\n    clone() {\r\n        if (!this.created)\r\n            this.create();\r\n        let rt = new RenderTexture(this.width, this.height, false, this.format, this.filterMode, this.ctx);\r\n        this.ctx.renderer.blit(this, rt);\r\n        let tex = new Texture2D(this.width, this.height, this.format, this.filterMode, this.ctx);\r\n        tex._glTex = rt.glTex();\r\n        tex.initialized = true;\r\n        tex.created = true;\r\n        return tex;\r\n    }\r\n}\r\nexport class DepthTexture extends TextureBase {\r\n    constructor(width, height, ctx = GlobalContext()) {\r\n        super(width, height, TextureFormat.DEPTH_COMPONENT32F, FilterMode.Nearest, ctx);\r\n        this.autoMipmap = false;\r\n    }\r\n    bindFramebuffer() {\r\n        this.create();\r\n        const gl = this.ctx.gl;\r\n        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.DEPTH_COMPONENT32F, gl.TEXTURE_2D, this._glTex, 0);\r\n    }\r\n}\r\nexport class RenderTexture extends TextureBase {\r\n    constructor(width, height, depth = false, format = TextureFormat.RGBA, filterMode = FilterMode.Linear, ctx = GlobalContext()) {\r\n        super(width, height, format, filterMode, ctx);\r\n        this.depthTexture = null;\r\n        if (depth) {\r\n            this.depthTexture = new DepthTexture(width, height, ctx);\r\n        }\r\n    }\r\n    setData(pixels) {\r\n        super.setData(pixels);\r\n    }\r\n    destroy() {\r\n        var _a;\r\n        if (!this.initialized || this.destroyed)\r\n            return;\r\n        (_a = this.depthTexture) === null || _a === void 0 ? void 0 : _a.destroy();\r\n        super.destroy();\r\n    }\r\n    bindFramebuffer(attachment) {\r\n        this.create();\r\n        const gl = this.ctx.gl;\r\n        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + attachment, gl.TEXTURE_2D, this._glTex, 0);\r\n    }\r\n    createFramebuffer() {\r\n        this.create();\r\n        const fbo = new FrameBuffer(this.width, this.height);\r\n        fbo.addColorAttachment(this, 0);\r\n        return fbo;\r\n    }\r\n}\r\nfunction flipTexture(ctx, dst, src, width, height, texFormat, filterMode, wrapMode, mipmapLevel) {\r\n    var _a, _b;\r\n    const gl = ctx.gl;\r\n    const renderer = ctx.renderer;\r\n    const srcTex = (_a = gl.createTexture()) !== null && _a !== void 0 ? _a : panic(\"Failed to create texture.\");\r\n    const [internalFormat, format, type] = mapGLFormat(gl, texFormat);\r\n    gl.bindTexture(gl.TEXTURE_2D, srcTex);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, wrapMode);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, wrapMode);\r\n    if (src.width !== undefined && src.height !== undefined) {\r\n        src = src;\r\n        gl.texImage2D(gl.TEXTURE_2D, mipmapLevel, internalFormat, format, type, src);\r\n    }\r\n    else {\r\n        src = src;\r\n        gl.texImage2D(gl.TEXTURE_2D, mipmapLevel, internalFormat, width, height, 0, format, type, src);\r\n    }\r\n    const fbo = (_b = gl.createFramebuffer()) !== null && _b !== void 0 ? _b : panic(\"Failed to create frame buffer\");\r\n    gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);\r\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, dst, 0);\r\n    gl.viewport(0, 0, width, height);\r\n    gl.drawBuffers([gl.COLOR_ATTACHMENT0]);\r\n    gl.disable(gl.CULL_FACE);\r\n    const shader = ctx.assets.shaders.FlipTexture;\r\n    shader.use();\r\n    gl.activeTexture(gl.TEXTURE0);\r\n    gl.bindTexture(gl.TEXTURE_2D, srcTex);\r\n    gl.uniform1i(shader.uniformLocation(BuiltinUniformNames.mainTex), 0);\r\n    const mesh = ctx.assets.meshes.screenQuad;\r\n    mesh.bind();\r\n    gl.drawElements(gl.TRIANGLE_STRIP, mesh.indices.length, gl.UNSIGNED_INT, 0);\r\n    gl.activeTexture(gl.TEXTURE0);\r\n    gl.bindTexture(gl.TEXTURE_2D, null);\r\n    gl.deleteFramebuffer(fbo);\r\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n    gl.deleteTexture(srcTex);\r\n}\r\n//# sourceMappingURL=texture.js.map","export * from \"./types\";\r\nexport * from \"./core\";\r\nexport * from \"./plugins\";\r\nexport * from \"./utils\";\r\nexport { GLContext, GlobalContext, Debug } from \"./core/global\";\r\n//# sourceMappingURL=index.js.map","import { GlobalContext } from \"../../core/global\";\r\nexport * from \"./types\";\r\n// const importers = {\r\n//     img: TextureImporter,\r\n// };\r\nexport class AssetsImporter {\r\n    constructor(importers) {\r\n        this.importers = importers;\r\n    }\r\n    async url(url, ctx = GlobalContext()) {\r\n        const buffer = await fetch(url).then(r => r.arrayBuffer());\r\n        return await this.buffer(buffer, ctx);\r\n    }\r\n    async blob(blob, ctx = GlobalContext()) {\r\n        const buffer = await blob.arrayBuffer();\r\n        return await this.buffer(buffer, ctx);\r\n    }\r\n    async buffer(buffer, ctx = GlobalContext()) {\r\n        const bufImporters = {};\r\n        for (const key in this.importers) {\r\n            bufImporters[key] = (options) => this.importers[key].import(buffer, options, ctx);\r\n        }\r\n        return bufImporters;\r\n    }\r\n}\r\n// type BufferImporter = { [key in keyof typeof importers]: (options: AssetImportOptions) => Promise<AssetsPack> };\r\n// function createBufferImporter(buffer: ArrayBuffer, ctx = GlobalContext()): BufferImporter\r\n// {\r\n//     const wrapper = {} as any;\r\n//     for (const importer in importers)\r\n//     {\r\n//         wrapper[importer] = (options?: AssetImportOptions) => importers[importer as keyof typeof importers].import(buffer, options, ctx);\r\n//     }\r\n//     return wrapper;\r\n// }\r\n// export const AssetsImporter = {\r\n//     importers: importers,\r\n//     async url(url: string, ctx = GlobalContext())\r\n//     {\r\n//         const buffer = await fetch(url).then(r => r.arrayBuffer());\r\n//         return createBufferImporter(buffer, ctx);\r\n//     },\r\n//     async buffer(buffer: ArrayBuffer, ctx = GlobalContext())\r\n//     {\r\n//         return createBufferImporter(buffer, ctx);\r\n//     }\r\n// };\r\n//# sourceMappingURL=assets-importer.js.map","export class AssetsPack {\r\n    constructor() {\r\n        this.mainAsset = null;\r\n        this.assets = new Map();\r\n    }\r\n    add(name, asset) {\r\n        asset.name = name;\r\n        this.assets.set(name, asset);\r\n    }\r\n    setMain(asset) {\r\n        this.mainAsset = asset;\r\n    }\r\n    get(Type) {\r\n        for (const [name, asset] of this.assets) {\r\n            if (asset instanceof Type)\r\n                return asset;\r\n        }\r\n        return null;\r\n    }\r\n    getAll(Type) {\r\n        return Array.from(this.assets.values()).filter(asset => asset instanceof Type);\r\n    }\r\n}\r\n//# sourceMappingURL=types.js.map","export * from \"./assets-importer/assets-importer\";\r\nexport * from \"./texture-importer/texture-importer\";\r\n//# sourceMappingURL=index.js.map","import { FilterMode, Texture2D, WrapMode } from \"../../core\";\r\nimport { GlobalContext } from \"../../core/global\";\r\nimport { TextureFormat } from \"../../core/texture-format\";\r\nimport { AssetsImporter } from \"../assets-importer/assets-importer\";\r\nconst Texture2DImporter = {\r\n    import(buffer, options, ctx = GlobalContext()) {\r\n        return new Promise((resolve, reject) => {\r\n            const blob = new Blob([buffer]);\r\n            const img = new Image();\r\n            img.src = URL.createObjectURL(blob);\r\n            const complete = () => {\r\n                const defulatOptions = {\r\n                    width: img.width,\r\n                    height: img.height,\r\n                    filterMode: FilterMode.Linear,\r\n                    format: TextureFormat.RGBA,\r\n                    mipmap: true,\r\n                    wrapMpde: WrapMode.Repeat\r\n                };\r\n                const opt = Object.assign(Object.assign({}, defulatOptions), options);\r\n                const tex = new Texture2D(opt.width, opt.height, opt.format, opt.filterMode, ctx);\r\n                tex.autoMipmap = opt.mipmap;\r\n                tex.wrapMode = opt.wrapMpde;\r\n                tex.updateParameters();\r\n                tex.setData(img);\r\n                resolve(tex);\r\n            };\r\n            if (img.complete)\r\n                complete();\r\n            else\r\n                img.onload = complete;\r\n        });\r\n    }\r\n};\r\nconst importers = {\r\n    tex2d: Texture2DImporter,\r\n};\r\nexport const TextureImporter = new AssetsImporter(importers);\r\n//# sourceMappingURL=texture-importer.js.map","import { Vector4 } from \"./vec4\";\r\nexport class Color extends Vector4 {\r\n    get r() { return this[0]; }\r\n    set r(r) { this[0] = r; }\r\n    get g() { return this[1]; }\r\n    set g(g) { this[1] = g; }\r\n    get b() { return this[2]; }\r\n    set b(b) { this[2] = b; }\r\n    get a() { return this[3]; }\r\n    set a(a) { this[3] = a; }\r\n    constructor(r, g, b, a = 1) {\r\n        super(r, g, b, a);\r\n    }\r\n    static get white() { return new Color(1, 1, 1); }\r\n    static get transparent() { return new Color(1, 1, 1, 0); }\r\n    static get black() { return new Color(0, 0, 0); }\r\n    static get red() { return new Color(1, 0, 0); }\r\n    static get green() { return new Color(0, 1, 0); }\r\n    static get blue() { return new Color(0, 0, 1); }\r\n    static get cyan() { return new Color(0, 1, 1); }\r\n    static get yellow() { return new Color(1, 1, 0); }\r\n    static get magenta() { return new Color(1, 0, 1); }\r\n    static get gray() { return new Color(.5, .5, .5); }\r\n    transparent() {\r\n        return new Color(this.r, this.g, this.b, 0);\r\n    }\r\n    /**\r\n     *\r\n     * @param h hue in [0..360]\r\n     * @param s saturation in [0..1]\r\n     * @param l lightness in [0..1]\r\n     * @returns\r\n     */\r\n    setHSL(h, s, l) {\r\n        h = h < 0 ? h + 360 : h;\r\n        const chroma = (1 - Math.abs(2 * l - 1)) * s;\r\n        if (isNaN(h)) {\r\n            this.r = this.g = this.b = 0;\r\n            return this;\r\n        }\r\n        h = h / 60;\r\n        const x = chroma * (1 - Math.abs(h % 2 - 1));\r\n        let color = [0, 0, 0];\r\n        if (0 <= h && h <= 1)\r\n            color = [chroma, x, 0];\r\n        else if (h <= 2)\r\n            color = [x, chroma, 0];\r\n        else if (h <= 3)\r\n            color = [0, chroma, x];\r\n        else if (h <= 4)\r\n            color = [0, x, chroma];\r\n        else if (h <= 5)\r\n            color = [x, 0, chroma];\r\n        else if (h <= 6)\r\n            color = [chroma, 0, x];\r\n        let m = l - chroma / 2;\r\n        this.r = color[0] + m;\r\n        this.g = color[1] + m;\r\n        this.b = color[2] + m;\r\n        return this;\r\n    }\r\n    get hue() {\r\n        const R = this.r;\r\n        const G = this.g;\r\n        const B = this.b;\r\n        const max = Math.max(R, G, B);\r\n        const min = Math.min(R, G, B);\r\n        let h = 0;\r\n        if (max === min)\r\n            h = 0;\r\n        else if (max === R)\r\n            h = 60 * (0 + (G - B) / (max - min));\r\n        else if (max === G)\r\n            h = 60 * (2 + (B - R) / (max - min));\r\n        else if (max === B)\r\n            h = 60 * (4 + (R - G) / (max - min));\r\n        return h < 0 ? h + 360 : h;\r\n    }\r\n    get saturation() {\r\n        const max = Math.max(this.r, this.g, this.b);\r\n        const min = Math.min(this.r, this.g, this.b);\r\n        if (max === 0)\r\n            return 0;\r\n        else if (min == 1)\r\n            return 0;\r\n        return (max - min) / (1 - Math.abs(max + min - 1));\r\n    }\r\n    get lightness() {\r\n        const max = Math.max(this.r, this.g, this.b);\r\n        const min = Math.min(this.r, this.g, this.b);\r\n        return (max + min) / 2;\r\n    }\r\n    toHSL() {\r\n        return [this.hue, this.saturation, this.lightness];\r\n    }\r\n    /**\r\n     *\r\n     * @param h hue in [0..360]\r\n     * @param s saturation in [0..1]\r\n     * @param l lightness in [0..1]\r\n     * @param alpha\r\n     * @returns\r\n     */\r\n    static fromHSL(h, s, l, alpha = 1) {\r\n        return new Color(0, 0, 0, alpha).setHSL(h, s, l);\r\n    }\r\n    static fromString(str, alpha) {\r\n        str = str.replace(new RegExp(/\\s/g), \"\");\r\n        var reg = new RegExp(\"#[0-9a-fA-F]{6}\");\r\n        if (reg.test(str)) {\r\n            str = str.replace(\"#\", \"\");\r\n            var strR = str.charAt(0) + str.charAt(1);\r\n            var strG = str.charAt(2) + str.charAt(3);\r\n            var strB = str.charAt(4) + str.charAt(5);\r\n            var r = parseInt(strR, 16);\r\n            var g = parseInt(strG, 16);\r\n            var b = parseInt(strB, 16);\r\n            return new Color(r / 255, g / 255, b / 255, alpha || 1);\r\n        }\r\n        reg = new RegExp(\"rgb\\\\(([0-9]+(\\\\.[0-9]+){0,1}),([0-9]+(\\\\.[0-9]+){0,1}),([0-9]+(\\\\.[0-9]+){0,1})\\\\)\");\r\n        if (reg.test(str)) {\r\n            var colorArray = str.replace(\"rgb(\", \"\").replace(\")\", \"\").split(\",\");\r\n            var r = parseInt(colorArray[0]);\r\n            var g = parseInt(colorArray[1]);\r\n            var b = parseInt(colorArray[2]);\r\n            var a = alpha || 1;\r\n            return new Color(r / 255, g / 255, b / 255, a / 255);\r\n        }\r\n        reg = new RegExp(\"rgba\\\\(([0-9]+(\\\\.[0-9]+){0,1}),([0-9]+(\\\\.[0-9]+){0,1}),([0-9]+(\\\\.[0-9]+){0,1}),([0-9]+(\\\\.[0-9]+){0,1})\\\\)\");\r\n        if (reg.test(str)) {\r\n            var colorArray = str.replace(\"rgba(\", \"\").replace(\")\", \"\").split(\",\");\r\n            var r = parseInt(colorArray[0]);\r\n            var g = parseInt(colorArray[1]);\r\n            var b = parseInt(colorArray[2]);\r\n            var a = alpha || parseFloat(colorArray[3]);\r\n            return new Color(r / 255, g / 255, b / 255, a);\r\n        }\r\n        throw new Error(`Invalid color string '${str}'`);\r\n    }\r\n}\r\nexport const rgba = (r, g, b, a = 1) => new Color(r, g, b, a);\r\nexport const rgb = (r, g, b) => new Color(r, g, b, 1);\r\nexport const hsl = Color.fromHSL;\r\n//# sourceMappingURL=color.js.map","import { glMatrix } from \"gl-matrix\";\r\nglMatrix.setMatrixArrayType(Array);\r\nexport * from \"./vec2\";\r\nexport * from \"./vec3\";\r\nexport * from \"./vec4\";\r\nexport * from \"./color\";\r\nexport * from \"./math\";\r\nexport * from \"./mat4\";\r\nexport * from \"./quat\";\r\nexport * from \"./ray\";\r\nexport * from \"./rect\";\r\nexport { MathUtils } from \"./utils\";\r\n//# sourceMappingURL=index.js.map","import { mat4 as glMat4, vec4 as glVec4 } from \"gl-matrix\";\r\nimport { quat } from \"./quat\";\r\nimport { vec3 } from \"./vec3\";\r\nimport { vec4 } from \"./vec4\";\r\nimport { vec2 } from \"./vec2\";\r\nimport { wrapGlMatrix } from \"./utils\";\r\nconst Mat4Constructor = Array;\r\nconst __vec4_temp = vec4.zero();\r\nexport class Matrix4x4 extends Mat4Constructor {\r\n    constructor(p_0 = 0, p_1 = 0, p_2 = 0, p_3 = 0, p_4 = 0, p_5 = 0, p_6 = 0, p_7 = 0, p_8 = 0, p_9 = 0, p_10 = 0, p_11 = 0, p_12 = 0, p_13 = 0, p_14 = 0, p_15 = 0) {\r\n        super(p_0, p_1, p_2, p_3, p_4, p_5, p_6, p_7, p_8, p_9, p_10, p_11, p_12, p_13, p_14, p_15);\r\n    }\r\n    static create() {\r\n        return new Matrix4x4();\r\n    }\r\n    asMut() { return this; }\r\n    set(m) {\r\n        return glMat4.set(this, ...m);\r\n    }\r\n    fill(n) {\r\n        return mat4.fill(this, n);\r\n    }\r\n    clone(out = mat4.create()) {\r\n        return out.set(this);\r\n    }\r\n    equals(other) {\r\n        return mat4.equal(this, other);\r\n    }\r\n}\r\nexport function mat4(p_0 = 0, p_1 = 0, p_2 = 0, p_3 = 0, p_4 = 0, p_5 = 0, p_6 = 0, p_7 = 0, p_8 = 0, p_9 = 0, p_10 = 0, p_11 = 0, p_12 = 0, p_13 = 0, p_14 = 0, p_15 = 0) {\r\n    return new Matrix4x4(p_0, p_1, p_2, p_3, p_4, p_5, p_6, p_7, p_8, p_9, p_10, p_11, p_12, p_13, p_14, p_15);\r\n}\r\nmat4.create = Matrix4x4.create;\r\nmat4.identity = wrapGlMatrix(glMat4.identity, 0, mat4.create);\r\nmat4.rts = wrapGlMatrix(glMat4.fromRotationTranslationScale, 3, mat4.create);\r\nmat4.translate = wrapGlMatrix(glMat4.translate, 2, Matrix4x4.create);\r\nmat4.invert = wrapGlMatrix(glMat4.invert, 1, Matrix4x4.create);\r\nmat4.getTranslation = wrapGlMatrix(glMat4.getTranslation, 1, vec3.zero);\r\nmat4.getRotation = wrapGlMatrix(glMat4.getRotation, 1, quat.create);\r\nmat4.getScaling = wrapGlMatrix(glMat4.getScaling, 1, vec3.zero);\r\nmat4.mulVec4 = wrapGlMatrix((out, m, v) => glVec4.transformMat4(out, v, m), 2, vec4.zero);\r\nmat4.perspective = wrapGlMatrix(glMat4.perspective, 4, Matrix4x4.create);\r\nmat4.transpose = wrapGlMatrix(glMat4.transpose, 1, Matrix4x4.create);\r\nmat4.rotate = wrapGlMatrix((out, m, axis, rad) => glMat4.rotate(out, m, rad, axis), 3, Matrix4x4.create);\r\nmat4.scale = wrapGlMatrix(glMat4.scale, 2, Matrix4x4.create);\r\nmat4.fromTranslation = wrapGlMatrix(glMat4.fromTranslation, 1, Matrix4x4.create);\r\nmat4.fromRotation = wrapGlMatrix(glMat4.fromRotation, 1, Matrix4x4.create);\r\nmat4.fromScaling = wrapGlMatrix(glMat4.fromScaling, 1, Matrix4x4.create);\r\nmat4.mul = wrapGlMatrix(glMat4.mul, 2, Matrix4x4.create);\r\nmat4.add = wrapGlMatrix(glMat4.add, 2, mat4.create);\r\nmat4.sub = wrapGlMatrix(glMat4.sub, 2, mat4.create);\r\nmat4.plus = mat4.add;\r\nmat4.minus = mat4.sub;\r\nmat4.mulVector = wrapGlMatrix((out, m, v) => {\r\n    __vec4_temp[0] = v[0];\r\n    __vec4_temp[1] = v[1];\r\n    __vec4_temp[2] = v[2];\r\n    __vec4_temp[3] = 0;\r\n    glVec4.transformMat4(__vec4_temp, __vec4_temp, m);\r\n    out[0] = __vec4_temp[0];\r\n    out[1] = __vec4_temp[1];\r\n    out[2] = __vec4_temp[2];\r\n    return out;\r\n}, 2, vec3.zero);\r\nmat4.mulPoint = wrapGlMatrix((out, m, v) => {\r\n    __vec4_temp[0] = v[0];\r\n    __vec4_temp[1] = v[1];\r\n    __vec4_temp[2] = v[2];\r\n    __vec4_temp[3] = 1;\r\n    glVec4.transformMat4(__vec4_temp, __vec4_temp, m);\r\n    out[0] = __vec4_temp[0];\r\n    out[1] = __vec4_temp[1];\r\n    out[2] = __vec4_temp[2];\r\n    return out;\r\n}, 2, vec3.zero);\r\nmat4.mulPoint2 = wrapGlMatrix((out, m, v) => {\r\n    __vec4_temp[0] = v[0];\r\n    __vec4_temp[1] = v[1];\r\n    __vec4_temp[2] = 0;\r\n    __vec4_temp[3] = 1;\r\n    glVec4.transformMat4(__vec4_temp, __vec4_temp, m);\r\n    out[0] = __vec4_temp[0];\r\n    out[1] = __vec4_temp[1];\r\n    return out;\r\n}, 2, vec2.zero);\r\nmat4.mulVector2 = wrapGlMatrix((out, m, v) => {\r\n    __vec4_temp[0] = v[0];\r\n    __vec4_temp[1] = v[1];\r\n    __vec4_temp[2] = 0;\r\n    __vec4_temp[3] = 0;\r\n    glVec4.transformMat4(__vec4_temp, __vec4_temp, m);\r\n    out[0] = __vec4_temp[0];\r\n    out[1] = __vec4_temp[1];\r\n    return out;\r\n}, 2, vec2.zero);\r\nfunction simpleOrthogonal(height, aspect, near, far) {\r\n    const out = mat4.create();\r\n    glMat4.ortho(out, -aspect * height, aspect * height, -height, height, near, far);\r\n    return out;\r\n}\r\nfunction orthogonal(...args) {\r\n    if (args.length === 4)\r\n        return simpleOrthogonal(...args);\r\n    const out = mat4.create();\r\n    glMat4.ortho(...[out, ...args]);\r\n    return out;\r\n}\r\nmat4.ortho = orthogonal;\r\n// (height: number, aspect: number, near: number, far: number) =>\r\n// {\r\n//     const out = glMat4.create();\r\n//     glMat4.ortho(out, -aspect * height, aspect * height, -height, height, near, far);\r\n//     return out;\r\n//     out[0] = 2 / (aspect * height);\r\n//     out[1] = 0;\r\n//     out[2] = 0;\r\n//     out[3] = 0;\r\n//     out[4] = 0;\r\n//     out[5] = 2 / height;\r\n//     out[6] = 0;\r\n//     out[7] = 0;\r\n//     out[8] = 0;\r\n//     out[9] = 0;\r\n//     out[10] = -2 / (far - near);\r\n//     out[11] = -(far + near) / (far - near);\r\n//     out[12] = 0;\r\n//     out[13] = 0;\r\n//     out[14] = 0;\r\n//     out[15] = 1;\r\n//     return out;\r\n// }\r\nmat4.equal = (a, b) => {\r\n    if (a === undefined || b === undefined)\r\n        return false;\r\n    if (!(a instanceof Array || a instanceof Float32Array) || !(b instanceof Array || b instanceof Float32Array))\r\n        return false;\r\n    return glMat4.exactEquals(a, b);\r\n};\r\nmat4.set = wrapGlMatrix(glMat4.set, 1, mat4.create);\r\nmat4.fill = wrapGlMatrix((out, n) => {\r\n    out[0]\r\n        = out[1]\r\n            = out[2]\r\n                = out[3]\r\n                    = out[4]\r\n                        = out[5]\r\n                            = out[6]\r\n                                = out[7]\r\n                                    = out[8]\r\n                                        = out[9]\r\n                                            = out[10]\r\n                                                = out[11]\r\n                                                    = out[12]\r\n                                                        = out[13]\r\n                                                            = out[14]\r\n                                                                = out[15] = n;\r\n    return out;\r\n}, 1, mat4.create);\r\n// export const mat4 = Matrix4x4;\r\n//# sourceMappingURL=mat4.js.map","import { Vector3, vec3 } from \"./vec3\";\r\nimport { vec4, Vector4 } from \"./vec4\";\r\nimport { vec2, Vector2 } from \"./vec2\";\r\nimport { mat4 } from \"./mat4\";\r\nNumber.prototype.__to = function (type) {\r\n    switch (type) {\r\n        case Vector4:\r\n            return vec4(this.valueOf(), this.valueOf(), this.valueOf(), this.valueOf());\r\n        case Vector3:\r\n            return vec3(this.valueOf(), this.valueOf(), this.valueOf());\r\n        case Vector2:\r\n            return vec2(this.valueOf(), this.valueOf());\r\n    }\r\n    return this.valueOf();\r\n};\r\nfunction arithOrder(a, b) {\r\n    if (typeof (a) === \"number\")\r\n        return [b, a, true];\r\n    else if (typeof (b) === \"number\")\r\n        return [a, b, false];\r\n    return (b.length > a.length ? [b, a, true] : [a, b, false]);\r\n}\r\nfunction allocateOutput(a, b) {\r\n    let length = Math.max(a.length || 0, b.length || 0);\r\n    switch (length) {\r\n        case 2:\r\n            return typeof (a) === \"number\" ? vec2.fill(a) : vec2.set(a);\r\n        case 3:\r\n            return typeof (a) === \"number\" ? vec2.fill(a) : vec3.set(a);\r\n        case 4:\r\n            return typeof (a) === \"number\" ? vec2.fill(a) : vec4.set(a);\r\n        case 16:\r\n            return typeof (a) === \"number\" ? vec2.fill(a) : mat4.set(a);\r\n    }\r\n    console.warn(`Unsupported vector length '${length}'`);\r\n    return new Array();\r\n}\r\nexport function plus(a, b, out) {\r\n    if (typeof (a) === \"number\" && typeof (b) === \"number\")\r\n        return (a + b);\r\n    let output = (out || allocateOutput(a, b));\r\n    switch (output.length) {\r\n        case 2:\r\n            return vec2.plus(output, output, b);\r\n        case 3:\r\n            return vec3.plus(output, output, b);\r\n        case 4:\r\n            return vec4.plus(output, output, b);\r\n    }\r\n    console.warn(`Unsupported vector length '${output.length}'`);\r\n    return vec4.plus(output, output, b);\r\n}\r\nexport function minus(a, b, out) {\r\n    if (typeof (a) === \"number\" && typeof (b) === \"number\")\r\n        return (a + b);\r\n    let output = (out || allocateOutput(a, b));\r\n    switch (output.length) {\r\n        case 2:\r\n            return vec2.minus(output, output, b);\r\n        case 3:\r\n            return vec3.minus(output, output, b);\r\n        case 4:\r\n            return vec4.minus(output, output, b);\r\n    }\r\n    console.warn(`Unsupported vector length '${output.length}'`);\r\n    return vec4.minus(output, output, b);\r\n}\r\nexport function mul(a, b, out) {\r\n    if (typeof (a) === \"number\" && typeof (b) === \"number\")\r\n        return (a + b);\r\n    let output = (out || allocateOutput(a, b));\r\n    switch (output.length) {\r\n        case 2:\r\n            return vec2.mul(output, output, b);\r\n        case 3:\r\n            return vec3.mul(output, output, b);\r\n        case 4:\r\n            return vec4.mul(output, output, b);\r\n    }\r\n    console.warn(`Unsupported vector length '${output.length}'`);\r\n    return vec4.mul(output, output, b);\r\n}\r\nexport function div(a, b, out) {\r\n    if (typeof (a) === \"number\" && typeof (b) === \"number\")\r\n        return (a + b);\r\n    let output = (out || allocateOutput(a, b));\r\n    switch (output.length) {\r\n        case 2:\r\n            return vec2.div(output, output, b);\r\n        case 3:\r\n            return vec3.div(output, output, b);\r\n        case 4:\r\n            return vec4.div(output, output, b);\r\n    }\r\n    console.warn(`Unsupported vector length '${output.length}'`);\r\n    return vec4.div(output, output, b);\r\n}\r\nexport function dot(a, b) {\r\n    switch (a.length) {\r\n        case 2:\r\n            return a[0] * b[0] + a[1] * b[1];\r\n        case 3:\r\n            return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\r\n        case 4:\r\n            return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\r\n    }\r\n}\r\nexport function cross(a, b, out = vec3.zero()) {\r\n    out[0] = a[1] * b[2] - a[2] * b[1];\r\n    out[1] = a[2] * b[0] - a[0] * b[2];\r\n    out[2] = a[0] * b[1] - a[1] * b[0];\r\n    return out;\r\n}\r\nexport function distance(a, b) {\r\n    return Math.hypot((b[0] - a[0]) || 0, (b[1] - a[1]) || 0, (b[2] - a[2]) || 0, (b[3] - a[3]) || 0);\r\n}\r\nexport function boxRaycast(box, center, direction) {\r\n    direction = direction.normalized;\r\n    if (direction.x == 0 && direction.y == 0)\r\n        return [false, 0, vec2.zero()];\r\n    let tMin = vec2.zero();\r\n    let tMax = vec2.zero();\r\n    if (direction.x == 0) {\r\n        tMin.y = (box.yMin - center.y) / direction.y;\r\n        tMax.y = (box.yMax - center.y) / direction.y;\r\n        tMin.x = tMax.x = Number.NEGATIVE_INFINITY;\r\n        if (box.xMin <= center.x && center.x <= box.xMax) {\r\n            if (tMin.y < tMax.y)\r\n                return [true, tMin.y, vec2(0, -1)];\r\n            return [true, tMax.y, vec2(0, 1)];\r\n        }\r\n        return [false, 0, vec2.zero()];\r\n    }\r\n    if (direction.y == 0) {\r\n        tMin.x = (box.xMin - center.x) / direction.x;\r\n        tMax.x = (box.xMax - center.x) / direction.x;\r\n        tMin.y = tMax.y = Number.NEGATIVE_INFINITY;\r\n        if (box.yMin <= center.y && center.y <= box.yMax) {\r\n            if (tMin.x < tMax.x)\r\n                return [true, tMin.x, vec2(-1, 0)];\r\n            return [true, tMax.x, vec2(1, 0)];\r\n        }\r\n        return [false, 0, vec2.zero()];\r\n    }\r\n    tMin = minus(box.min, center).div(direction); // distance to box min lines (X and Y)\r\n    tMax = minus(box.max, center).div(direction); // distance to box max lines (X and Y)\r\n    var minXT = tMin.x; // min distance to vertical line\r\n    var maxXT = tMax.x; // max distance to vertical line\r\n    var minXNormal = vec2(-1, 0); // Vector2.left; // normal of the vertical line which has minimal distance to center\r\n    var minYT = tMin.y;\r\n    var maxYT = tMax.y;\r\n    var minYNormal = vec2(0, -1); // Vector2.down;\r\n    if (tMin.x > tMax.x) {\r\n        minXT = tMax.x;\r\n        maxXT = tMin.x;\r\n        minXNormal = vec2(1, 0); // Vector2.right;\r\n    }\r\n    if (tMin.y > tMax.y) {\r\n        minYT = tMax.y;\r\n        maxYT = tMin.y;\r\n        minYNormal = vec2(0, 1); // Vector2.up;\r\n    }\r\n    if (minYT > maxXT || minXT > maxYT) {\r\n        return [false, 0, vec2.zero()];\r\n    }\r\n    else if (minXT > minYT) {\r\n        return [true, minXT, minXNormal];\r\n    }\r\n    return [true, minYT, minYNormal];\r\n}\r\nexport const Deg2Rad = Math.PI / 180;\r\nexport const Rad2Deg = 180 / Math.PI;\r\n//# sourceMappingURL=math.js.map","import { quat as glQuat, vec3 as glVec3 } from \"gl-matrix\";\r\nimport { vec3 } from \"./vec3\";\r\nimport { Rad2Deg } from \"./math\";\r\nimport { wrapGlMatrix } from \"./utils\";\r\nconst V4Constructor = Array;\r\nexport class Quaternion extends V4Constructor {\r\n    static create() {\r\n        return new Quaternion(0, 0, 0, 0);\r\n    }\r\n    asMut() { return this; }\r\n    equals(v) {\r\n        if (!v || !(v instanceof Array))\r\n            return false;\r\n        return glQuat.exactEquals(this, v);\r\n    }\r\n    clone(out = Quaternion.create()) {\r\n        return out.set(this);\r\n    }\r\n    set(value) {\r\n        this[0] = value[0] || 0;\r\n        this[1] = value[1] || 0;\r\n        this[2] = value[2] || 0;\r\n        this[3] = value[3] || 0;\r\n        return this;\r\n    }\r\n    fill(value) {\r\n        this[0] = value;\r\n        this[1] = value;\r\n        this[2] = value;\r\n        this[3] = value;\r\n        return this;\r\n    }\r\n}\r\nexport function quat(x = 0, y = x, z = x, w = x) {\r\n    return new Quaternion(x, y, z, w);\r\n}\r\nquat.create = () => {\r\n    return quat(0);\r\n};\r\nquat.identity = wrapGlMatrix(glQuat.identity, 0, quat.create);\r\nquat.axisAngle = wrapGlMatrix((out, axis, rad) => glQuat.setAxisAngle(out, axis, rad), 2, quat.create);\r\nquat.mul = wrapGlMatrix(glQuat.mul, 2, quat.create);\r\nquat.invert = wrapGlMatrix(glQuat.invert, 1, quat.create);\r\nquat.normalize = wrapGlMatrix(glQuat.normalize, 1, quat.create);\r\nquat.euler = wrapGlMatrix((out, q) => {\r\n    out[0] = Math.atan2(2 * (q[3] * q[0] + q[1] * q[2]), (1 - 2 * (q[0] ** 2 + q[1] ** 2))) * Rad2Deg;\r\n    out[1] = Math.asin(2 * (q[3] * q[1] - q[2] * q[0])) * Rad2Deg;\r\n    out[2] = Math.atan2(2 * (q[3] * q[2] + q[0] * q[1]), 1 - 2 * (q[1] ** 2, q[2] ** 2)) * Rad2Deg;\r\n    return out;\r\n}, 1, vec3.zero);\r\nquat.fromEuler = wrapGlMatrix((out, angles) => glQuat.fromEuler(out, angles[0], angles[1], angles[2]), 1, quat.create);\r\nquat.rotate = wrapGlMatrix((out, q, v) => glVec3.transformQuat(out, v, q), 2, vec3.zero);\r\nquat.equals = (a, b) => {\r\n    return glQuat.exactEquals(a, b);\r\n};\r\n//# sourceMappingURL=quat.js.map","export function ray(origin, direction) {\r\n    return { origin, direction: direction.normalized };\r\n}\r\n//# sourceMappingURL=ray.js.map","import { minus, plus } from \"./math\";\r\nimport { vec2 } from \"./vec2\";\r\nexport class Rect {\r\n    constructor(min, size) {\r\n        this.min = min;\r\n        this.max = plus(min, size);\r\n    }\r\n    get xMin() { return this.min.x; }\r\n    get yMin() { return this.min.y; }\r\n    get xMax() { return this.max.x; }\r\n    get yMax() { return this.max.y; }\r\n    get width() { return this.max.x - this.min.x; }\r\n    get height() { return this.max.y - this.min.y; }\r\n    get size() { return minus(this.max, this.min); }\r\n    get center() { return plus(this.min, this.max).mul(vec2(.5)); }\r\n    shrink(thickness) {\r\n        let min = plus(this.min, vec2(thickness));\r\n        let max = minus(this.max, vec2(thickness));\r\n        if (min.x > max.x)\r\n            min.x = max.x = (min.x + max.x) / 2;\r\n        if (min.y > max.y)\r\n            min.y = max.y = (min.y + max.y) / 2;\r\n        return new Rect(min, max.minus(min));\r\n    }\r\n    expand(thickness) {\r\n        return new Rect(minus(this.min, vec2(thickness)), plus(this.size, vec2(2 * thickness)));\r\n    }\r\n    static box01() {\r\n        return new Rect(vec2.zero(), vec2.one());\r\n    }\r\n}\r\n//# sourceMappingURL=rect.js.map","export function wrapGlMatrix(func, argCount, allocator) {\r\n    return ((...args) => {\r\n        if (args.length <= argCount) {\r\n            const out = allocator();\r\n            return func(out, ...args);\r\n        }\r\n        else {\r\n            let [out, ...rest] = args;\r\n            if (out === undefined)\r\n                out = allocator();\r\n            return func(out, ...rest);\r\n        }\r\n    });\r\n}\r\nconst DAMP_EPSLON = 0.01;\r\nconst DAMP_DURATION = -Math.log(DAMP_EPSLON);\r\nexport const MathUtils = {\r\n    lerp(a, b, t) {\r\n        return (b - a) * t + a;\r\n    },\r\n    linstep(a, b, x) {\r\n        return MathUtils.clamp((x - a) / (b - a), 0, 1);\r\n    },\r\n    smoothStep(a, b, x) {\r\n        const t = MathUtils.linstep(a, b, x);\r\n        return t * t * (3.0 - 2.0 * t);\r\n    },\r\n    clamp(x, min, max) {\r\n        return Math.min(Math.max(x, min), max);\r\n    },\r\n    mapClamped(inMin, inMax, outMin, outMax, value) {\r\n        const t = this.linstep(inMin, inMax, value);\r\n        return MathUtils.lerp(outMin, outMax, t);\r\n    },\r\n    damp: damp,\r\n};\r\nfunction damp(from, to, damping, deltaTime, epslon = DAMP_EPSLON, dampDuration = -Math.log(epslon)) {\r\n    const timeScale = dampDuration / damping;\r\n    const t = Math.exp(-deltaTime * timeScale);\r\n    return MathUtils.lerp(from, to, 1 - t);\r\n}\r\n//# sourceMappingURL=utils.js.map","import { vec4, Vector4 } from \"./vec4\";\r\nimport { Vector3, vec3 } from \"./vec3\";\r\nimport { wrapGlMatrix } from \"./utils\";\r\nimport { vec2 as glVec2 } from \"gl-matrix\";\r\nconst V2Constructor = Array;\r\nexport class Vector2 extends V2Constructor {\r\n    get x() { return this[0]; }\r\n    set x(x) { this[0] = x; }\r\n    get y() { return this[1]; }\r\n    set y(y) { this[1] = y; }\r\n    get magnitude() {\r\n        return Math.hypot(...this);\r\n    }\r\n    get magnitudeSqr() {\r\n        return this[0] * this[0] + this[1] * this[1];\r\n    }\r\n    get normalized() {\r\n        const m = this.magnitude;\r\n        return m == 0 ? vec2.zero() : this.clone().div(vec2(m, m));\r\n    }\r\n    get negative() {\r\n        return this.clone().negate();\r\n    }\r\n    get inversed() {\r\n        return this.clone().inverse();\r\n    }\r\n    get isZero() {\r\n        return this.x === 0 && this.y === 0;\r\n    }\r\n    constructor(x, y) {\r\n        super(x, y);\r\n    }\r\n    static zero() {\r\n        return new Vector2(0, 0);\r\n    }\r\n    static one() {\r\n        return new Vector2(1, 1);\r\n    }\r\n    static up() {\r\n        return new Vector2(0, 1);\r\n    }\r\n    static down() {\r\n        return new Vector2(0, -1);\r\n    }\r\n    static left() { return new Vector2(-1, 0); }\r\n    static right() { return new Vector2(1, 0); }\r\n    static distance(u, v) {\r\n        return Math.sqrt((u.x - v.x) * (u.x - v.x) + (u.y - v.y) * (u.y - v.y));\r\n    }\r\n    static distanceSquared(u, v) {\r\n        return (u.x - v.x) * (u.x - v.x) + (u.y - v.y) * (u.y - v.y);\r\n    }\r\n    static math(func) {\r\n        return (...args) => {\r\n            return vec2(func(...args.map(v => v.x)), func(...args.map(v => v.y)));\r\n        };\r\n    }\r\n    asMut() { return this; }\r\n    plus(v) {\r\n        return vec2.plus(this, this, v);\r\n    }\r\n    minus(v) {\r\n        return vec2.minus(this, this, v);\r\n    }\r\n    mul(v) {\r\n        return vec2.mul(this, this, v);\r\n    }\r\n    div(v) {\r\n        return vec2.div(this, this, v);\r\n    }\r\n    dot(v) {\r\n        return this[0] * v[0]\r\n            + this[1] * v[1];\r\n    }\r\n    normalize() {\r\n        return vec2.normalize(this, this);\r\n    }\r\n    inverse() {\r\n        this[0] = 1 / this[0];\r\n        this[1] = 1 / this[1];\r\n        return this;\r\n    }\r\n    negate() {\r\n        this[0] = -this[0];\r\n        this[1] = -this[1];\r\n        return this;\r\n    }\r\n    /** 1 - this */\r\n    oneMinus() {\r\n        this[0] = 1 - this[0];\r\n        this[1] = 1 - this[1];\r\n        return this;\r\n    }\r\n    equals(v) {\r\n        if (v === undefined)\r\n            return false;\r\n        return v[0] === this[0] && v[1] === this[1];\r\n    }\r\n    clone(out = vec2.zero()) {\r\n        return out.set(this);\r\n    }\r\n    set(v) {\r\n        this[0] = v[0] || 0;\r\n        this[1] = v[1] || 0;\r\n        return this;\r\n    }\r\n    fill(n) {\r\n        this[0] = this[1] = n;\r\n        return this;\r\n    }\r\n    toVec3(z = 0) {\r\n        return vec3(this[0], this[1], z);\r\n    }\r\n    __to(type) {\r\n        switch (type) {\r\n            case Vector4:\r\n                return vec4(this[0], this[1], 0, 0);\r\n            case Vector3:\r\n                return vec3(this[0], this[1], 0);\r\n        }\r\n        return this.clone();\r\n    }\r\n}\r\nexport function vec2(x, y = x) {\r\n    return new Vector2(x, y);\r\n}\r\nvec2.from = (src) => {\r\n    const [x = 0, y = 0] = src;\r\n    return vec2(x, y);\r\n};\r\nvec2.floor = (v) => vec2(Math.floor(v.x), Math.floor(v.y));\r\nvec2.zero = Vector2.zero;\r\nvec2.one = Vector2.one;\r\nvec2.left = Vector2.left;\r\nvec2.right = Vector2.right;\r\nvec2.down = Vector2.down;\r\nvec2.up = Vector2.up;\r\nvec2.math = Vector2.math;\r\nvec2.plus = wrapGlMatrix((out, a, b) => {\r\n    if (typeof (b) === \"number\") {\r\n        out[0] = a[0] + b;\r\n        out[1] = a[1] + b;\r\n    }\r\n    else {\r\n        out[0] = a[0] + b[0];\r\n        out[1] = a[1] + (b[1] || 0);\r\n    }\r\n    return out;\r\n}, 2, vec2.zero);\r\nvec2.minus = wrapGlMatrix((out, a, b) => {\r\n    if (typeof (b) === \"number\") {\r\n        out[0] = a[0] - b;\r\n        out[1] = a[1] - b;\r\n    }\r\n    else {\r\n        out[0] = a[0] - b[0];\r\n        out[1] = a[1] - (b[1] || 0);\r\n    }\r\n    return out;\r\n}, 2, vec2.zero);\r\nvec2.mul = wrapGlMatrix((out, a, b) => {\r\n    if (typeof (b) === \"number\") {\r\n        out[0] = a[0] * b;\r\n        out[1] = a[1] * b;\r\n    }\r\n    else {\r\n        out[0] = a[0] * b[0];\r\n        out[1] = a[1] * b[1];\r\n    }\r\n    return out;\r\n}, 2, vec2.zero);\r\nvec2.div = wrapGlMatrix((out, a, b) => {\r\n    if (typeof (b) === \"number\") {\r\n        out[0] = a[0] / b;\r\n        out[1] = a[1] / b;\r\n    }\r\n    else {\r\n        out[0] = a[0] / b[0];\r\n        out[1] = a[1] / b[1];\r\n    }\r\n    return out;\r\n}, 2, vec2.zero);\r\nvec2.exp = wrapGlMatrix((out, x) => {\r\n    if (typeof (x) === \"number\") {\r\n        out[0] = Math.exp(x);\r\n        out[1] = Math.exp(x);\r\n    }\r\n    else {\r\n        out[0] = Math.exp(x[0]);\r\n        out[1] = Math.exp(x[1]);\r\n    }\r\n    return out;\r\n}, 1, vec2.zero);\r\nvec2.inverse = wrapGlMatrix((out, v) => {\r\n    out[0] = 1 / v[0];\r\n    out[1] = 1 / v[1];\r\n    return out;\r\n}, 1, vec2.zero);\r\nvec2.dot = (a, b) => {\r\n    return a[0] * b[0] + a[1] * b[1];\r\n};\r\nvec2.cross = (a, b) => {\r\n    return a[0] * b[1] - a[1] * b[0];\r\n};\r\nvec2.normalize = wrapGlMatrix(glVec2.normalize, 1, vec2.zero);\r\nvec2.perpendicular = wrapGlMatrix((out, v) => {\r\n    out[0] = -v[1];\r\n    out[1] = v[0];\r\n    return out;\r\n}, 1, vec2.zero);\r\nvec2.set = wrapGlMatrix((out, v) => {\r\n    out[0] = v[0];\r\n    out[1] = v[1];\r\n    return out;\r\n}, 1, vec2.zero);\r\nvec2.fill = wrapGlMatrix((out, n) => {\r\n    out[0] = out[1] = n;\r\n    return out;\r\n}, 1, vec2.zero);\r\n//# sourceMappingURL=vec2.js.map","import { vec4, Vector4 } from \"./vec4\";\r\nimport { Vector2, vec2 } from \"./vec2\";\r\nimport { wrapGlMatrix } from \"./utils\";\r\nimport { vec3 as glVec3 } from \"gl-matrix\";\r\nconst V3Constructor = Array;\r\nexport class Vector3 extends V3Constructor {\r\n    get x() { return this[0]; }\r\n    set x(x) { this[0] = x; }\r\n    get y() { return this[1]; }\r\n    set y(y) { this[1] = y; }\r\n    get z() { return this[2]; }\r\n    set z(z) { this[2] = z; }\r\n    get magnitude() {\r\n        return Math.hypot(...this);\r\n    }\r\n    get magnitudeSqr() {\r\n        return this[0] * this[0] + this[1] * this[1] + this[2] * this[2];\r\n    }\r\n    get normalized() {\r\n        const m = this.magnitude;\r\n        return m == 0 ? vec3.zero() : this.clone().div(vec3(m, m, m));\r\n    }\r\n    get negative() {\r\n        return this.clone().negate();\r\n    }\r\n    get inversed() {\r\n        return this.clone().inverse();\r\n    }\r\n    constructor(x, y, z) {\r\n        super(x, y, z);\r\n    }\r\n    static zero() {\r\n        return new Vector3(0, 0, 0);\r\n    }\r\n    static one() {\r\n        return new Vector3(1, 1, 1);\r\n    }\r\n    asMut() { return this; }\r\n    plus(v) {\r\n        return vec3.plus(this, this, v);\r\n    }\r\n    minus(v) {\r\n        return vec3.minus(this, this, v);\r\n    }\r\n    mul(v) {\r\n        return vec3.mul(this, this, v);\r\n    }\r\n    div(v) {\r\n        return vec3.div(this, this, v);\r\n    }\r\n    dot(v) {\r\n        return this[0] * v[0]\r\n            + this[1] * v[1]\r\n            + this[2] * v[2];\r\n    }\r\n    normalize() {\r\n        return vec3.normalize(this, this);\r\n    }\r\n    inverse() {\r\n        this[0] = 1 / this[0];\r\n        this[1] = 1 / this[1];\r\n        this[2] = 1 / this[2];\r\n        return this;\r\n    }\r\n    negate() {\r\n        this[0] = -this[0];\r\n        this[1] = -this[1];\r\n        this[2] = -this[2];\r\n        return this;\r\n    }\r\n    /**\r\n     * cross product with vec3\r\n     * @param a u\r\n     * @param b v\r\n     */\r\n    cross(b) {\r\n        return vec3(this.y * b.z - this.z * b.y, this.z * b.x - this.x * b.z, this.x * b.y - this.y * b.x);\r\n    }\r\n    set(v) {\r\n        this[0] = v[0] || 0;\r\n        this[1] = v[1] || 0;\r\n        this[2] = v[2] || 0;\r\n        return this;\r\n    }\r\n    fill(n) {\r\n        this[0] = this[1] = this[2] = n;\r\n        return this;\r\n    }\r\n    clone(out = vec3.zero()) {\r\n        return out.set(this);\r\n    }\r\n    setX(x) {\r\n        this[0] = x;\r\n        return this;\r\n    }\r\n    setY(y) {\r\n        this[1] = y;\r\n        return this;\r\n    }\r\n    setZ(z) {\r\n        this[2] = z;\r\n        return this;\r\n    }\r\n    toVec2() {\r\n        return vec2(this[0], this[1]);\r\n    }\r\n    toVec4(w = 0) {\r\n        return vec4(this[0], this[1], this[2], w);\r\n    }\r\n    equals(v) {\r\n        if (v === undefined)\r\n            return false;\r\n        return v[0] === this[0]\r\n            && v[1] === this[1]\r\n            && v[2] === this[2];\r\n    }\r\n    static math(func) {\r\n        return (...args) => {\r\n            return vec3(func(...args.map(v => v.x)), func(...args.map(v => v.y)), func(...args.map(v => v.z)));\r\n        };\r\n    }\r\n    static mathNonAlloc(func, out, ...args) {\r\n        out[0] = func(...args.map(v => v[0]));\r\n        out[1] = func(...args.map(v => v[1]));\r\n        out[2] = func(...args.map(v => v[2]));\r\n        return out;\r\n    }\r\n    __to(type) {\r\n        switch (type) {\r\n            case Vector4:\r\n                return vec4(this[0], this[1], this[2], 0);\r\n            case Vector2:\r\n                return vec2(this[0], this[1]);\r\n        }\r\n        return this.clone();\r\n    }\r\n}\r\nexport function vec3(x, y = x, z = x) {\r\n    return new Vector3(x, y, z);\r\n}\r\nvec3.from = (src) => {\r\n    const [x = 0, y = 0, z = 0] = src;\r\n    return vec3(x, y, z);\r\n};\r\n// vec3.floor = (v: vec3) => vec3(Math.floor(v.x), Math.floor(v.y), Math.floor(v.z));\r\nvec3.zero = Vector3.zero;\r\nvec3.one = Vector3.one;\r\nvec3.math = Vector3.math;\r\nvec3.normalize = wrapGlMatrix(glVec3.normalize, 1, vec3.zero);\r\nvec3.inverse = wrapGlMatrix(glVec3.inverse, 1, vec3.zero);\r\nvec3.negate = wrapGlMatrix(glVec3.negate, 1, vec3.zero);\r\nvec3.plus = wrapGlMatrix((out, a, b) => {\r\n    if (typeof (b) === \"number\") {\r\n        out[0] = a[0] + b;\r\n        out[1] = a[1] + b;\r\n        out[2] = a[2] + b;\r\n    }\r\n    else {\r\n        out[0] = a[0] + b[0];\r\n        out[1] = a[1] + (b[1] || 0);\r\n        out[2] = a[2] + (b[2] || 0);\r\n    }\r\n    return out;\r\n}, 2, vec3.zero);\r\nvec3.minus = wrapGlMatrix((out, a, b) => {\r\n    if (typeof (b) === \"number\") {\r\n        out[0] = a[0] - b;\r\n        out[1] = a[1] - b;\r\n        out[2] = a[2] - b;\r\n    }\r\n    else {\r\n        out[0] = a[0] - b[0];\r\n        out[1] = a[1] - (b[1] || 0);\r\n        out[2] = a[2] - (b[2] || 0);\r\n    }\r\n    return out;\r\n}, 2, vec3.zero);\r\nvec3.mul = wrapGlMatrix((out, a, b) => {\r\n    if (typeof (b) === \"number\") {\r\n        out[0] = a[0] * b;\r\n        out[1] = a[1] * b;\r\n        out[2] = a[2] * b;\r\n    }\r\n    else {\r\n        out[0] = a[0] * b[0];\r\n        out[1] = a[1] * (b[1] === undefined ? 1 : b[1]);\r\n        out[2] = a[2] * (b[2] === undefined ? 1 : b[2]);\r\n    }\r\n    return out;\r\n}, 2, vec3.zero);\r\nvec3.div = wrapGlMatrix((out, a, b) => {\r\n    if (typeof (b) === \"number\") {\r\n        out[0] = a[0] / b;\r\n        out[1] = a[1] / b;\r\n        out[2] = a[2] / b;\r\n    }\r\n    else {\r\n        out[0] = a[0] / b[0];\r\n        out[1] = a[1] / (b[1] === undefined ? 1 : b[1]);\r\n        out[2] = a[2] / (b[2] === undefined ? 1 : b[2]);\r\n    }\r\n    return out;\r\n}, 2, vec3.zero);\r\nvec3.set = wrapGlMatrix((out, v) => {\r\n    out[0] = v[0];\r\n    out[1] = v[1];\r\n    out[2] = v[2];\r\n    return out;\r\n}, 1, vec3.zero);\r\nvec3.fill = wrapGlMatrix((out, n) => {\r\n    out[0] = out[1] = out[2] = n;\r\n    return out;\r\n}, 1, vec3.zero);\r\nvec3.distance = (u, v) => Math.hypot(u.x - v.x, u.y - v.y, u.z - v.z);\r\n//# sourceMappingURL=vec3.js.map","import { Vector3, vec3 } from \"./vec3\";\r\nimport { Vector2, vec2 } from \"./vec2\";\r\nimport { vec4 as glVec4 } from \"gl-matrix\";\r\nimport { wrapGlMatrix } from \"./utils\";\r\nconst V4Constructor = Array;\r\nexport class Vector4 extends V4Constructor {\r\n    get x() { return this[0]; }\r\n    set x(x) { this[0] = x; }\r\n    get y() { return this[1]; }\r\n    set y(y) { this[1] = y; }\r\n    get z() { return this[2]; }\r\n    set z(z) { this[2] = z; }\r\n    get w() { return this[3]; }\r\n    set w(w) { this[3] = w; }\r\n    get magnitude() {\r\n        return Math.hypot(...this);\r\n    }\r\n    get normalized() {\r\n        const m = this.magnitude;\r\n        return m == 0 ? vec4.zero() : this.clone().div(vec4(m, m, m, m));\r\n    }\r\n    get negative() {\r\n        return this.clone().negate();\r\n    }\r\n    get inversed() {\r\n        return this.clone().inverse();\r\n    }\r\n    constructor(x, y, z = 0, w = 0) {\r\n        super(x, y, z || 0, w || 0);\r\n    }\r\n    static zero() {\r\n        return new Vector4(0, 0, 0, 0);\r\n    }\r\n    static one() {\r\n        return new Vector4(1, 1, 1, 1);\r\n    }\r\n    asMut() { return this; }\r\n    plus(v) {\r\n        return vec4.plus(this, this, v);\r\n    }\r\n    minus(v) {\r\n        return vec4.minus(this, this, v);\r\n    }\r\n    mul(v) {\r\n        return vec4.mul(this, this, v);\r\n    }\r\n    div(v) {\r\n        return vec4.div(this, this, v);\r\n    }\r\n    dot(v) {\r\n        return this[0] * v[0]\r\n            + this[1] * v[1]\r\n            + this[2] * v[2]\r\n            + this[3] * v[3];\r\n    }\r\n    normalize() {\r\n        return vec4.normalize(this, this);\r\n    }\r\n    inverse() {\r\n        this[0] = 1 / this[0];\r\n        this[1] = 1 / this[1];\r\n        this[2] = 1 / this[2];\r\n        this[3] = 1 / this[3];\r\n        return this;\r\n    }\r\n    negate() {\r\n        this[0] = -this[0];\r\n        this[1] = -this[1];\r\n        this[2] = -this[2];\r\n        this[3] = -this[3];\r\n        return this;\r\n    }\r\n    clone(out = vec4.zero()) {\r\n        return out.set(this);\r\n    }\r\n    equals(v) {\r\n        if (v === undefined)\r\n            return false;\r\n        return v[0] === this[0]\r\n            && v[1] === this[1]\r\n            && v[2] === this[2]\r\n            && v[3] === this[3];\r\n    }\r\n    set(v) {\r\n        this[0] = v[0] || 0;\r\n        this[1] = v[1] || 0;\r\n        this[2] = v[2] || 0;\r\n        this[3] = v[3] || 0;\r\n        return this;\r\n    }\r\n    fill(n) {\r\n        this[0] = this[1] = this[2] = this[3] = n;\r\n        return this;\r\n    }\r\n    static math(func) {\r\n        return (...args) => {\r\n            return vec4(func(...args.map(v => v.x)), func(...args.map(v => v.y)), func(...args.map(v => v.z)), func(...args.map(v => v.w)));\r\n        };\r\n    }\r\n    static mathNonAlloc(func) {\r\n        return (out, ...args) => {\r\n            out[0] = func(...args.map(v => v[0]));\r\n            out[1] = func(...args.map(v => v[1]));\r\n            out[2] = func(...args.map(v => v[2]));\r\n            out[3] = func(...args.map(v => v[3]));\r\n            return out;\r\n        };\r\n    }\r\n    __to(type) {\r\n        switch (type) {\r\n            case Vector4:\r\n                return this.clone();\r\n            case Vector3:\r\n                return vec3(this[0], this[1], this[2]);\r\n            case Vector2:\r\n                return vec2(this[0], this[1]);\r\n        }\r\n        return this.clone();\r\n    }\r\n}\r\nexport function vec4(x, y = x, z = x, w = x) {\r\n    return new Vector4(x, y, z, w);\r\n}\r\nvec4.from = (src) => {\r\n    const [x = 0, y = 0, z = 0, w = 0] = src;\r\n    return vec4(x, y, z, w);\r\n};\r\nvec4.floor = (v) => vec4(Math.floor(v.x), Math.floor(v.y), Math.floor(v.z), Math.floor(v.w));\r\nvec4.zero = Vector4.zero;\r\nvec4.one = Vector4.one;\r\nvec4.math = Vector4.math;\r\nvec4.mathNonAlloc = Vector4.mathNonAlloc;\r\nvec4.normalize = wrapGlMatrix(glVec4.normalize, 1, vec4.zero);\r\nvec4.plus = wrapGlMatrix((out, a, b) => {\r\n    if (typeof (b) === \"number\") {\r\n        out[0] = a[0] + b;\r\n        out[1] = a[1] + b;\r\n        out[2] = a[2] + b;\r\n        out[3] = a[3] + b;\r\n    }\r\n    else {\r\n        out[0] = a[0] + b[0];\r\n        out[1] = a[1] + (b[1] || 0);\r\n        out[2] = a[2] + (b[2] || 0);\r\n        out[3] = a[3] + (b[3] || 0);\r\n    }\r\n    return out;\r\n}, 2, vec4.zero);\r\nvec4.minus = wrapGlMatrix((out, a, b) => {\r\n    if (typeof (b) === \"number\") {\r\n        out[0] = a[0] - b;\r\n        out[1] = a[1] - b;\r\n        out[2] = a[2] - b;\r\n        out[3] = a[3] - b;\r\n    }\r\n    else {\r\n        out[0] = a[0] - b[0];\r\n        out[1] = a[1] - (b[1] || 0);\r\n        out[2] = a[2] - (b[2] || 0);\r\n        out[3] = a[3] - (b[3] || 0);\r\n    }\r\n    return out;\r\n}, 2, vec4.zero);\r\nvec4.mul = wrapGlMatrix((out, a, b) => {\r\n    if (typeof (b) === \"number\") {\r\n        out[0] = a[0] * b;\r\n        out[1] = a[1] * b;\r\n        out[2] = a[2] * b;\r\n        out[3] = a[3] * b;\r\n    }\r\n    else {\r\n        out[0] = a[0] * b[0];\r\n        out[1] = a[1] * (b[1] === undefined ? 1 : b[1]);\r\n        out[2] = a[2] * (b[2] === undefined ? 1 : b[2]);\r\n        out[3] = a[3] * (b[3] === undefined ? 1 : b[3]);\r\n    }\r\n    return out;\r\n}, 2, vec4.zero);\r\nvec4.div = wrapGlMatrix((out, a, b) => {\r\n    if (typeof (b) === \"number\") {\r\n        out[0] = a[0] / b;\r\n        out[1] = a[1] / b;\r\n        out[2] = a[2] / b;\r\n        out[3] = a[3] / b;\r\n    }\r\n    else {\r\n        out[0] = a[0] / b[0];\r\n        out[1] = a[1] / (b[1] === undefined ? 1 : b[1]);\r\n        out[2] = a[2] / (b[2] === undefined ? 1 : b[2]);\r\n        out[3] = a[3] / (b[3] === undefined ? 1 : b[3]);\r\n    }\r\n    return out;\r\n}, 2, vec4.zero);\r\nvec4.set = wrapGlMatrix((out, v) => {\r\n    out[0] = v[0];\r\n    out[1] = v[1];\r\n    out[2] = v[2];\r\n    out[3] = v[3];\r\n    return out;\r\n}, 1, vec4.zero);\r\nvec4.fill = wrapGlMatrix((out, n) => {\r\n    out[0] = out[1] = out[2] = out[3] = n;\r\n    return out;\r\n}, 1, vec4.zero);\r\n//# sourceMappingURL=vec4.js.map","import { Rect } from \"../types/rect\";\r\nimport { vec2 } from \"../types/vec2\";\r\nexport var ImageSizing;\r\n(function (ImageSizing) {\r\n    ImageSizing[ImageSizing[\"Stretch\"] = 1] = \"Stretch\";\r\n    ImageSizing[ImageSizing[\"Cover\"] = 2] = \"Cover\";\r\n    ImageSizing[ImageSizing[\"Contain\"] = 3] = \"Contain\";\r\n    ImageSizing[ImageSizing[\"KeepLower\"] = 4] = \"KeepLower\";\r\n    ImageSizing[ImageSizing[\"KeepHigher\"] = 5] = \"KeepHigher\";\r\n    ImageSizing[ImageSizing[\"Center\"] = 6] = \"Center\";\r\n})(ImageSizing || (ImageSizing = {}));\r\nexport function imageResize(srcSize, dstSize, sizing) {\r\n    let srcRect = new Rect(vec2.zero(), srcSize);\r\n    let dstRect = new Rect(vec2.zero(), dstSize);\r\n    if (sizing === ImageSizing.Contain) {\r\n        let srcAspectRatio = srcSize.x / srcSize.y;\r\n        let dstAspectRatio = dstSize.x / dstSize.y;\r\n        // Source wider than destination\r\n        // Shrink destination viewport height\r\n        if (srcAspectRatio > dstAspectRatio) {\r\n            const delta = dstSize.y - srcSize.y * (dstSize.x / srcSize.x);\r\n            dstRect.min.y += delta / 2;\r\n            dstRect.max.y -= delta / 2;\r\n        }\r\n        // destination wider than source\r\n        // Shrink destination viewport width\r\n        else {\r\n            const delta = dstSize.x - srcSize.x * (dstSize.y / srcSize.y);\r\n            dstRect.min.x += delta / 2;\r\n            dstRect.max.x -= delta / 2;\r\n        }\r\n    }\r\n    else if (sizing === ImageSizing.Cover) {\r\n        let srcAspectRatio = srcSize.x / srcSize.y;\r\n        let dstAspectRatio = dstSize.x / dstSize.y;\r\n        // Source wider than destination\r\n        // shrink source rect with\r\n        if (srcAspectRatio > dstAspectRatio) {\r\n            const delta = srcSize.x - dstSize.x * (srcSize.y / dstSize.y);\r\n            srcRect.min.x += delta / 2;\r\n            srcRect.max.x -= delta / 2;\r\n        }\r\n        // destination wider than source\r\n        // Shrink source rect height\r\n        else {\r\n            const delta = srcSize.y - dstSize.y * (srcSize.x / dstSize.x);\r\n            srcRect.min.y += delta / 2;\r\n            srcRect.max.y -= delta / 2;\r\n        }\r\n    }\r\n    else {\r\n        if (srcSize.x < dstSize.x) {\r\n            switch (sizing) {\r\n                case ImageSizing.Center:\r\n                    const delta = dstSize.x - srcSize.x;\r\n                    dstRect.min.x += delta / 2;\r\n                    dstRect.max.x -= delta / 2;\r\n                    break;\r\n                case ImageSizing.KeepHigher:\r\n                    dstRect.min.x = dstSize.x - srcSize.x;\r\n                    break;\r\n                case ImageSizing.KeepLower:\r\n                    dstRect.max.x = srcSize.x;\r\n                    break;\r\n            }\r\n        }\r\n        else if (srcSize.x > dstSize.x) {\r\n            switch (sizing) {\r\n                case ImageSizing.Center:\r\n                    const delta = srcSize.x - dstSize.x;\r\n                    srcRect.min.x += delta / 2;\r\n                    srcRect.max.x -= delta / 2;\r\n                    break;\r\n                case ImageSizing.KeepHigher:\r\n                    srcRect.min.x = srcSize.x - dstSize.x;\r\n                    break;\r\n                case ImageSizing.KeepLower:\r\n                    srcRect.max.x = dstSize.x;\r\n                    break;\r\n            }\r\n        }\r\n        if (srcSize.y < dstSize.y) {\r\n            switch (sizing) {\r\n                case ImageSizing.Center:\r\n                    const delta = dstSize.y - srcSize.y;\r\n                    dstRect.min.y += delta / 2;\r\n                    dstRect.max.y -= delta / 2;\r\n                    break;\r\n                case ImageSizing.KeepHigher:\r\n                    dstRect.min.y = dstSize.y - srcSize.y;\r\n                    break;\r\n                case ImageSizing.KeepLower:\r\n                    dstRect.max.y = srcSize.y;\r\n                    break;\r\n            }\r\n        }\r\n        else if (srcSize.y > dstSize.y) {\r\n            switch (sizing) {\r\n                case ImageSizing.Center:\r\n                    const delta = srcSize.y - dstSize.y;\r\n                    srcRect.min.y += delta / 2;\r\n                    srcRect.max.y -= delta / 2;\r\n                    break;\r\n                case ImageSizing.KeepHigher:\r\n                    srcRect.min.y = srcSize.y - dstSize.y;\r\n                    break;\r\n                case ImageSizing.KeepLower:\r\n                    srcRect.max.y = dstSize.y;\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n    return [srcRect, dstRect];\r\n}\r\n//# sourceMappingURL=image-sizing.js.map","export * from \"./mesh-builder\";\r\nimport * as Utils from \"./public-utils\";\r\nexport { Utils };\r\n//# sourceMappingURL=index.js.map","import { vec3, vec2, Color, mul } from \"../types\";\r\nimport { GlobalContext } from \"../core/global\";\r\nimport { DefaultVertexData, Mesh } from \"../core/mesh\";\r\nexport class MeshBuilder {\r\n    constructor(verticesCapacity = 16, trianglesCapacity = verticesCapacity * 3, structure = DefaultVertexData, ctx = GlobalContext()) {\r\n        this.verticesCount = 0;\r\n        this.indicesCount = 0;\r\n        this.mesh = new Mesh(structure, ctx);\r\n        this.mesh.resize(verticesCapacity, trianglesCapacity);\r\n    }\r\n    addPolygon(...verts) {\r\n        if (verts.length <= 0)\r\n            return;\r\n        if (this.verticesCount + verts.length > this.mesh.vertices.length) {\r\n            this.mesh.resize(this.mesh.vertices.length * 2, this.mesh.indices.length * 2, true);\r\n        }\r\n        const base = this.verticesCount;\r\n        for (const key in verts[0]) {\r\n            for (let i = 0; i < verts.length; i++) {\r\n                this.mesh.vertices[base + i][key].set(verts[i][key]);\r\n            }\r\n        }\r\n        for (let i = 0; i < verts.length - 2; i++) {\r\n            this.mesh.indices[this.indicesCount + i * 3 + 0] = base + 0;\r\n            this.mesh.indices[this.indicesCount + i * 3 + 1] = base + i + 1;\r\n            this.mesh.indices[this.indicesCount + i * 3 + 2] = base + i + 2;\r\n        }\r\n        this.verticesCount += verts.length;\r\n        this.indicesCount += (verts.length - 2) * 3;\r\n    }\r\n    toMesh() {\r\n        if (this.mesh.indices.length != this.indicesCount)\r\n            this.mesh.resize(this.verticesCount, this.indicesCount, true);\r\n        else if (this.mesh.vertices.length != this.verticesCount)\r\n            this.mesh.vertices.resize(this.verticesCount, true);\r\n        return this.mesh;\r\n    }\r\n    static quad(center = vec2.zero(), size = vec2.one(), ctx = GlobalContext()) {\r\n        const halfSize = vec2.mul(size, 0.5);\r\n        const mesh = new Mesh(ctx);\r\n        mesh.resize(4, 6);\r\n        mesh.vertices[0].vert.set([center.x - halfSize.x, center.y - halfSize.y, 0]);\r\n        mesh.vertices[1].vert.set([center.x + halfSize.x, center.y - halfSize.y, 0]);\r\n        mesh.vertices[2].vert.set([center.x + halfSize.x, center.y + halfSize.y, 0]);\r\n        mesh.vertices[3].vert.set([center.x - halfSize.x, center.y + halfSize.y, 0]);\r\n        mesh.vertices[0].uv.set([0, 0]);\r\n        mesh.vertices[1].uv.set([1, 0]);\r\n        mesh.vertices[2].uv.set([1, 1]);\r\n        mesh.vertices[3].uv.set([0, 1]);\r\n        mesh.vertices[0].normal.set([0, 0, 1]);\r\n        mesh.vertices[1].normal.set([0, 0, 1]);\r\n        mesh.vertices[2].normal.set([0, 0, 1]);\r\n        mesh.vertices[3].normal.set([0, 0, 1]);\r\n        mesh.vertices[0].color.fill(1);\r\n        mesh.vertices[1].color.fill(1);\r\n        mesh.vertices[2].color.fill(1);\r\n        mesh.vertices[3].color.fill(1);\r\n        mesh.indices.set([0, 1, 2, 0, 2, 3]);\r\n        return mesh;\r\n    }\r\n    static ndcQuad(ctx = GlobalContext()) {\r\n        return this.quad(vec2.zero(), vec2(2, 2), ctx);\r\n    }\r\n    static ndcTriangle(ctx = GlobalContext()) {\r\n        const mesh = new Mesh(ctx);\r\n        mesh.resize(3, 3);\r\n        mesh.vertices[0].vert.set([-1, -1, 0]);\r\n        mesh.vertices[1].vert.set([3, -1, 0]);\r\n        mesh.vertices[2].vert.set([-1, 3, 0]);\r\n        mesh.vertices[0].uv.set([0, 0]);\r\n        mesh.vertices[1].uv.set([2, 0]);\r\n        mesh.vertices[2].uv.set([0, 2]);\r\n        mesh.vertices[0].normal.set([0, 0, 1]);\r\n        mesh.vertices[1].normal.set([0, 0, 1]);\r\n        mesh.vertices[2].normal.set([0, 0, 1]);\r\n        mesh.vertices[0].color.fill(1);\r\n        mesh.vertices[1].color.fill(1);\r\n        mesh.vertices[2].color.fill(1);\r\n        mesh.indices.set([0, 1, 2]);\r\n        mesh.name = \"mesh_ndc_triangle\";\r\n        return mesh;\r\n    }\r\n    static cube(center = vec3.zero(), size = vec3.one(), ctx = GlobalContext()) {\r\n        const verts = [\r\n            vec3(-.5, -.5, -.5).mul(size).plus(center),\r\n            vec3(.5, -.5, -.5).mul(size).plus(center),\r\n            vec3(.5, .5, -.5).mul(size).plus(center),\r\n            vec3(-.5, .5, -.5).mul(size).plus(center),\r\n            vec3(-.5, -.5, .5).mul(size).plus(center),\r\n            vec3(.5, -.5, .5).mul(size).plus(center),\r\n            vec3(.5, .5, .5).mul(size).plus(center),\r\n            vec3(-.5, .5, .5).mul(size).plus(center),\r\n        ];\r\n        const uvs = [\r\n            vec2(0, 0),\r\n            vec2(1, 0),\r\n            vec2(1, 1),\r\n            vec2(0, 1)\r\n        ];\r\n        const mb = new MeshBuilder(24, 36, DefaultVertexData, ctx);\r\n        mb.addPolygon({\r\n            vert: verts[1],\r\n            uv: uvs[0],\r\n            normal: vec3(0, 0, -1),\r\n        }, {\r\n            vert: verts[0],\r\n            uv: uvs[1],\r\n            normal: vec3(0, 0, -1),\r\n        }, {\r\n            vert: verts[3],\r\n            uv: uvs[2],\r\n            normal: vec3(0, 0, -1),\r\n        }, {\r\n            vert: verts[2],\r\n            uv: uvs[3],\r\n            normal: vec3(0, 0, -1),\r\n        });\r\n        mb.addPolygon({\r\n            vert: verts[5],\r\n            uv: uvs[0],\r\n            normal: vec3(1, 0, 0),\r\n        }, {\r\n            vert: verts[1],\r\n            uv: uvs[1],\r\n            normal: vec3(1, 0, 0),\r\n        }, {\r\n            vert: verts[2],\r\n            uv: uvs[2],\r\n            normal: vec3(1, 0, 0),\r\n        }, {\r\n            vert: verts[6],\r\n            uv: uvs[3],\r\n            normal: vec3(1, 0, 0),\r\n        });\r\n        mb.addPolygon({\r\n            vert: verts[4],\r\n            uv: uvs[0],\r\n            normal: vec3(0, 0, 1),\r\n        }, {\r\n            vert: verts[5],\r\n            uv: uvs[1],\r\n            normal: vec3(0, 0, 1),\r\n        }, {\r\n            vert: verts[6],\r\n            uv: uvs[2],\r\n            normal: vec3(0, 0, 1),\r\n        }, {\r\n            vert: verts[7],\r\n            uv: uvs[3],\r\n            normal: vec3(0, 0, 1),\r\n        });\r\n        mb.addPolygon({\r\n            vert: verts[0],\r\n            uv: uvs[0],\r\n            normal: vec3(-1, 0, 0),\r\n        }, {\r\n            vert: verts[4],\r\n            uv: uvs[1],\r\n            normal: vec3(-1, 0, 0),\r\n        }, {\r\n            vert: verts[7],\r\n            uv: uvs[2],\r\n            normal: vec3(-1, 0, 0),\r\n        }, {\r\n            vert: verts[3],\r\n            uv: uvs[3],\r\n            normal: vec3(-1, 0, 0),\r\n        });\r\n        mb.addPolygon({\r\n            vert: verts[7],\r\n            uv: uvs[0],\r\n            normal: vec3(0, 1, 0),\r\n        }, {\r\n            vert: verts[6],\r\n            uv: uvs[1],\r\n            normal: vec3(0, 1, 0),\r\n        }, {\r\n            vert: verts[2],\r\n            uv: uvs[2],\r\n            normal: vec3(0, 1, 0),\r\n        }, {\r\n            vert: verts[3],\r\n            uv: uvs[3],\r\n            normal: vec3(0, 1, 0),\r\n        });\r\n        mb.addPolygon({\r\n            vert: verts[0],\r\n            uv: uvs[0],\r\n            normal: vec3(0, -1, 0),\r\n        }, {\r\n            vert: verts[1],\r\n            uv: uvs[1],\r\n            normal: vec3(0, -1, 0),\r\n        }, {\r\n            vert: verts[5],\r\n            uv: uvs[2],\r\n            normal: vec3(0, -1, 0),\r\n        }, {\r\n            vert: verts[4],\r\n            uv: uvs[3],\r\n            normal: vec3(0, -1, 0),\r\n        });\r\n        const mesh = mb.toMesh();\r\n        mesh.vertices.forEach(vert => vert.color.fill(1));\r\n        mesh.name = \"mesh_cube\";\r\n        return mesh;\r\n    }\r\n    static sphereNormalizedCube(center = vec3.zero(), radius = 0.5, segments = 12, ctx = GlobalContext()) {\r\n        // There are actually duplicated vertices at the edge of each surface\r\n        const totalVerts = 6 * (segments + 1) * (segments + 1);\r\n        const totalIndices = segments * segments * 3 * 2 * 6;\r\n        let mesh = new Mesh();\r\n        mesh.resize(totalVerts, totalIndices);\r\n        let indexIdx = 0;\r\n        const uniqueVerts = [];\r\n        const uniqueVertsMap = [];\r\n        // first we build a cube surface, each vertex is unique at location (x, y, z)\r\n        // Map from cube surface location to sphere vertex\r\n        for (let f = 0; f < 6; ++f) {\r\n            for (let i = 0; i <= segments; ++i) {\r\n                for (let j = 0; j <= segments; ++j) {\r\n                    let idx = [\r\n                        () => vec3(0, i, j),\r\n                        () => vec3(segments, i, j),\r\n                        () => vec3(i, j, 0),\r\n                        () => vec3(i, j, segments),\r\n                        () => vec3(i, 0, j),\r\n                        () => vec3(i, segments, j),\r\n                    ][f]();\r\n                    let x = uniqueVertsMap[idx.x] || (uniqueVertsMap[idx.x] = []);\r\n                    let y = x[idx.y] || (x[idx.y] = []);\r\n                    let z = y[idx.z];\r\n                    if (z === undefined) {\r\n                        y[idx.z] = uniqueVerts.length;\r\n                        uniqueVerts.push(idx);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        mesh.resize(uniqueVerts.length, totalIndices);\r\n        uniqueVerts.forEach((vertIdx, idx) => {\r\n            let normal = vec3.div(vertIdx, segments).mul(2).minus(1).normalize();\r\n            let pos = vec3.mul(normal, radius);\r\n            const [_, theta, phi] = sphericalCoord(pos);\r\n            const uv = [phi / (Math.PI * 2), theta / Math.PI];\r\n            mesh.vertices[idx].vert.set(pos);\r\n            mesh.vertices[idx].normal.set(normal);\r\n            mesh.vertices[idx].color.set(Color.white);\r\n            mesh.vertices[idx].uv.set(uv);\r\n            mesh.vertices[idx].uv2.set(uv);\r\n        });\r\n        const usedVerts = [];\r\n        for (let f = 0; f < 6; ++f) {\r\n            for (let i = 0; i <= segments; ++i) {\r\n                for (let j = 0; j <= segments; ++j) {\r\n                    let vertIdx = [\r\n                        () => vec3(segments, i, j),\r\n                        () => vec3(0, i, segments - j),\r\n                        () => vec3(i, j, segments),\r\n                        () => vec3(i, segments - j, 0),\r\n                        () => vec3(i, segments, segments - j),\r\n                        () => vec3(i, 0, j),\r\n                    ][f]();\r\n                    usedVerts.push(uniqueVertsMap[vertIdx.x][vertIdx.y][vertIdx.z]);\r\n                }\r\n            }\r\n            for (let i = 0; i < segments; ++i) {\r\n                for (let j = 0; j < segments; ++j) {\r\n                    let u = (f * (segments + 1) * (segments + 1) + i * (segments + 1) + j);\r\n                    let v = u + (segments + 1);\r\n                    mesh.indices[indexIdx++] = usedVerts[v + 0];\r\n                    mesh.indices[indexIdx++] = usedVerts[u + 1];\r\n                    mesh.indices[indexIdx++] = usedVerts[u + 0];\r\n                    mesh.indices[indexIdx++] = usedVerts[v + 0];\r\n                    mesh.indices[indexIdx++] = usedVerts[v + 1];\r\n                    mesh.indices[indexIdx++] = usedVerts[u + 1];\r\n                }\r\n            }\r\n        }\r\n        return mesh;\r\n    }\r\n}\r\nfunction sphericalCoord(p) {\r\n    const r = p.magnitude;\r\n    const theta = Math.acos(p.y / r);\r\n    const phi = Math.atan2(p.z, p.x);\r\n    return [r, theta, phi];\r\n}\r\n/** @deprecated */\r\nexport class MeshBuilderLegacy {\r\n    constructor(capacity = 0, ctx = GlobalContext()) {\r\n        this.verts = [];\r\n        this.triangles = [];\r\n        this.uvs = [];\r\n        this.colors = [];\r\n        this.ctx = ctx;\r\n    }\r\n    addPolygon(verts, uvs) {\r\n        const base = this.verts.length;\r\n        for (let i = 0; i < verts.length; i++) {\r\n            this.verts.push(verts[i]);\r\n            this.uvs.push(uvs[i]);\r\n            this.colors.push(Color.white);\r\n        }\r\n        for (let i = 2; i < verts.length; i++) {\r\n            this.triangles.push(base + 0, base + i - 1, base + i);\r\n        }\r\n    }\r\n    addSubMesh(verts, triangles, colors = [Color.white], uvs = [vec2(0, 0)]) {\r\n        const base = this.verts.length;\r\n        if (triangles.length % 3 !== 0)\r\n            throw new Error(\"Invalid number of triangles.\");\r\n        for (let i = 0; i < verts.length; i++) {\r\n            this.verts.push(verts[i]);\r\n            this.uvs.push(i >= uvs.length ? uvs[uvs.length - 1] : uvs[i]);\r\n            this.colors.push(i >= colors.length ? colors[colors.length - 1] : colors[i]);\r\n        }\r\n        for (let i = 0; i < triangles.length; i++) {\r\n            this.triangles.push(base + triangles[i]);\r\n        }\r\n    }\r\n    toMesh() {\r\n        const mesh = new Mesh(this.ctx);\r\n        mesh.verts = this.verts;\r\n        mesh.triangles = this.triangles;\r\n        mesh.colors = this.colors;\r\n        mesh.uvs = this.uvs;\r\n        mesh.calculateNormals();\r\n        return mesh;\r\n    }\r\n    static quad(center = vec2.zero(), size = vec2.one()) {\r\n        const halfSize = mul(size, vec2(0.5));\r\n        const quad = new Mesh();\r\n        quad.verts = [\r\n            vec3(center.x - halfSize.x, center.y - halfSize.y, 0),\r\n            vec3(center.x + halfSize.x, center.y - halfSize.y, 0),\r\n            vec3(center.x + halfSize.x, center.y + halfSize.y, 0),\r\n            vec3(center.x - halfSize.x, center.y + halfSize.y, 0),\r\n        ];\r\n        quad.triangles = [\r\n            0, 1, 3,\r\n            1, 2, 3,\r\n        ];\r\n        quad.uvs = [\r\n            vec2(0, 0),\r\n            vec2(1, 0),\r\n            vec2(1, 1),\r\n            vec2(0, 1)\r\n        ];\r\n        quad.normals = [\r\n            vec3(0, 0, 1),\r\n            vec3(0, 0, 1),\r\n            vec3(0, 0, 1),\r\n            vec3(0, 0, 1),\r\n        ];\r\n        // quad.calculateNormals();\r\n        quad.name = \"mesh_quad\";\r\n        return quad;\r\n    }\r\n    static ndcQuad() {\r\n        return this.quad(vec2.zero(), vec2(2, 2));\r\n    }\r\n    static ndcTriangle() {\r\n        const mesh = new Mesh();\r\n        mesh.verts = [\r\n            vec3(-1, -1, 0),\r\n            vec3(3, -1, 0),\r\n            vec3(-1, 3, 0),\r\n        ];\r\n        mesh.triangles = [0, 1, 2];\r\n        mesh.uvs = [\r\n            vec2(0, 0),\r\n            vec2(2, 0),\r\n            vec2(0, 2),\r\n        ];\r\n        mesh.normals = [\r\n            vec3(0, 0, 1),\r\n            vec3(0, 0, 1),\r\n            vec3(0, 0, 1),\r\n        ];\r\n        mesh.name = \"mesh_ndc_triangle\";\r\n        return mesh;\r\n    }\r\n}\r\n//# sourceMappingURL=mesh-builder.js.map","export class ObjectPool {\r\n    constructor(allocator) {\r\n        this.pool = [];\r\n        this.allocator = allocator;\r\n    }\r\n    get(...args) {\r\n        if (this.pool.length <= 0)\r\n            return this.allocator(...args);\r\n        return this.pool.pop();\r\n    }\r\n    release(obj) {\r\n        this.pool.push(obj);\r\n    }\r\n}\r\n//# sourceMappingURL=object-pool.js.map","export * from \"./image-sizing\";\r\n//# sourceMappingURL=public-utils.js.map","import \"reflect-metadata\";\r\nexport function panicNull(t, msg) {\r\n    if (t === null)\r\n        throw new Error(msg);\r\n    return t;\r\n}\r\nexport function panic(msg) {\r\n    throw new Error(msg);\r\n}\r\nexport function warn(msg) {\r\n    console.warn(msg);\r\n    return null;\r\n}\r\nexport function decorator(name, defaultValue = undefined, dataWrapper = v => v) {\r\n    const metadataKey = Symbol(name);\r\n    return [\r\n        (value) => {\r\n            if (value === undefined)\r\n                value = defaultValue;\r\n            return Reflect.metadata(metadataKey, dataWrapper(value));\r\n        },\r\n        (target, propKey) => {\r\n            if (propKey === undefined)\r\n                return Reflect.getMetadata(metadataKey, target);\r\n            else\r\n                return Reflect.getMetadata(metadataKey, target, propKey);\r\n        }\r\n    ];\r\n}\r\nexport function getUniformsLocation(gl, program, uniforms) {\r\n    const out = {};\r\n    for (const key in uniforms) {\r\n        out[key] = gl.getUniformLocation(program, uniforms[key]);\r\n    }\r\n    return out;\r\n}\r\nexport function fillArray(element, count) {\r\n    const arr = new Array(count);\r\n    for (let i = 0; i < count; i++)\r\n        arr[i] = typeof (element) === \"function\" ? element(i) : element;\r\n    return arr;\r\n}\r\nexport class DoubleBuffer {\r\n    constructor(init) {\r\n        this.currentIdx = 0;\r\n        this.buffers = [init(), init()];\r\n    }\r\n    get current() { return this.buffers[this.currentIdx % 2]; }\r\n    set current(value) { this.buffers[this.currentIdx % 2] = value; }\r\n    get back() { return this.buffers[(this.currentIdx + 1) % 2]; }\r\n    set back(value) { this.buffers[(this.currentIdx + 1) % 2] = value; }\r\n    update() {\r\n        this.currentIdx++;\r\n    }\r\n}\r\nexport function setImmediate(invoker) {\r\n    setTimeout(invoker, 0);\r\n}\r\nexport function cloneUniformValue(value) {\r\n    if (value === null)\r\n        return null;\r\n    if (typeof (value) === \"number\")\r\n        return value;\r\n    else if (value instanceof Array)\r\n        return value.clone();\r\n    return value;\r\n}\r\n//# sourceMappingURL=util.js.map","/**\r\n * Common utilities\r\n * @module glMatrix\r\n */\n// Configuration Constants\nexport var EPSILON = 0.000001;\nexport var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;\nexport var RANDOM = Math.random;\n/**\r\n * Sets the type of array used when creating new vectors and matrices\r\n *\r\n * @param {Float32ArrayConstructor | ArrayConstructor} type Array type, such as Float32Array or Array\r\n */\n\nexport function setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\nvar degree = Math.PI / 180;\n/**\r\n * Convert Degree To Radian\r\n *\r\n * @param {Number} a Angle in Degrees\r\n */\n\nexport function toRadian(a) {\n  return a * degree;\n}\n/**\r\n * Tests whether or not the arguments have approximately the same value, within an absolute\r\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\r\n * than or equal to 1.0, and a relative tolerance is used for larger values)\r\n *\r\n * @param {Number} a The first number to test.\r\n * @param {Number} b The second number to test.\r\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));\n}\nif (!Math.hypot) Math.hypot = function () {\n  var y = 0,\n      i = arguments.length;\n\n  while (i--) {\n    y += arguments[i] * arguments[i];\n  }\n\n  return Math.sqrt(y);\n};","import * as glMatrix from \"./common.js\";\nimport * as mat2 from \"./mat2.js\";\nimport * as mat2d from \"./mat2d.js\";\nimport * as mat3 from \"./mat3.js\";\nimport * as mat4 from \"./mat4.js\";\nimport * as quat from \"./quat.js\";\nimport * as quat2 from \"./quat2.js\";\nimport * as vec2 from \"./vec2.js\";\nimport * as vec3 from \"./vec3.js\";\nimport * as vec4 from \"./vec4.js\";\nexport { glMatrix, mat2, mat2d, mat3, mat4, quat, quat2, vec2, vec3, vec4 };","import * as glMatrix from \"./common.js\";\n/**\r\n * 2x2 Matrix\r\n * @module mat2\r\n */\n\n/**\r\n * Creates a new identity mat2\r\n *\r\n * @returns {mat2} a new 2x2 matrix\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  out[0] = 1;\n  out[3] = 1;\n  return out;\n}\n/**\r\n * Creates a new mat2 initialized with values from an existing matrix\r\n *\r\n * @param {ReadonlyMat2} a matrix to clone\r\n * @returns {mat2} a new 2x2 matrix\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Copy the values from one mat2 to another\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {ReadonlyMat2} a the source matrix\r\n * @returns {mat2} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Set a mat2 to the identity matrix\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @returns {mat2} out\r\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  return out;\n}\n/**\r\n * Create a new mat2 with the given values\r\n *\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 2)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 3)\r\n * @returns {mat2} out A new 2x2 matrix\r\n */\n\nexport function fromValues(m00, m01, m10, m11) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m10;\n  out[3] = m11;\n  return out;\n}\n/**\r\n * Set the components of a mat2 to the given values\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 2)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 3)\r\n * @returns {mat2} out\r\n */\n\nexport function set(out, m00, m01, m10, m11) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m10;\n  out[3] = m11;\n  return out;\n}\n/**\r\n * Transpose the values of a mat2\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {ReadonlyMat2} a the source matrix\r\n * @returns {mat2} out\r\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache\n  // some values\n  if (out === a) {\n    var a1 = a[1];\n    out[1] = a[2];\n    out[2] = a1;\n  } else {\n    out[0] = a[0];\n    out[1] = a[2];\n    out[2] = a[1];\n    out[3] = a[3];\n  }\n\n  return out;\n}\n/**\r\n * Inverts a mat2\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {ReadonlyMat2} a the source matrix\r\n * @returns {mat2} out\r\n */\n\nexport function invert(out, a) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3]; // Calculate the determinant\n\n  var det = a0 * a3 - a2 * a1;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = a3 * det;\n  out[1] = -a1 * det;\n  out[2] = -a2 * det;\n  out[3] = a0 * det;\n  return out;\n}\n/**\r\n * Calculates the adjugate of a mat2\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {ReadonlyMat2} a the source matrix\r\n * @returns {mat2} out\r\n */\n\nexport function adjoint(out, a) {\n  // Caching this value is nessecary if out == a\n  var a0 = a[0];\n  out[0] = a[3];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a0;\n  return out;\n}\n/**\r\n * Calculates the determinant of a mat2\r\n *\r\n * @param {ReadonlyMat2} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\n\nexport function determinant(a) {\n  return a[0] * a[3] - a[2] * a[1];\n}\n/**\r\n * Multiplies two mat2's\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {ReadonlyMat2} a the first operand\r\n * @param {ReadonlyMat2} b the second operand\r\n * @returns {mat2} out\r\n */\n\nexport function multiply(out, a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  out[0] = a0 * b0 + a2 * b1;\n  out[1] = a1 * b0 + a3 * b1;\n  out[2] = a0 * b2 + a2 * b3;\n  out[3] = a1 * b2 + a3 * b3;\n  return out;\n}\n/**\r\n * Rotates a mat2 by the given angle\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {ReadonlyMat2} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat2} out\r\n */\n\nexport function rotate(out, a, rad) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  out[0] = a0 * c + a2 * s;\n  out[1] = a1 * c + a3 * s;\n  out[2] = a0 * -s + a2 * c;\n  out[3] = a1 * -s + a3 * c;\n  return out;\n}\n/**\r\n * Scales the mat2 by the dimensions in the given vec2\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {ReadonlyMat2} a the matrix to rotate\r\n * @param {ReadonlyVec2} v the vec2 to scale the matrix by\r\n * @returns {mat2} out\r\n **/\n\nexport function scale(out, a, v) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var v0 = v[0],\n      v1 = v[1];\n  out[0] = a0 * v0;\n  out[1] = a1 * v0;\n  out[2] = a2 * v1;\n  out[3] = a3 * v1;\n  return out;\n}\n/**\r\n * Creates a matrix from a given angle\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat2.identity(dest);\r\n *     mat2.rotate(dest, dest, rad);\r\n *\r\n * @param {mat2} out mat2 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat2} out\r\n */\n\nexport function fromRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  out[0] = c;\n  out[1] = s;\n  out[2] = -s;\n  out[3] = c;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat2.identity(dest);\r\n *     mat2.scale(dest, dest, vec);\r\n *\r\n * @param {mat2} out mat2 receiving operation result\r\n * @param {ReadonlyVec2} v Scaling vector\r\n * @returns {mat2} out\r\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = v[1];\n  return out;\n}\n/**\r\n * Returns a string representation of a mat2\r\n *\r\n * @param {ReadonlyMat2} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\n\nexport function str(a) {\n  return \"mat2(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \")\";\n}\n/**\r\n * Returns Frobenius norm of a mat2\r\n *\r\n * @param {ReadonlyMat2} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3]);\n}\n/**\r\n * Returns L, D and U matrices (Lower triangular, Diagonal and Upper triangular) by factorizing the input matrix\r\n * @param {ReadonlyMat2} L the lower triangular matrix\r\n * @param {ReadonlyMat2} D the diagonal matrix\r\n * @param {ReadonlyMat2} U the upper triangular matrix\r\n * @param {ReadonlyMat2} a the input matrix to factorize\r\n */\n\nexport function LDU(L, D, U, a) {\n  L[2] = a[2] / a[0];\n  U[0] = a[0];\n  U[1] = a[1];\n  U[3] = a[3] - L[2] * U[1];\n  return [L, D, U];\n}\n/**\r\n * Adds two mat2's\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {ReadonlyMat2} a the first operand\r\n * @param {ReadonlyMat2} b the second operand\r\n * @returns {mat2} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  return out;\n}\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {ReadonlyMat2} a the first operand\r\n * @param {ReadonlyMat2} b the second operand\r\n * @returns {mat2} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  return out;\n}\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyMat2} a The first matrix.\r\n * @param {ReadonlyMat2} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyMat2} a The first matrix.\r\n * @param {ReadonlyMat2} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));\n}\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat2} out the receiving matrix\r\n * @param {ReadonlyMat2} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat2} out\r\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  return out;\n}\n/**\r\n * Adds two mat2's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat2} out the receiving vector\r\n * @param {ReadonlyMat2} a the first operand\r\n * @param {ReadonlyMat2} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat2} out\r\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  return out;\n}\n/**\r\n * Alias for {@link mat2.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link mat2.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\n/**\r\n * 2x3 Matrix\r\n * @module mat2d\r\n * @description\r\n * A mat2d contains six elements defined as:\r\n * <pre>\r\n * [a, b,\r\n *  c, d,\r\n *  tx, ty]\r\n * </pre>\r\n * This is a short form for the 3x3 matrix:\r\n * <pre>\r\n * [a, b, 0,\r\n *  c, d, 0,\r\n *  tx, ty, 1]\r\n * </pre>\r\n * The last column is ignored so the array is shorter and operations are faster.\r\n */\n\n/**\r\n * Creates a new identity mat2d\r\n *\r\n * @returns {mat2d} a new 2x3 matrix\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(6);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[4] = 0;\n    out[5] = 0;\n  }\n\n  out[0] = 1;\n  out[3] = 1;\n  return out;\n}\n/**\r\n * Creates a new mat2d initialized with values from an existing matrix\r\n *\r\n * @param {ReadonlyMat2d} a matrix to clone\r\n * @returns {mat2d} a new 2x3 matrix\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(6);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  return out;\n}\n/**\r\n * Copy the values from one mat2d to another\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {ReadonlyMat2d} a the source matrix\r\n * @returns {mat2d} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  return out;\n}\n/**\r\n * Set a mat2d to the identity matrix\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @returns {mat2d} out\r\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = 0;\n  out[5] = 0;\n  return out;\n}\n/**\r\n * Create a new mat2d with the given values\r\n *\r\n * @param {Number} a Component A (index 0)\r\n * @param {Number} b Component B (index 1)\r\n * @param {Number} c Component C (index 2)\r\n * @param {Number} d Component D (index 3)\r\n * @param {Number} tx Component TX (index 4)\r\n * @param {Number} ty Component TY (index 5)\r\n * @returns {mat2d} A new mat2d\r\n */\n\nexport function fromValues(a, b, c, d, tx, ty) {\n  var out = new glMatrix.ARRAY_TYPE(6);\n  out[0] = a;\n  out[1] = b;\n  out[2] = c;\n  out[3] = d;\n  out[4] = tx;\n  out[5] = ty;\n  return out;\n}\n/**\r\n * Set the components of a mat2d to the given values\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {Number} a Component A (index 0)\r\n * @param {Number} b Component B (index 1)\r\n * @param {Number} c Component C (index 2)\r\n * @param {Number} d Component D (index 3)\r\n * @param {Number} tx Component TX (index 4)\r\n * @param {Number} ty Component TY (index 5)\r\n * @returns {mat2d} out\r\n */\n\nexport function set(out, a, b, c, d, tx, ty) {\n  out[0] = a;\n  out[1] = b;\n  out[2] = c;\n  out[3] = d;\n  out[4] = tx;\n  out[5] = ty;\n  return out;\n}\n/**\r\n * Inverts a mat2d\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {ReadonlyMat2d} a the source matrix\r\n * @returns {mat2d} out\r\n */\n\nexport function invert(out, a) {\n  var aa = a[0],\n      ab = a[1],\n      ac = a[2],\n      ad = a[3];\n  var atx = a[4],\n      aty = a[5];\n  var det = aa * ad - ab * ac;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = ad * det;\n  out[1] = -ab * det;\n  out[2] = -ac * det;\n  out[3] = aa * det;\n  out[4] = (ac * aty - ad * atx) * det;\n  out[5] = (ab * atx - aa * aty) * det;\n  return out;\n}\n/**\r\n * Calculates the determinant of a mat2d\r\n *\r\n * @param {ReadonlyMat2d} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\n\nexport function determinant(a) {\n  return a[0] * a[3] - a[1] * a[2];\n}\n/**\r\n * Multiplies two mat2d's\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {ReadonlyMat2d} a the first operand\r\n * @param {ReadonlyMat2d} b the second operand\r\n * @returns {mat2d} out\r\n */\n\nexport function multiply(out, a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5];\n  out[0] = a0 * b0 + a2 * b1;\n  out[1] = a1 * b0 + a3 * b1;\n  out[2] = a0 * b2 + a2 * b3;\n  out[3] = a1 * b2 + a3 * b3;\n  out[4] = a0 * b4 + a2 * b5 + a4;\n  out[5] = a1 * b4 + a3 * b5 + a5;\n  return out;\n}\n/**\r\n * Rotates a mat2d by the given angle\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {ReadonlyMat2d} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat2d} out\r\n */\n\nexport function rotate(out, a, rad) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5];\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  out[0] = a0 * c + a2 * s;\n  out[1] = a1 * c + a3 * s;\n  out[2] = a0 * -s + a2 * c;\n  out[3] = a1 * -s + a3 * c;\n  out[4] = a4;\n  out[5] = a5;\n  return out;\n}\n/**\r\n * Scales the mat2d by the dimensions in the given vec2\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {ReadonlyMat2d} a the matrix to translate\r\n * @param {ReadonlyVec2} v the vec2 to scale the matrix by\r\n * @returns {mat2d} out\r\n **/\n\nexport function scale(out, a, v) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5];\n  var v0 = v[0],\n      v1 = v[1];\n  out[0] = a0 * v0;\n  out[1] = a1 * v0;\n  out[2] = a2 * v1;\n  out[3] = a3 * v1;\n  out[4] = a4;\n  out[5] = a5;\n  return out;\n}\n/**\r\n * Translates the mat2d by the dimensions in the given vec2\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {ReadonlyMat2d} a the matrix to translate\r\n * @param {ReadonlyVec2} v the vec2 to translate the matrix by\r\n * @returns {mat2d} out\r\n **/\n\nexport function translate(out, a, v) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5];\n  var v0 = v[0],\n      v1 = v[1];\n  out[0] = a0;\n  out[1] = a1;\n  out[2] = a2;\n  out[3] = a3;\n  out[4] = a0 * v0 + a2 * v1 + a4;\n  out[5] = a1 * v0 + a3 * v1 + a5;\n  return out;\n}\n/**\r\n * Creates a matrix from a given angle\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat2d.identity(dest);\r\n *     mat2d.rotate(dest, dest, rad);\r\n *\r\n * @param {mat2d} out mat2d receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat2d} out\r\n */\n\nexport function fromRotation(out, rad) {\n  var s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c;\n  out[1] = s;\n  out[2] = -s;\n  out[3] = c;\n  out[4] = 0;\n  out[5] = 0;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat2d.identity(dest);\r\n *     mat2d.scale(dest, dest, vec);\r\n *\r\n * @param {mat2d} out mat2d receiving operation result\r\n * @param {ReadonlyVec2} v Scaling vector\r\n * @returns {mat2d} out\r\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = v[1];\n  out[4] = 0;\n  out[5] = 0;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat2d.identity(dest);\r\n *     mat2d.translate(dest, dest, vec);\r\n *\r\n * @param {mat2d} out mat2d receiving operation result\r\n * @param {ReadonlyVec2} v Translation vector\r\n * @returns {mat2d} out\r\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = v[0];\n  out[5] = v[1];\n  return out;\n}\n/**\r\n * Returns a string representation of a mat2d\r\n *\r\n * @param {ReadonlyMat2d} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\n\nexport function str(a) {\n  return \"mat2d(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \")\";\n}\n/**\r\n * Returns Frobenius norm of a mat2d\r\n *\r\n * @param {ReadonlyMat2d} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], 1);\n}\n/**\r\n * Adds two mat2d's\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {ReadonlyMat2d} a the first operand\r\n * @param {ReadonlyMat2d} b the second operand\r\n * @returns {mat2d} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  return out;\n}\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {ReadonlyMat2d} a the first operand\r\n * @param {ReadonlyMat2d} b the second operand\r\n * @returns {mat2d} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  return out;\n}\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat2d} out the receiving matrix\r\n * @param {ReadonlyMat2d} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat2d} out\r\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  return out;\n}\n/**\r\n * Adds two mat2d's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat2d} out the receiving vector\r\n * @param {ReadonlyMat2d} a the first operand\r\n * @param {ReadonlyMat2d} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat2d} out\r\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  return out;\n}\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyMat2d} a The first matrix.\r\n * @param {ReadonlyMat2d} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5];\n}\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyMat2d} a The first matrix.\r\n * @param {ReadonlyMat2d} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5));\n}\n/**\r\n * Alias for {@link mat2d.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link mat2d.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\n/**\r\n * 3x3 Matrix\r\n * @module mat3\r\n */\n\n/**\r\n * Creates a new identity mat3\r\n *\r\n * @returns {mat3} a new 3x3 matrix\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(9);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[5] = 0;\n    out[6] = 0;\n    out[7] = 0;\n  }\n\n  out[0] = 1;\n  out[4] = 1;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Copies the upper-left 3x3 values into the given mat3.\r\n *\r\n * @param {mat3} out the receiving 3x3 matrix\r\n * @param {ReadonlyMat4} a   the source 4x4 matrix\r\n * @returns {mat3} out\r\n */\n\nexport function fromMat4(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[4];\n  out[4] = a[5];\n  out[5] = a[6];\n  out[6] = a[8];\n  out[7] = a[9];\n  out[8] = a[10];\n  return out;\n}\n/**\r\n * Creates a new mat3 initialized with values from an existing matrix\r\n *\r\n * @param {ReadonlyMat3} a matrix to clone\r\n * @returns {mat3} a new 3x3 matrix\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\r\n * Copy the values from one mat3 to another\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the source matrix\r\n * @returns {mat3} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\r\n * Create a new mat3 with the given values\r\n *\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\r\n * @returns {mat3} A new mat3\r\n */\n\nexport function fromValues(m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  var out = new glMatrix.ARRAY_TYPE(9);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n/**\r\n * Set the components of a mat3 to the given values\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\r\n * @returns {mat3} out\r\n */\n\nexport function set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n/**\r\n * Set a mat3 to the identity matrix\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @returns {mat3} out\r\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Transpose the values of a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the source matrix\r\n * @returns {mat3} out\r\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a12 = a[5];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a01;\n    out[5] = a[7];\n    out[6] = a02;\n    out[7] = a12;\n  } else {\n    out[0] = a[0];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a[1];\n    out[4] = a[4];\n    out[5] = a[7];\n    out[6] = a[2];\n    out[7] = a[5];\n    out[8] = a[8];\n  }\n\n  return out;\n}\n/**\r\n * Inverts a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the source matrix\r\n * @returns {mat3} out\r\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  var b01 = a22 * a11 - a12 * a21;\n  var b11 = -a22 * a10 + a12 * a20;\n  var b21 = a21 * a10 - a11 * a20; // Calculate the determinant\n\n  var det = a00 * b01 + a01 * b11 + a02 * b21;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = b01 * det;\n  out[1] = (-a22 * a01 + a02 * a21) * det;\n  out[2] = (a12 * a01 - a02 * a11) * det;\n  out[3] = b11 * det;\n  out[4] = (a22 * a00 - a02 * a20) * det;\n  out[5] = (-a12 * a00 + a02 * a10) * det;\n  out[6] = b21 * det;\n  out[7] = (-a21 * a00 + a01 * a20) * det;\n  out[8] = (a11 * a00 - a01 * a10) * det;\n  return out;\n}\n/**\r\n * Calculates the adjugate of a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the source matrix\r\n * @returns {mat3} out\r\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  out[0] = a11 * a22 - a12 * a21;\n  out[1] = a02 * a21 - a01 * a22;\n  out[2] = a01 * a12 - a02 * a11;\n  out[3] = a12 * a20 - a10 * a22;\n  out[4] = a00 * a22 - a02 * a20;\n  out[5] = a02 * a10 - a00 * a12;\n  out[6] = a10 * a21 - a11 * a20;\n  out[7] = a01 * a20 - a00 * a21;\n  out[8] = a00 * a11 - a01 * a10;\n  return out;\n}\n/**\r\n * Calculates the determinant of a mat3\r\n *\r\n * @param {ReadonlyMat3} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);\n}\n/**\r\n * Multiplies two mat3's\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the first operand\r\n * @param {ReadonlyMat3} b the second operand\r\n * @returns {mat3} out\r\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  var b00 = b[0],\n      b01 = b[1],\n      b02 = b[2];\n  var b10 = b[3],\n      b11 = b[4],\n      b12 = b[5];\n  var b20 = b[6],\n      b21 = b[7],\n      b22 = b[8];\n  out[0] = b00 * a00 + b01 * a10 + b02 * a20;\n  out[1] = b00 * a01 + b01 * a11 + b02 * a21;\n  out[2] = b00 * a02 + b01 * a12 + b02 * a22;\n  out[3] = b10 * a00 + b11 * a10 + b12 * a20;\n  out[4] = b10 * a01 + b11 * a11 + b12 * a21;\n  out[5] = b10 * a02 + b11 * a12 + b12 * a22;\n  out[6] = b20 * a00 + b21 * a10 + b22 * a20;\n  out[7] = b20 * a01 + b21 * a11 + b22 * a21;\n  out[8] = b20 * a02 + b21 * a12 + b22 * a22;\n  return out;\n}\n/**\r\n * Translate a mat3 by the given vector\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the matrix to translate\r\n * @param {ReadonlyVec2} v vector to translate by\r\n * @returns {mat3} out\r\n */\n\nexport function translate(out, a, v) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a10 = a[3],\n      a11 = a[4],\n      a12 = a[5],\n      a20 = a[6],\n      a21 = a[7],\n      a22 = a[8],\n      x = v[0],\n      y = v[1];\n  out[0] = a00;\n  out[1] = a01;\n  out[2] = a02;\n  out[3] = a10;\n  out[4] = a11;\n  out[5] = a12;\n  out[6] = x * a00 + y * a10 + a20;\n  out[7] = x * a01 + y * a11 + a21;\n  out[8] = x * a02 + y * a12 + a22;\n  return out;\n}\n/**\r\n * Rotates a mat3 by the given angle\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat3} out\r\n */\n\nexport function rotate(out, a, rad) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a10 = a[3],\n      a11 = a[4],\n      a12 = a[5],\n      a20 = a[6],\n      a21 = a[7],\n      a22 = a[8],\n      s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c * a00 + s * a10;\n  out[1] = c * a01 + s * a11;\n  out[2] = c * a02 + s * a12;\n  out[3] = c * a10 - s * a00;\n  out[4] = c * a11 - s * a01;\n  out[5] = c * a12 - s * a02;\n  out[6] = a20;\n  out[7] = a21;\n  out[8] = a22;\n  return out;\n}\n/**\r\n * Scales the mat3 by the dimensions in the given vec2\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the matrix to rotate\r\n * @param {ReadonlyVec2} v the vec2 to scale the matrix by\r\n * @returns {mat3} out\r\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1];\n  out[0] = x * a[0];\n  out[1] = x * a[1];\n  out[2] = x * a[2];\n  out[3] = y * a[3];\n  out[4] = y * a[4];\n  out[5] = y * a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n/**\r\n * Creates a matrix from a vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.translate(dest, dest, vec);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {ReadonlyVec2} v Translation vector\r\n * @returns {mat3} out\r\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = v[0];\n  out[7] = v[1];\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a given angle\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.rotate(dest, dest, rad);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat3} out\r\n */\n\nexport function fromRotation(out, rad) {\n  var s = Math.sin(rad),\n      c = Math.cos(rad);\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = -s;\n  out[4] = c;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat3.identity(dest);\r\n *     mat3.scale(dest, dest, vec);\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {ReadonlyVec2} v Scaling vector\r\n * @returns {mat3} out\r\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = v[1];\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Copies the values from a mat2d into a mat3\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat2d} a the matrix to copy\r\n * @returns {mat3} out\r\n **/\n\nexport function fromMat2d(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = 0;\n  out[3] = a[2];\n  out[4] = a[3];\n  out[5] = 0;\n  out[6] = a[4];\n  out[7] = a[5];\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Calculates a 3x3 matrix from the given quaternion\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {ReadonlyQuat} q Quaternion to create matrix from\r\n *\r\n * @returns {mat3} out\r\n */\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[3] = yx - wz;\n  out[6] = zx + wy;\n  out[1] = yx + wz;\n  out[4] = 1 - xx - zz;\n  out[7] = zy - wx;\n  out[2] = zx - wy;\n  out[5] = zy + wx;\n  out[8] = 1 - xx - yy;\n  return out;\n}\n/**\r\n * Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\r\n *\r\n * @param {mat3} out mat3 receiving operation result\r\n * @param {ReadonlyMat4} a Mat4 to derive the normal matrix from\r\n *\r\n * @returns {mat3} out\r\n */\n\nexport function normalFromMat4(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  return out;\n}\n/**\r\n * Generates a 2D projection matrix with the given bounds\r\n *\r\n * @param {mat3} out mat3 frustum matrix will be written into\r\n * @param {number} width Width of your gl context\r\n * @param {number} height Height of gl context\r\n * @returns {mat3} out\r\n */\n\nexport function projection(out, width, height) {\n  out[0] = 2 / width;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -2 / height;\n  out[5] = 0;\n  out[6] = -1;\n  out[7] = 1;\n  out[8] = 1;\n  return out;\n}\n/**\r\n * Returns a string representation of a mat3\r\n *\r\n * @param {ReadonlyMat3} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\n\nexport function str(a) {\n  return \"mat3(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \", \" + a[6] + \", \" + a[7] + \", \" + a[8] + \")\";\n}\n/**\r\n * Returns Frobenius norm of a mat3\r\n *\r\n * @param {ReadonlyMat3} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8]);\n}\n/**\r\n * Adds two mat3's\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the first operand\r\n * @param {ReadonlyMat3} b the second operand\r\n * @returns {mat3} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  return out;\n}\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the first operand\r\n * @param {ReadonlyMat3} b the second operand\r\n * @returns {mat3} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  return out;\n}\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat3} out the receiving matrix\r\n * @param {ReadonlyMat3} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat3} out\r\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  return out;\n}\n/**\r\n * Adds two mat3's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat3} out the receiving vector\r\n * @param {ReadonlyMat3} a the first operand\r\n * @param {ReadonlyMat3} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat3} out\r\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  return out;\n}\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyMat3} a The first matrix.\r\n * @param {ReadonlyMat3} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8];\n}\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyMat3} a The first matrix.\r\n * @param {ReadonlyMat3} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7],\n      a8 = a[8];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7],\n      b8 = b[8];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8));\n}\n/**\r\n * Alias for {@link mat3.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link mat3.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\n/**\r\n * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.\r\n * @module mat4\r\n */\n\n/**\r\n * Creates a new identity mat4\r\n *\r\n * @returns {mat4} a new 4x4 matrix\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(16);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n  }\n\n  out[0] = 1;\n  out[5] = 1;\n  out[10] = 1;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a new mat4 initialized with values from an existing matrix\r\n *\r\n * @param {ReadonlyMat4} a matrix to clone\r\n * @returns {mat4} a new 4x4 matrix\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\r\n * Copy the values from one mat4 to another\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\r\n * Create a new mat4 with the given values\r\n *\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\r\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\r\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\r\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\r\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\r\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\r\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\r\n * @returns {mat4} A new mat4\r\n */\n\nexport function fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  var out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\r\n * Set the components of a mat4 to the given values\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\r\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\r\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\r\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\r\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\r\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\r\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\r\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\r\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\r\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\r\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\r\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\r\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\r\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\r\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\r\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\r\n * @returns {mat4} out\r\n */\n\nexport function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n/**\r\n * Set a mat4 to the identity matrix\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @returns {mat4} out\r\n */\n\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Transpose the values of a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    var a12 = a[6],\n        a13 = a[7];\n    var a23 = a[11];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a01;\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a02;\n    out[9] = a12;\n    out[11] = a[14];\n    out[12] = a03;\n    out[13] = a13;\n    out[14] = a23;\n  } else {\n    out[0] = a[0];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a[1];\n    out[5] = a[5];\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a[2];\n    out[9] = a[6];\n    out[10] = a[10];\n    out[11] = a[14];\n    out[12] = a[3];\n    out[13] = a[7];\n    out[14] = a[11];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\r\n * Inverts a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function invert(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n\n  det = 1.0 / det;\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n  return out;\n}\n/**\r\n * Calculates the adjugate of a mat4\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the source matrix\r\n * @returns {mat4} out\r\n */\n\nexport function adjoint(out, a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  out[0] = a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22);\n  out[1] = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\n  out[2] = a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12);\n  out[3] = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\n  out[4] = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\n  out[5] = a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22);\n  out[6] = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\n  out[7] = a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12);\n  out[8] = a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21);\n  out[9] = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\n  out[10] = a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11);\n  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\n  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\n  out[13] = a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21);\n  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\n  out[15] = a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11);\n  return out;\n}\n/**\r\n * Calculates the determinant of a mat4\r\n *\r\n * @param {ReadonlyMat4} a the source matrix\r\n * @returns {Number} determinant of a\r\n */\n\nexport function determinant(a) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15];\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32; // Calculate the determinant\n\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n}\n/**\r\n * Multiplies two mat4s\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the first operand\r\n * @param {ReadonlyMat4} b the second operand\r\n * @returns {mat4} out\r\n */\n\nexport function multiply(out, a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n  var a10 = a[4],\n      a11 = a[5],\n      a12 = a[6],\n      a13 = a[7];\n  var a20 = a[8],\n      a21 = a[9],\n      a22 = a[10],\n      a23 = a[11];\n  var a30 = a[12],\n      a31 = a[13],\n      a32 = a[14],\n      a33 = a[15]; // Cache only the current line of the second matrix\n\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[4];\n  b1 = b[5];\n  b2 = b[6];\n  b3 = b[7];\n  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[8];\n  b1 = b[9];\n  b2 = b[10];\n  b3 = b[11];\n  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  b0 = b[12];\n  b1 = b[13];\n  b2 = b[14];\n  b3 = b[15];\n  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  return out;\n}\n/**\r\n * Translate a mat4 by the given vector\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to translate\r\n * @param {ReadonlyVec3} v vector to translate by\r\n * @returns {mat4} out\r\n */\n\nexport function translate(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n\n  if (a === out) {\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n  } else {\n    a00 = a[0];\n    a01 = a[1];\n    a02 = a[2];\n    a03 = a[3];\n    a10 = a[4];\n    a11 = a[5];\n    a12 = a[6];\n    a13 = a[7];\n    a20 = a[8];\n    a21 = a[9];\n    a22 = a[10];\n    a23 = a[11];\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n    out[3] = a03;\n    out[4] = a10;\n    out[5] = a11;\n    out[6] = a12;\n    out[7] = a13;\n    out[8] = a20;\n    out[9] = a21;\n    out[10] = a22;\n    out[11] = a23;\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\n  }\n\n  return out;\n}\n/**\r\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to scale\r\n * @param {ReadonlyVec3} v the vec3 to scale the matrix by\r\n * @returns {mat4} out\r\n **/\n\nexport function scale(out, a, v) {\n  var x = v[0],\n      y = v[1],\n      z = v[2];\n  out[0] = a[0] * x;\n  out[1] = a[1] * x;\n  out[2] = a[2] * x;\n  out[3] = a[3] * x;\n  out[4] = a[4] * y;\n  out[5] = a[5] * y;\n  out[6] = a[6] * y;\n  out[7] = a[7] * y;\n  out[8] = a[8] * z;\n  out[9] = a[9] * z;\n  out[10] = a[10] * z;\n  out[11] = a[11] * z;\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n/**\r\n * Rotates a mat4 by the given angle around the given axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @param {ReadonlyVec3} axis the axis to rotate around\r\n * @returns {mat4} out\r\n */\n\nexport function rotate(out, a, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n  var b00, b01, b02;\n  var b10, b11, b12;\n  var b20, b21, b22;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n  a00 = a[0];\n  a01 = a[1];\n  a02 = a[2];\n  a03 = a[3];\n  a10 = a[4];\n  a11 = a[5];\n  a12 = a[6];\n  a13 = a[7];\n  a20 = a[8];\n  a21 = a[9];\n  a22 = a[10];\n  a23 = a[11]; // Construct the elements of the rotation matrix\n\n  b00 = x * x * t + c;\n  b01 = y * x * t + z * s;\n  b02 = z * x * t - y * s;\n  b10 = x * y * t - z * s;\n  b11 = y * y * t + c;\n  b12 = z * y * t + x * s;\n  b20 = x * z * t + y * s;\n  b21 = y * z * t - x * s;\n  b22 = z * z * t + c; // Perform rotation-specific matrix multiplication\n\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n/**\r\n * Rotates a matrix by the given angle around the X axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function rotateX(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[4] = a10 * c + a20 * s;\n  out[5] = a11 * c + a21 * s;\n  out[6] = a12 * c + a22 * s;\n  out[7] = a13 * c + a23 * s;\n  out[8] = a20 * c - a10 * s;\n  out[9] = a21 * c - a11 * s;\n  out[10] = a22 * c - a12 * s;\n  out[11] = a23 * c - a13 * s;\n  return out;\n}\n/**\r\n * Rotates a matrix by the given angle around the Y axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function rotateY(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c - a20 * s;\n  out[1] = a01 * c - a21 * s;\n  out[2] = a02 * c - a22 * s;\n  out[3] = a03 * c - a23 * s;\n  out[8] = a00 * s + a20 * c;\n  out[9] = a01 * s + a21 * c;\n  out[10] = a02 * s + a22 * c;\n  out[11] = a03 * s + a23 * c;\n  return out;\n}\n/**\r\n * Rotates a matrix by the given angle around the Z axis\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to rotate\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function rotateZ(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  } // Perform axis-specific matrix multiplication\n\n\n  out[0] = a00 * c + a10 * s;\n  out[1] = a01 * c + a11 * s;\n  out[2] = a02 * c + a12 * s;\n  out[3] = a03 * c + a13 * s;\n  out[4] = a10 * c - a00 * s;\n  out[5] = a11 * c - a01 * s;\n  out[6] = a12 * c - a02 * s;\n  out[7] = a13 * c - a03 * s;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, dest, vec);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {ReadonlyVec3} v Translation vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a vector scaling\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.scale(dest, dest, vec);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {ReadonlyVec3} v Scaling vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = v[1];\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = v[2];\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a given angle around a given axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotate(dest, dest, rad, axis);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @param {ReadonlyVec3} axis the axis to rotate around\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotation(out, rad, axis) {\n  var x = axis[0],\n      y = axis[1],\n      z = axis[2];\n  var len = Math.hypot(x, y, z);\n  var s, c, t;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c; // Perform rotation-specific matrix multiplication\n\n  out[0] = x * x * t + c;\n  out[1] = y * x * t + z * s;\n  out[2] = z * x * t - y * s;\n  out[3] = 0;\n  out[4] = x * y * t - z * s;\n  out[5] = y * y * t + c;\n  out[6] = z * y * t + x * s;\n  out[7] = 0;\n  out[8] = x * z * t + y * s;\n  out[9] = y * z * t - x * s;\n  out[10] = z * z * t + c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from the given angle around the X axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateX(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function fromXRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = c;\n  out[6] = s;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = -s;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from the given angle around the Y axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateY(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function fromYRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = 0;\n  out[2] = -s;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = s;\n  out[9] = 0;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from the given angle around the Z axis\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.rotateZ(dest, dest, rad);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {Number} rad the angle to rotate the matrix by\r\n * @returns {mat4} out\r\n */\n\nexport function fromZRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad); // Perform axis-specific matrix multiplication\n\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -s;\n  out[5] = c;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a quaternion rotation and vector translation\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {ReadonlyVec3} v Translation vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotationTranslation(out, q, v) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - (yy + zz);\n  out[1] = xy + wz;\n  out[2] = xz - wy;\n  out[3] = 0;\n  out[4] = xy - wz;\n  out[5] = 1 - (xx + zz);\n  out[6] = yz + wx;\n  out[7] = 0;\n  out[8] = xz + wy;\n  out[9] = yz - wx;\n  out[10] = 1 - (xx + yy);\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a new mat4 from a dual quat.\r\n *\r\n * @param {mat4} out Matrix\r\n * @param {ReadonlyQuat2} a Dual Quaternion\r\n * @returns {mat4} mat4 receiving operation result\r\n */\n\nexport function fromQuat2(out, a) {\n  var translation = new glMatrix.ARRAY_TYPE(3);\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7];\n  var magnitude = bx * bx + by * by + bz * bz + bw * bw; //Only scale if it makes sense\n\n  if (magnitude > 0) {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2 / magnitude;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude;\n  } else {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  }\n\n  fromRotationTranslation(out, a, translation);\n  return out;\n}\n/**\r\n * Returns the translation vector component of a transformation\r\n *  matrix. If a matrix is built with fromRotationTranslation,\r\n *  the returned vector will be the same as the translation vector\r\n *  originally supplied.\r\n * @param  {vec3} out Vector to receive translation component\r\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\r\n * @return {vec3} out\r\n */\n\nexport function getTranslation(out, mat) {\n  out[0] = mat[12];\n  out[1] = mat[13];\n  out[2] = mat[14];\n  return out;\n}\n/**\r\n * Returns the scaling factor component of a transformation\r\n *  matrix. If a matrix is built with fromRotationTranslationScale\r\n *  with a normalized Quaternion paramter, the returned vector will be\r\n *  the same as the scaling vector\r\n *  originally supplied.\r\n * @param  {vec3} out Vector to receive scaling factor component\r\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\r\n * @return {vec3} out\r\n */\n\nexport function getScaling(out, mat) {\n  var m11 = mat[0];\n  var m12 = mat[1];\n  var m13 = mat[2];\n  var m21 = mat[4];\n  var m22 = mat[5];\n  var m23 = mat[6];\n  var m31 = mat[8];\n  var m32 = mat[9];\n  var m33 = mat[10];\n  out[0] = Math.hypot(m11, m12, m13);\n  out[1] = Math.hypot(m21, m22, m23);\n  out[2] = Math.hypot(m31, m32, m33);\n  return out;\n}\n/**\r\n * Returns a quaternion representing the rotational component\r\n *  of a transformation matrix. If a matrix is built with\r\n *  fromRotationTranslation, the returned quaternion will be the\r\n *  same as the quaternion originally supplied.\r\n * @param {quat} out Quaternion to receive the rotation component\r\n * @param {ReadonlyMat4} mat Matrix to be decomposed (input)\r\n * @return {quat} out\r\n */\n\nexport function getRotation(out, mat) {\n  var scaling = new glMatrix.ARRAY_TYPE(3);\n  getScaling(scaling, mat);\n  var is1 = 1 / scaling[0];\n  var is2 = 1 / scaling[1];\n  var is3 = 1 / scaling[2];\n  var sm11 = mat[0] * is1;\n  var sm12 = mat[1] * is2;\n  var sm13 = mat[2] * is3;\n  var sm21 = mat[4] * is1;\n  var sm22 = mat[5] * is2;\n  var sm23 = mat[6] * is3;\n  var sm31 = mat[8] * is1;\n  var sm32 = mat[9] * is2;\n  var sm33 = mat[10] * is3;\n  var trace = sm11 + sm22 + sm33;\n  var S = 0;\n\n  if (trace > 0) {\n    S = Math.sqrt(trace + 1.0) * 2;\n    out[3] = 0.25 * S;\n    out[0] = (sm23 - sm32) / S;\n    out[1] = (sm31 - sm13) / S;\n    out[2] = (sm12 - sm21) / S;\n  } else if (sm11 > sm22 && sm11 > sm33) {\n    S = Math.sqrt(1.0 + sm11 - sm22 - sm33) * 2;\n    out[3] = (sm23 - sm32) / S;\n    out[0] = 0.25 * S;\n    out[1] = (sm12 + sm21) / S;\n    out[2] = (sm31 + sm13) / S;\n  } else if (sm22 > sm33) {\n    S = Math.sqrt(1.0 + sm22 - sm11 - sm33) * 2;\n    out[3] = (sm31 - sm13) / S;\n    out[0] = (sm12 + sm21) / S;\n    out[1] = 0.25 * S;\n    out[2] = (sm23 + sm32) / S;\n  } else {\n    S = Math.sqrt(1.0 + sm33 - sm11 - sm22) * 2;\n    out[3] = (sm12 - sm21) / S;\n    out[0] = (sm31 + sm13) / S;\n    out[1] = (sm23 + sm32) / S;\n    out[2] = 0.25 * S;\n  }\n\n  return out;\n}\n/**\r\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *     mat4.scale(dest, scale)\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {ReadonlyVec3} v Translation vector\r\n * @param {ReadonlyVec3} s Scaling vector\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotationTranslationScale(out, q, v, s) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  out[0] = (1 - (yy + zz)) * sx;\n  out[1] = (xy + wz) * sx;\n  out[2] = (xz - wy) * sx;\n  out[3] = 0;\n  out[4] = (xy - wz) * sy;\n  out[5] = (1 - (xx + zz)) * sy;\n  out[6] = (yz + wx) * sy;\n  out[7] = 0;\n  out[8] = (xz + wy) * sz;\n  out[9] = (yz - wx) * sz;\n  out[10] = (1 - (xx + yy)) * sz;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\r\n * This is equivalent to (but much faster than):\r\n *\r\n *     mat4.identity(dest);\r\n *     mat4.translate(dest, vec);\r\n *     mat4.translate(dest, origin);\r\n *     let quatMat = mat4.create();\r\n *     quat4.toMat4(quat, quatMat);\r\n *     mat4.multiply(dest, quatMat);\r\n *     mat4.scale(dest, scale)\r\n *     mat4.translate(dest, negativeOrigin);\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {quat4} q Rotation quaternion\r\n * @param {ReadonlyVec3} v Translation vector\r\n * @param {ReadonlyVec3} s Scaling vector\r\n * @param {ReadonlyVec3} o The origin vector around which to scale and rotate\r\n * @returns {mat4} out\r\n */\n\nexport function fromRotationTranslationScaleOrigin(out, q, v, s, o) {\n  // Quaternion math\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n  var ox = o[0];\n  var oy = o[1];\n  var oz = o[2];\n  var out0 = (1 - (yy + zz)) * sx;\n  var out1 = (xy + wz) * sx;\n  var out2 = (xz - wy) * sx;\n  var out4 = (xy - wz) * sy;\n  var out5 = (1 - (xx + zz)) * sy;\n  var out6 = (yz + wx) * sy;\n  var out8 = (xz + wy) * sz;\n  var out9 = (yz - wx) * sz;\n  var out10 = (1 - (xx + yy)) * sz;\n  out[0] = out0;\n  out[1] = out1;\n  out[2] = out2;\n  out[3] = 0;\n  out[4] = out4;\n  out[5] = out5;\n  out[6] = out6;\n  out[7] = 0;\n  out[8] = out8;\n  out[9] = out9;\n  out[10] = out10;\n  out[11] = 0;\n  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\n  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\n  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Calculates a 4x4 matrix from the given quaternion\r\n *\r\n * @param {mat4} out mat4 receiving operation result\r\n * @param {ReadonlyQuat} q Quaternion to create matrix from\r\n *\r\n * @returns {mat4} out\r\n */\n\nexport function fromQuat(out, q) {\n  var x = q[0],\n      y = q[1],\n      z = q[2],\n      w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  out[0] = 1 - yy - zz;\n  out[1] = yx + wz;\n  out[2] = zx - wy;\n  out[3] = 0;\n  out[4] = yx - wz;\n  out[5] = 1 - xx - zz;\n  out[6] = zy + wx;\n  out[7] = 0;\n  out[8] = zx + wy;\n  out[9] = zy - wx;\n  out[10] = 1 - xx - yy;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Generates a frustum matrix with the given bounds\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {Number} left Left bound of the frustum\r\n * @param {Number} right Right bound of the frustum\r\n * @param {Number} bottom Bottom bound of the frustum\r\n * @param {Number} top Top bound of the frustum\r\n * @param {Number} near Near bound of the frustum\r\n * @param {Number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\n\nexport function frustum(out, left, right, bottom, top, near, far) {\n  var rl = 1 / (right - left);\n  var tb = 1 / (top - bottom);\n  var nf = 1 / (near - far);\n  out[0] = near * 2 * rl;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = near * 2 * tb;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = (right + left) * rl;\n  out[9] = (top + bottom) * tb;\n  out[10] = (far + near) * nf;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = far * near * 2 * nf;\n  out[15] = 0;\n  return out;\n}\n/**\r\n * Generates a perspective projection matrix with the given bounds.\r\n * Passing null/undefined/no value for far will generate infinite projection matrix.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {number} fovy Vertical field of view in radians\r\n * @param {number} aspect Aspect ratio. typically viewport width/height\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum, can be null or Infinity\r\n * @returns {mat4} out\r\n */\n\nexport function perspective(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2),\n      nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = (far + near) * nf;\n    out[14] = 2 * far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -2 * near;\n  }\n\n  return out;\n}\n/**\r\n * Generates a perspective projection matrix with the given field of view.\r\n * This is primarily useful for generating projection matrices to be used\r\n * with the still experiemental WebVR API.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\n\nexport function perspectiveFromFieldOfView(out, fov, near, far) {\n  var upTan = Math.tan(fov.upDegrees * Math.PI / 180.0);\n  var downTan = Math.tan(fov.downDegrees * Math.PI / 180.0);\n  var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180.0);\n  var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180.0);\n  var xScale = 2.0 / (leftTan + rightTan);\n  var yScale = 2.0 / (upTan + downTan);\n  out[0] = xScale;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  out[4] = 0.0;\n  out[5] = yScale;\n  out[6] = 0.0;\n  out[7] = 0.0;\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\n  out[9] = (upTan - downTan) * yScale * 0.5;\n  out[10] = far / (near - far);\n  out[11] = -1.0;\n  out[12] = 0.0;\n  out[13] = 0.0;\n  out[14] = far * near / (near - far);\n  out[15] = 0.0;\n  return out;\n}\n/**\r\n * Generates a orthogonal projection matrix with the given bounds\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {number} left Left bound of the frustum\r\n * @param {number} right Right bound of the frustum\r\n * @param {number} bottom Bottom bound of the frustum\r\n * @param {number} top Top bound of the frustum\r\n * @param {number} near Near bound of the frustum\r\n * @param {number} far Far bound of the frustum\r\n * @returns {mat4} out\r\n */\n\nexport function ortho(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 2 * nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = (far + near) * nf;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Generates a look-at matrix with the given eye position, focal point, and up axis.\r\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {ReadonlyVec3} eye Position of the viewer\r\n * @param {ReadonlyVec3} center Point the viewer is looking at\r\n * @param {ReadonlyVec3} up vec3 pointing up\r\n * @returns {mat4} out\r\n */\n\nexport function lookAt(out, eye, center, up) {\n  var x0, x1, x2, y0, y1, y2, z0, z1, z2, len;\n  var eyex = eye[0];\n  var eyey = eye[1];\n  var eyez = eye[2];\n  var upx = up[0];\n  var upy = up[1];\n  var upz = up[2];\n  var centerx = center[0];\n  var centery = center[1];\n  var centerz = center[2];\n\n  if (Math.abs(eyex - centerx) < glMatrix.EPSILON && Math.abs(eyey - centery) < glMatrix.EPSILON && Math.abs(eyez - centerz) < glMatrix.EPSILON) {\n    return identity(out);\n  }\n\n  z0 = eyex - centerx;\n  z1 = eyey - centery;\n  z2 = eyez - centerz;\n  len = 1 / Math.hypot(z0, z1, z2);\n  z0 *= len;\n  z1 *= len;\n  z2 *= len;\n  x0 = upy * z2 - upz * z1;\n  x1 = upz * z0 - upx * z2;\n  x2 = upx * z1 - upy * z0;\n  len = Math.hypot(x0, x1, x2);\n\n  if (!len) {\n    x0 = 0;\n    x1 = 0;\n    x2 = 0;\n  } else {\n    len = 1 / len;\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  y0 = z1 * x2 - z2 * x1;\n  y1 = z2 * x0 - z0 * x2;\n  y2 = z0 * x1 - z1 * x0;\n  len = Math.hypot(y0, y1, y2);\n\n  if (!len) {\n    y0 = 0;\n    y1 = 0;\n    y2 = 0;\n  } else {\n    len = 1 / len;\n    y0 *= len;\n    y1 *= len;\n    y2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = y0;\n  out[2] = z0;\n  out[3] = 0;\n  out[4] = x1;\n  out[5] = y1;\n  out[6] = z1;\n  out[7] = 0;\n  out[8] = x2;\n  out[9] = y2;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Generates a matrix that makes something look at something else.\r\n *\r\n * @param {mat4} out mat4 frustum matrix will be written into\r\n * @param {ReadonlyVec3} eye Position of the viewer\r\n * @param {ReadonlyVec3} center Point the viewer is looking at\r\n * @param {ReadonlyVec3} up vec3 pointing up\r\n * @returns {mat4} out\r\n */\n\nexport function targetTo(out, eye, target, up) {\n  var eyex = eye[0],\n      eyey = eye[1],\n      eyez = eye[2],\n      upx = up[0],\n      upy = up[1],\n      upz = up[2];\n  var z0 = eyex - target[0],\n      z1 = eyey - target[1],\n      z2 = eyez - target[2];\n  var len = z0 * z0 + z1 * z1 + z2 * z2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n  }\n\n  var x0 = upy * z2 - upz * z1,\n      x1 = upz * z0 - upx * z2,\n      x2 = upx * z1 - upy * z0;\n  len = x0 * x0 + x1 * x1 + x2 * x2;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = x1;\n  out[2] = x2;\n  out[3] = 0;\n  out[4] = z1 * x2 - z2 * x1;\n  out[5] = z2 * x0 - z0 * x2;\n  out[6] = z0 * x1 - z1 * x0;\n  out[7] = 0;\n  out[8] = z0;\n  out[9] = z1;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = eyex;\n  out[13] = eyey;\n  out[14] = eyez;\n  out[15] = 1;\n  return out;\n}\n/**\r\n * Returns a string representation of a mat4\r\n *\r\n * @param {ReadonlyMat4} a matrix to represent as a string\r\n * @returns {String} string representation of the matrix\r\n */\n\nexport function str(a) {\n  return \"mat4(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \", \" + a[6] + \", \" + a[7] + \", \" + a[8] + \", \" + a[9] + \", \" + a[10] + \", \" + a[11] + \", \" + a[12] + \", \" + a[13] + \", \" + a[14] + \", \" + a[15] + \")\";\n}\n/**\r\n * Returns Frobenius norm of a mat4\r\n *\r\n * @param {ReadonlyMat4} a the matrix to calculate Frobenius norm of\r\n * @returns {Number} Frobenius norm\r\n */\n\nexport function frob(a) {\n  return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15]);\n}\n/**\r\n * Adds two mat4's\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the first operand\r\n * @param {ReadonlyMat4} b the second operand\r\n * @returns {mat4} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  out[9] = a[9] + b[9];\n  out[10] = a[10] + b[10];\n  out[11] = a[11] + b[11];\n  out[12] = a[12] + b[12];\n  out[13] = a[13] + b[13];\n  out[14] = a[14] + b[14];\n  out[15] = a[15] + b[15];\n  return out;\n}\n/**\r\n * Subtracts matrix b from matrix a\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the first operand\r\n * @param {ReadonlyMat4} b the second operand\r\n * @returns {mat4} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  out[9] = a[9] - b[9];\n  out[10] = a[10] - b[10];\n  out[11] = a[11] - b[11];\n  out[12] = a[12] - b[12];\n  out[13] = a[13] - b[13];\n  out[14] = a[14] - b[14];\n  out[15] = a[15] - b[15];\n  return out;\n}\n/**\r\n * Multiply each element of the matrix by a scalar.\r\n *\r\n * @param {mat4} out the receiving matrix\r\n * @param {ReadonlyMat4} a the matrix to scale\r\n * @param {Number} b amount to scale the matrix's elements by\r\n * @returns {mat4} out\r\n */\n\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  out[9] = a[9] * b;\n  out[10] = a[10] * b;\n  out[11] = a[11] * b;\n  out[12] = a[12] * b;\n  out[13] = a[13] * b;\n  out[14] = a[14] * b;\n  out[15] = a[15] * b;\n  return out;\n}\n/**\r\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\r\n *\r\n * @param {mat4} out the receiving vector\r\n * @param {ReadonlyMat4} a the first operand\r\n * @param {ReadonlyMat4} b the second operand\r\n * @param {Number} scale the amount to scale b's elements by before adding\r\n * @returns {mat4} out\r\n */\n\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  out[9] = a[9] + b[9] * scale;\n  out[10] = a[10] + b[10] * scale;\n  out[11] = a[11] + b[11] * scale;\n  out[12] = a[12] + b[12] * scale;\n  out[13] = a[13] + b[13] * scale;\n  out[14] = a[14] + b[14] * scale;\n  out[15] = a[15] + b[15] * scale;\n  return out;\n}\n/**\r\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyMat4} a The first matrix.\r\n * @param {ReadonlyMat4} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\n}\n/**\r\n * Returns whether or not the matrices have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyMat4} a The first matrix.\r\n * @param {ReadonlyMat4} b The second matrix.\r\n * @returns {Boolean} True if the matrices are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7];\n  var a8 = a[8],\n      a9 = a[9],\n      a10 = a[10],\n      a11 = a[11];\n  var a12 = a[12],\n      a13 = a[13],\n      a14 = a[14],\n      a15 = a[15];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  var b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7];\n  var b8 = b[8],\n      b9 = b[9],\n      b10 = b[10],\n      b11 = b[11];\n  var b12 = b[12],\n      b13 = b[13],\n      b14 = b[14],\n      b15 = b[15];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a9), Math.abs(b9)) && Math.abs(a10 - b10) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a15), Math.abs(b15));\n}\n/**\r\n * Alias for {@link mat4.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link mat4.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;","import * as glMatrix from \"./common.js\";\nimport * as mat3 from \"./mat3.js\";\nimport * as vec3 from \"./vec3.js\";\nimport * as vec4 from \"./vec4.js\";\n/**\r\n * Quaternion\r\n * @module quat\r\n */\n\n/**\r\n * Creates a new identity quat\r\n *\r\n * @returns {quat} a new quaternion\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  out[3] = 1;\n  return out;\n}\n/**\r\n * Set a quat to the identity quaternion\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @returns {quat} out\r\n */\n\nexport function identity(out) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  return out;\n}\n/**\r\n * Sets a quat from the given angle and rotation axis,\r\n * then returns it.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyVec3} axis the axis around which to rotate\r\n * @param {Number} rad the angle in radians\r\n * @returns {quat} out\r\n **/\n\nexport function setAxisAngle(out, axis, rad) {\n  rad = rad * 0.5;\n  var s = Math.sin(rad);\n  out[0] = s * axis[0];\n  out[1] = s * axis[1];\n  out[2] = s * axis[2];\n  out[3] = Math.cos(rad);\n  return out;\n}\n/**\r\n * Gets the rotation axis and angle for a given\r\n *  quaternion. If a quaternion is created with\r\n *  setAxisAngle, this method will return the same\r\n *  values as providied in the original parameter list\r\n *  OR functionally equivalent values.\r\n * Example: The quaternion formed by axis [0, 0, 1] and\r\n *  angle -90 is the same as the quaternion formed by\r\n *  [0, 0, 1] and 270. This method favors the latter.\r\n * @param  {vec3} out_axis  Vector receiving the axis of rotation\r\n * @param  {ReadonlyQuat} q     Quaternion to be decomposed\r\n * @return {Number}     Angle, in radians, of the rotation\r\n */\n\nexport function getAxisAngle(out_axis, q) {\n  var rad = Math.acos(q[3]) * 2.0;\n  var s = Math.sin(rad / 2.0);\n\n  if (s > glMatrix.EPSILON) {\n    out_axis[0] = q[0] / s;\n    out_axis[1] = q[1] / s;\n    out_axis[2] = q[2] / s;\n  } else {\n    // If s is zero, return any axis (no rotation - axis does not matter)\n    out_axis[0] = 1;\n    out_axis[1] = 0;\n    out_axis[2] = 0;\n  }\n\n  return rad;\n}\n/**\r\n * Gets the angular distance between two unit quaternions\r\n *\r\n * @param  {ReadonlyQuat} a     Origin unit quaternion\r\n * @param  {ReadonlyQuat} b     Destination unit quaternion\r\n * @return {Number}     Angle, in radians, between the two quaternions\r\n */\n\nexport function getAngle(a, b) {\n  var dotproduct = dot(a, b);\n  return Math.acos(2 * dotproduct * dotproduct - 1);\n}\n/**\r\n * Multiplies two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a the first operand\r\n * @param {ReadonlyQuat} b the second operand\r\n * @returns {quat} out\r\n */\n\nexport function multiply(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2],\n      bw = b[3];\n  out[0] = ax * bw + aw * bx + ay * bz - az * by;\n  out[1] = ay * bw + aw * by + az * bx - ax * bz;\n  out[2] = az * bw + aw * bz + ax * by - ay * bx;\n  out[3] = aw * bw - ax * bx - ay * by - az * bz;\n  return out;\n}\n/**\r\n * Rotates a quaternion by the given angle about the X axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {ReadonlyQuat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\n\nexport function rotateX(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw + aw * bx;\n  out[1] = ay * bw + az * bx;\n  out[2] = az * bw - ay * bx;\n  out[3] = aw * bw - ax * bx;\n  return out;\n}\n/**\r\n * Rotates a quaternion by the given angle about the Y axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {ReadonlyQuat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\n\nexport function rotateY(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var by = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw - az * by;\n  out[1] = ay * bw + aw * by;\n  out[2] = az * bw + ax * by;\n  out[3] = aw * bw - ay * by;\n  return out;\n}\n/**\r\n * Rotates a quaternion by the given angle about the Z axis\r\n *\r\n * @param {quat} out quat receiving operation result\r\n * @param {ReadonlyQuat} a quat to rotate\r\n * @param {number} rad angle (in radians) to rotate\r\n * @returns {quat} out\r\n */\n\nexport function rotateZ(out, a, rad) {\n  rad *= 0.5;\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bz = Math.sin(rad),\n      bw = Math.cos(rad);\n  out[0] = ax * bw + ay * bz;\n  out[1] = ay * bw - ax * bz;\n  out[2] = az * bw + aw * bz;\n  out[3] = aw * bw - az * bz;\n  return out;\n}\n/**\r\n * Calculates the W component of a quat from the X, Y, and Z components.\r\n * Assumes that quaternion is 1 unit in length.\r\n * Any existing W component will be ignored.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a quat to calculate W component of\r\n * @returns {quat} out\r\n */\n\nexport function calculateW(out, a) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));\n  return out;\n}\n/**\r\n * Calculate the exponential of a unit quaternion.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a quat to calculate the exponential of\r\n * @returns {quat} out\r\n */\n\nexport function exp(out, a) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  var r = Math.sqrt(x * x + y * y + z * z);\n  var et = Math.exp(w);\n  var s = r > 0 ? et * Math.sin(r) / r : 0;\n  out[0] = x * s;\n  out[1] = y * s;\n  out[2] = z * s;\n  out[3] = et * Math.cos(r);\n  return out;\n}\n/**\r\n * Calculate the natural logarithm of a unit quaternion.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a quat to calculate the exponential of\r\n * @returns {quat} out\r\n */\n\nexport function ln(out, a) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  var r = Math.sqrt(x * x + y * y + z * z);\n  var t = r > 0 ? Math.atan2(r, w) / r : 0;\n  out[0] = x * t;\n  out[1] = y * t;\n  out[2] = z * t;\n  out[3] = 0.5 * Math.log(x * x + y * y + z * z + w * w);\n  return out;\n}\n/**\r\n * Calculate the scalar power of a unit quaternion.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a quat to calculate the exponential of\r\n * @param {Number} b amount to scale the quaternion by\r\n * @returns {quat} out\r\n */\n\nexport function pow(out, a, b) {\n  ln(out, a);\n  scale(out, out, b);\n  exp(out, out);\n  return out;\n}\n/**\r\n * Performs a spherical linear interpolation between two quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a the first operand\r\n * @param {ReadonlyQuat} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n */\n\nexport function slerp(out, a, b, t) {\n  // benchmarks:\n  //    http://jsperf.com/quaternion-slerp-implementations\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2],\n      bw = b[3];\n  var omega, cosom, sinom, scale0, scale1; // calc cosine\n\n  cosom = ax * bx + ay * by + az * bz + aw * bw; // adjust signs (if necessary)\n\n  if (cosom < 0.0) {\n    cosom = -cosom;\n    bx = -bx;\n    by = -by;\n    bz = -bz;\n    bw = -bw;\n  } // calculate coefficients\n\n\n  if (1.0 - cosom > glMatrix.EPSILON) {\n    // standard case (slerp)\n    omega = Math.acos(cosom);\n    sinom = Math.sin(omega);\n    scale0 = Math.sin((1.0 - t) * omega) / sinom;\n    scale1 = Math.sin(t * omega) / sinom;\n  } else {\n    // \"from\" and \"to\" quaternions are very close\n    //  ... so we can do a linear interpolation\n    scale0 = 1.0 - t;\n    scale1 = t;\n  } // calculate final values\n\n\n  out[0] = scale0 * ax + scale1 * bx;\n  out[1] = scale0 * ay + scale1 * by;\n  out[2] = scale0 * az + scale1 * bz;\n  out[3] = scale0 * aw + scale1 * bw;\n  return out;\n}\n/**\r\n * Generates a random unit quaternion\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @returns {quat} out\r\n */\n\nexport function random(out) {\n  // Implementation of http://planning.cs.uiuc.edu/node198.html\n  // TODO: Calling random 3 times is probably not the fastest solution\n  var u1 = glMatrix.RANDOM();\n  var u2 = glMatrix.RANDOM();\n  var u3 = glMatrix.RANDOM();\n  var sqrt1MinusU1 = Math.sqrt(1 - u1);\n  var sqrtU1 = Math.sqrt(u1);\n  out[0] = sqrt1MinusU1 * Math.sin(2.0 * Math.PI * u2);\n  out[1] = sqrt1MinusU1 * Math.cos(2.0 * Math.PI * u2);\n  out[2] = sqrtU1 * Math.sin(2.0 * Math.PI * u3);\n  out[3] = sqrtU1 * Math.cos(2.0 * Math.PI * u3);\n  return out;\n}\n/**\r\n * Calculates the inverse of a quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a quat to calculate inverse of\r\n * @returns {quat} out\r\n */\n\nexport function invert(out, a) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;\n  var invDot = dot ? 1.0 / dot : 0; // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\n\n  out[0] = -a0 * invDot;\n  out[1] = -a1 * invDot;\n  out[2] = -a2 * invDot;\n  out[3] = a3 * invDot;\n  return out;\n}\n/**\r\n * Calculates the conjugate of a quat\r\n * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a quat to calculate conjugate of\r\n * @returns {quat} out\r\n */\n\nexport function conjugate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Creates a quaternion from the given 3x3 rotation matrix.\r\n *\r\n * NOTE: The resultant quaternion is not normalized, so you should be sure\r\n * to renormalize the quaternion yourself where necessary.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyMat3} m rotation matrix\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport function fromMat3(out, m) {\n  // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\n  // article \"Quaternion Calculus and Fast Animation\".\n  var fTrace = m[0] + m[4] + m[8];\n  var fRoot;\n\n  if (fTrace > 0.0) {\n    // |w| > 1/2, may as well choose w > 1/2\n    fRoot = Math.sqrt(fTrace + 1.0); // 2w\n\n    out[3] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot; // 1/(4w)\n\n    out[0] = (m[5] - m[7]) * fRoot;\n    out[1] = (m[6] - m[2]) * fRoot;\n    out[2] = (m[1] - m[3]) * fRoot;\n  } else {\n    // |w| <= 1/2\n    var i = 0;\n    if (m[4] > m[0]) i = 1;\n    if (m[8] > m[i * 3 + i]) i = 2;\n    var j = (i + 1) % 3;\n    var k = (i + 2) % 3;\n    fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0);\n    out[i] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot;\n    out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;\n    out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;\n    out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;\n  }\n\n  return out;\n}\n/**\r\n * Creates a quaternion from the given euler angle x, y, z.\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {x} Angle to rotate around X axis in degrees.\r\n * @param {y} Angle to rotate around Y axis in degrees.\r\n * @param {z} Angle to rotate around Z axis in degrees.\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport function fromEuler(out, x, y, z) {\n  var halfToRad = 0.5 * Math.PI / 180.0;\n  x *= halfToRad;\n  y *= halfToRad;\n  z *= halfToRad;\n  var sx = Math.sin(x);\n  var cx = Math.cos(x);\n  var sy = Math.sin(y);\n  var cy = Math.cos(y);\n  var sz = Math.sin(z);\n  var cz = Math.cos(z);\n  out[0] = sx * cy * cz - cx * sy * sz;\n  out[1] = cx * sy * cz + sx * cy * sz;\n  out[2] = cx * cy * sz - sx * sy * cz;\n  out[3] = cx * cy * cz + sx * sy * sz;\n  return out;\n}\n/**\r\n * Returns a string representation of a quatenion\r\n *\r\n * @param {ReadonlyQuat} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nexport function str(a) {\n  return \"quat(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \")\";\n}\n/**\r\n * Creates a new quat initialized with values from an existing quaternion\r\n *\r\n * @param {ReadonlyQuat} a quaternion to clone\r\n * @returns {quat} a new quaternion\r\n * @function\r\n */\n\nexport var clone = vec4.clone;\n/**\r\n * Creates a new quat initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {quat} a new quaternion\r\n * @function\r\n */\n\nexport var fromValues = vec4.fromValues;\n/**\r\n * Copy the values from one quat to another\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a the source quaternion\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var copy = vec4.copy;\n/**\r\n * Set the components of a quat to the given values\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var set = vec4.set;\n/**\r\n * Adds two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a the first operand\r\n * @param {ReadonlyQuat} b the second operand\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var add = vec4.add;\n/**\r\n * Alias for {@link quat.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Scales a quat by a scalar number\r\n *\r\n * @param {quat} out the receiving vector\r\n * @param {ReadonlyQuat} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var scale = vec4.scale;\n/**\r\n * Calculates the dot product of two quat's\r\n *\r\n * @param {ReadonlyQuat} a the first operand\r\n * @param {ReadonlyQuat} b the second operand\r\n * @returns {Number} dot product of a and b\r\n * @function\r\n */\n\nexport var dot = vec4.dot;\n/**\r\n * Performs a linear interpolation between two quat's\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a the first operand\r\n * @param {ReadonlyQuat} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var lerp = vec4.lerp;\n/**\r\n * Calculates the length of a quat\r\n *\r\n * @param {ReadonlyQuat} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nexport var length = vec4.length;\n/**\r\n * Alias for {@link quat.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Calculates the squared length of a quat\r\n *\r\n * @param {ReadonlyQuat} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n * @function\r\n */\n\nexport var squaredLength = vec4.squaredLength;\n/**\r\n * Alias for {@link quat.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Normalize a quat\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a quaternion to normalize\r\n * @returns {quat} out\r\n * @function\r\n */\n\nexport var normalize = vec4.normalize;\n/**\r\n * Returns whether or not the quaternions have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyQuat} a The first quaternion.\r\n * @param {ReadonlyQuat} b The second quaternion.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport var exactEquals = vec4.exactEquals;\n/**\r\n * Returns whether or not the quaternions have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyQuat} a The first vector.\r\n * @param {ReadonlyQuat} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport var equals = vec4.equals;\n/**\r\n * Sets a quaternion to represent the shortest rotation from one\r\n * vector to another.\r\n *\r\n * Both vectors are assumed to be unit length.\r\n *\r\n * @param {quat} out the receiving quaternion.\r\n * @param {ReadonlyVec3} a the initial vector\r\n * @param {ReadonlyVec3} b the destination vector\r\n * @returns {quat} out\r\n */\n\nexport var rotationTo = function () {\n  var tmpvec3 = vec3.create();\n  var xUnitVec3 = vec3.fromValues(1, 0, 0);\n  var yUnitVec3 = vec3.fromValues(0, 1, 0);\n  return function (out, a, b) {\n    var dot = vec3.dot(a, b);\n\n    if (dot < -0.999999) {\n      vec3.cross(tmpvec3, xUnitVec3, a);\n      if (vec3.len(tmpvec3) < 0.000001) vec3.cross(tmpvec3, yUnitVec3, a);\n      vec3.normalize(tmpvec3, tmpvec3);\n      setAxisAngle(out, tmpvec3, Math.PI);\n      return out;\n    } else if (dot > 0.999999) {\n      out[0] = 0;\n      out[1] = 0;\n      out[2] = 0;\n      out[3] = 1;\n      return out;\n    } else {\n      vec3.cross(tmpvec3, a, b);\n      out[0] = tmpvec3[0];\n      out[1] = tmpvec3[1];\n      out[2] = tmpvec3[2];\n      out[3] = 1 + dot;\n      return normalize(out, out);\n    }\n  };\n}();\n/**\r\n * Performs a spherical linear interpolation with two control points\r\n *\r\n * @param {quat} out the receiving quaternion\r\n * @param {ReadonlyQuat} a the first operand\r\n * @param {ReadonlyQuat} b the second operand\r\n * @param {ReadonlyQuat} c the third operand\r\n * @param {ReadonlyQuat} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat} out\r\n */\n\nexport var sqlerp = function () {\n  var temp1 = create();\n  var temp2 = create();\n  return function (out, a, b, c, d, t) {\n    slerp(temp1, a, d, t);\n    slerp(temp2, b, c, t);\n    slerp(out, temp1, temp2, 2 * t * (1 - t));\n    return out;\n  };\n}();\n/**\r\n * Sets the specified quaternion with values corresponding to the given\r\n * axes. Each axis is a vec3 and is expected to be unit length and\r\n * perpendicular to all other specified axes.\r\n *\r\n * @param {ReadonlyVec3} view  the vector representing the viewing direction\r\n * @param {ReadonlyVec3} right the vector representing the local \"right\" direction\r\n * @param {ReadonlyVec3} up    the vector representing the local \"up\" direction\r\n * @returns {quat} out\r\n */\n\nexport var setAxes = function () {\n  var matr = mat3.create();\n  return function (out, view, right, up) {\n    matr[0] = right[0];\n    matr[3] = right[1];\n    matr[6] = right[2];\n    matr[1] = up[0];\n    matr[4] = up[1];\n    matr[7] = up[2];\n    matr[2] = -view[0];\n    matr[5] = -view[1];\n    matr[8] = -view[2];\n    return normalize(out, fromMat3(out, matr));\n  };\n}();","import * as glMatrix from \"./common.js\";\nimport * as quat from \"./quat.js\";\nimport * as mat4 from \"./mat4.js\";\n/**\r\n * Dual Quaternion<br>\r\n * Format: [real, dual]<br>\r\n * Quaternion format: XYZW<br>\r\n * Make sure to have normalized dual quaternions, otherwise the functions may not work as intended.<br>\r\n * @module quat2\r\n */\n\n/**\r\n * Creates a new identity dual quat\r\n *\r\n * @returns {quat2} a new dual quaternion [real -> rotation, dual -> translation]\r\n */\n\nexport function create() {\n  var dq = new glMatrix.ARRAY_TYPE(8);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    dq[0] = 0;\n    dq[1] = 0;\n    dq[2] = 0;\n    dq[4] = 0;\n    dq[5] = 0;\n    dq[6] = 0;\n    dq[7] = 0;\n  }\n\n  dq[3] = 1;\n  return dq;\n}\n/**\r\n * Creates a new quat initialized with values from an existing quaternion\r\n *\r\n * @param {ReadonlyQuat2} a dual quaternion to clone\r\n * @returns {quat2} new dual quaternion\r\n * @function\r\n */\n\nexport function clone(a) {\n  var dq = new glMatrix.ARRAY_TYPE(8);\n  dq[0] = a[0];\n  dq[1] = a[1];\n  dq[2] = a[2];\n  dq[3] = a[3];\n  dq[4] = a[4];\n  dq[5] = a[5];\n  dq[6] = a[6];\n  dq[7] = a[7];\n  return dq;\n}\n/**\r\n * Creates a new dual quat initialized with the given values\r\n *\r\n * @param {Number} x1 X component\r\n * @param {Number} y1 Y component\r\n * @param {Number} z1 Z component\r\n * @param {Number} w1 W component\r\n * @param {Number} x2 X component\r\n * @param {Number} y2 Y component\r\n * @param {Number} z2 Z component\r\n * @param {Number} w2 W component\r\n * @returns {quat2} new dual quaternion\r\n * @function\r\n */\n\nexport function fromValues(x1, y1, z1, w1, x2, y2, z2, w2) {\n  var dq = new glMatrix.ARRAY_TYPE(8);\n  dq[0] = x1;\n  dq[1] = y1;\n  dq[2] = z1;\n  dq[3] = w1;\n  dq[4] = x2;\n  dq[5] = y2;\n  dq[6] = z2;\n  dq[7] = w2;\n  return dq;\n}\n/**\r\n * Creates a new dual quat from the given values (quat and translation)\r\n *\r\n * @param {Number} x1 X component\r\n * @param {Number} y1 Y component\r\n * @param {Number} z1 Z component\r\n * @param {Number} w1 W component\r\n * @param {Number} x2 X component (translation)\r\n * @param {Number} y2 Y component (translation)\r\n * @param {Number} z2 Z component (translation)\r\n * @returns {quat2} new dual quaternion\r\n * @function\r\n */\n\nexport function fromRotationTranslationValues(x1, y1, z1, w1, x2, y2, z2) {\n  var dq = new glMatrix.ARRAY_TYPE(8);\n  dq[0] = x1;\n  dq[1] = y1;\n  dq[2] = z1;\n  dq[3] = w1;\n  var ax = x2 * 0.5,\n      ay = y2 * 0.5,\n      az = z2 * 0.5;\n  dq[4] = ax * w1 + ay * z1 - az * y1;\n  dq[5] = ay * w1 + az * x1 - ax * z1;\n  dq[6] = az * w1 + ax * y1 - ay * x1;\n  dq[7] = -ax * x1 - ay * y1 - az * z1;\n  return dq;\n}\n/**\r\n * Creates a dual quat from a quaternion and a translation\r\n *\r\n * @param {ReadonlyQuat2} dual quaternion receiving operation result\r\n * @param {ReadonlyQuat} q a normalized quaternion\r\n * @param {ReadonlyVec3} t tranlation vector\r\n * @returns {quat2} dual quaternion receiving operation result\r\n * @function\r\n */\n\nexport function fromRotationTranslation(out, q, t) {\n  var ax = t[0] * 0.5,\n      ay = t[1] * 0.5,\n      az = t[2] * 0.5,\n      bx = q[0],\n      by = q[1],\n      bz = q[2],\n      bw = q[3];\n  out[0] = bx;\n  out[1] = by;\n  out[2] = bz;\n  out[3] = bw;\n  out[4] = ax * bw + ay * bz - az * by;\n  out[5] = ay * bw + az * bx - ax * bz;\n  out[6] = az * bw + ax * by - ay * bx;\n  out[7] = -ax * bx - ay * by - az * bz;\n  return out;\n}\n/**\r\n * Creates a dual quat from a translation\r\n *\r\n * @param {ReadonlyQuat2} dual quaternion receiving operation result\r\n * @param {ReadonlyVec3} t translation vector\r\n * @returns {quat2} dual quaternion receiving operation result\r\n * @function\r\n */\n\nexport function fromTranslation(out, t) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = t[0] * 0.5;\n  out[5] = t[1] * 0.5;\n  out[6] = t[2] * 0.5;\n  out[7] = 0;\n  return out;\n}\n/**\r\n * Creates a dual quat from a quaternion\r\n *\r\n * @param {ReadonlyQuat2} dual quaternion receiving operation result\r\n * @param {ReadonlyQuat} q the quaternion\r\n * @returns {quat2} dual quaternion receiving operation result\r\n * @function\r\n */\n\nexport function fromRotation(out, q) {\n  out[0] = q[0];\n  out[1] = q[1];\n  out[2] = q[2];\n  out[3] = q[3];\n  out[4] = 0;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  return out;\n}\n/**\r\n * Creates a new dual quat from a matrix (4x4)\r\n *\r\n * @param {quat2} out the dual quaternion\r\n * @param {ReadonlyMat4} a the matrix\r\n * @returns {quat2} dual quat receiving operation result\r\n * @function\r\n */\n\nexport function fromMat4(out, a) {\n  //TODO Optimize this\n  var outer = quat.create();\n  mat4.getRotation(outer, a);\n  var t = new glMatrix.ARRAY_TYPE(3);\n  mat4.getTranslation(t, a);\n  fromRotationTranslation(out, outer, t);\n  return out;\n}\n/**\r\n * Copy the values from one dual quat to another\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {ReadonlyQuat2} a the source dual quaternion\r\n * @returns {quat2} out\r\n * @function\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  return out;\n}\n/**\r\n * Set a dual quat to the identity dual quaternion\r\n *\r\n * @param {quat2} out the receiving quaternion\r\n * @returns {quat2} out\r\n */\n\nexport function identity(out) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = 0;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  return out;\n}\n/**\r\n * Set the components of a dual quat to the given values\r\n *\r\n * @param {quat2} out the receiving quaternion\r\n * @param {Number} x1 X component\r\n * @param {Number} y1 Y component\r\n * @param {Number} z1 Z component\r\n * @param {Number} w1 W component\r\n * @param {Number} x2 X component\r\n * @param {Number} y2 Y component\r\n * @param {Number} z2 Z component\r\n * @param {Number} w2 W component\r\n * @returns {quat2} out\r\n * @function\r\n */\n\nexport function set(out, x1, y1, z1, w1, x2, y2, z2, w2) {\n  out[0] = x1;\n  out[1] = y1;\n  out[2] = z1;\n  out[3] = w1;\n  out[4] = x2;\n  out[5] = y2;\n  out[6] = z2;\n  out[7] = w2;\n  return out;\n}\n/**\r\n * Gets the real part of a dual quat\r\n * @param  {quat} out real part\r\n * @param  {ReadonlyQuat2} a Dual Quaternion\r\n * @return {quat} real part\r\n */\n\nexport var getReal = quat.copy;\n/**\r\n * Gets the dual part of a dual quat\r\n * @param  {quat} out dual part\r\n * @param  {ReadonlyQuat2} a Dual Quaternion\r\n * @return {quat} dual part\r\n */\n\nexport function getDual(out, a) {\n  out[0] = a[4];\n  out[1] = a[5];\n  out[2] = a[6];\n  out[3] = a[7];\n  return out;\n}\n/**\r\n * Set the real component of a dual quat to the given quaternion\r\n *\r\n * @param {quat2} out the receiving quaternion\r\n * @param {ReadonlyQuat} q a quaternion representing the real part\r\n * @returns {quat2} out\r\n * @function\r\n */\n\nexport var setReal = quat.copy;\n/**\r\n * Set the dual component of a dual quat to the given quaternion\r\n *\r\n * @param {quat2} out the receiving quaternion\r\n * @param {ReadonlyQuat} q a quaternion representing the dual part\r\n * @returns {quat2} out\r\n * @function\r\n */\n\nexport function setDual(out, q) {\n  out[4] = q[0];\n  out[5] = q[1];\n  out[6] = q[2];\n  out[7] = q[3];\n  return out;\n}\n/**\r\n * Gets the translation of a normalized dual quat\r\n * @param  {vec3} out translation\r\n * @param  {ReadonlyQuat2} a Dual Quaternion to be decomposed\r\n * @return {vec3} translation\r\n */\n\nexport function getTranslation(out, a) {\n  var ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7],\n      bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3];\n  out[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n  out[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n  out[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  return out;\n}\n/**\r\n * Translates a dual quat by the given vector\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {ReadonlyQuat2} a the dual quaternion to translate\r\n * @param {ReadonlyVec3} v vector to translate by\r\n * @returns {quat2} out\r\n */\n\nexport function translate(out, a, v) {\n  var ax1 = a[0],\n      ay1 = a[1],\n      az1 = a[2],\n      aw1 = a[3],\n      bx1 = v[0] * 0.5,\n      by1 = v[1] * 0.5,\n      bz1 = v[2] * 0.5,\n      ax2 = a[4],\n      ay2 = a[5],\n      az2 = a[6],\n      aw2 = a[7];\n  out[0] = ax1;\n  out[1] = ay1;\n  out[2] = az1;\n  out[3] = aw1;\n  out[4] = aw1 * bx1 + ay1 * bz1 - az1 * by1 + ax2;\n  out[5] = aw1 * by1 + az1 * bx1 - ax1 * bz1 + ay2;\n  out[6] = aw1 * bz1 + ax1 * by1 - ay1 * bx1 + az2;\n  out[7] = -ax1 * bx1 - ay1 * by1 - az1 * bz1 + aw2;\n  return out;\n}\n/**\r\n * Rotates a dual quat around the X axis\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {ReadonlyQuat2} a the dual quaternion to rotate\r\n * @param {number} rad how far should the rotation be\r\n * @returns {quat2} out\r\n */\n\nexport function rotateX(out, a, rad) {\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7],\n      ax1 = ax * bw + aw * bx + ay * bz - az * by,\n      ay1 = ay * bw + aw * by + az * bx - ax * bz,\n      az1 = az * bw + aw * bz + ax * by - ay * bx,\n      aw1 = aw * bw - ax * bx - ay * by - az * bz;\n  quat.rotateX(out, a, rad);\n  bx = out[0];\n  by = out[1];\n  bz = out[2];\n  bw = out[3];\n  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  return out;\n}\n/**\r\n * Rotates a dual quat around the Y axis\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {ReadonlyQuat2} a the dual quaternion to rotate\r\n * @param {number} rad how far should the rotation be\r\n * @returns {quat2} out\r\n */\n\nexport function rotateY(out, a, rad) {\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7],\n      ax1 = ax * bw + aw * bx + ay * bz - az * by,\n      ay1 = ay * bw + aw * by + az * bx - ax * bz,\n      az1 = az * bw + aw * bz + ax * by - ay * bx,\n      aw1 = aw * bw - ax * bx - ay * by - az * bz;\n  quat.rotateY(out, a, rad);\n  bx = out[0];\n  by = out[1];\n  bz = out[2];\n  bw = out[3];\n  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  return out;\n}\n/**\r\n * Rotates a dual quat around the Z axis\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {ReadonlyQuat2} a the dual quaternion to rotate\r\n * @param {number} rad how far should the rotation be\r\n * @returns {quat2} out\r\n */\n\nexport function rotateZ(out, a, rad) {\n  var bx = -a[0],\n      by = -a[1],\n      bz = -a[2],\n      bw = a[3],\n      ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7],\n      ax1 = ax * bw + aw * bx + ay * bz - az * by,\n      ay1 = ay * bw + aw * by + az * bx - ax * bz,\n      az1 = az * bw + aw * bz + ax * by - ay * bx,\n      aw1 = aw * bw - ax * bx - ay * by - az * bz;\n  quat.rotateZ(out, a, rad);\n  bx = out[0];\n  by = out[1];\n  bz = out[2];\n  bw = out[3];\n  out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  return out;\n}\n/**\r\n * Rotates a dual quat by a given quaternion (a * q)\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {ReadonlyQuat2} a the dual quaternion to rotate\r\n * @param {ReadonlyQuat} q quaternion to rotate by\r\n * @returns {quat2} out\r\n */\n\nexport function rotateByQuatAppend(out, a, q) {\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3],\n      ax = a[0],\n      ay = a[1],\n      az = a[2],\n      aw = a[3];\n  out[0] = ax * qw + aw * qx + ay * qz - az * qy;\n  out[1] = ay * qw + aw * qy + az * qx - ax * qz;\n  out[2] = az * qw + aw * qz + ax * qy - ay * qx;\n  out[3] = aw * qw - ax * qx - ay * qy - az * qz;\n  ax = a[4];\n  ay = a[5];\n  az = a[6];\n  aw = a[7];\n  out[4] = ax * qw + aw * qx + ay * qz - az * qy;\n  out[5] = ay * qw + aw * qy + az * qx - ax * qz;\n  out[6] = az * qw + aw * qz + ax * qy - ay * qx;\n  out[7] = aw * qw - ax * qx - ay * qy - az * qz;\n  return out;\n}\n/**\r\n * Rotates a dual quat by a given quaternion (q * a)\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {ReadonlyQuat} q quaternion to rotate by\r\n * @param {ReadonlyQuat2} a the dual quaternion to rotate\r\n * @returns {quat2} out\r\n */\n\nexport function rotateByQuatPrepend(out, q, a) {\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3],\n      bx = a[0],\n      by = a[1],\n      bz = a[2],\n      bw = a[3];\n  out[0] = qx * bw + qw * bx + qy * bz - qz * by;\n  out[1] = qy * bw + qw * by + qz * bx - qx * bz;\n  out[2] = qz * bw + qw * bz + qx * by - qy * bx;\n  out[3] = qw * bw - qx * bx - qy * by - qz * bz;\n  bx = a[4];\n  by = a[5];\n  bz = a[6];\n  bw = a[7];\n  out[4] = qx * bw + qw * bx + qy * bz - qz * by;\n  out[5] = qy * bw + qw * by + qz * bx - qx * bz;\n  out[6] = qz * bw + qw * bz + qx * by - qy * bx;\n  out[7] = qw * bw - qx * bx - qy * by - qz * bz;\n  return out;\n}\n/**\r\n * Rotates a dual quat around a given axis. Does the normalisation automatically\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {ReadonlyQuat2} a the dual quaternion to rotate\r\n * @param {ReadonlyVec3} axis the axis to rotate around\r\n * @param {Number} rad how far the rotation should be\r\n * @returns {quat2} out\r\n */\n\nexport function rotateAroundAxis(out, a, axis, rad) {\n  //Special case for rad = 0\n  if (Math.abs(rad) < glMatrix.EPSILON) {\n    return copy(out, a);\n  }\n\n  var axisLength = Math.hypot(axis[0], axis[1], axis[2]);\n  rad = rad * 0.5;\n  var s = Math.sin(rad);\n  var bx = s * axis[0] / axisLength;\n  var by = s * axis[1] / axisLength;\n  var bz = s * axis[2] / axisLength;\n  var bw = Math.cos(rad);\n  var ax1 = a[0],\n      ay1 = a[1],\n      az1 = a[2],\n      aw1 = a[3];\n  out[0] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;\n  out[1] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;\n  out[2] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;\n  out[3] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;\n  var ax = a[4],\n      ay = a[5],\n      az = a[6],\n      aw = a[7];\n  out[4] = ax * bw + aw * bx + ay * bz - az * by;\n  out[5] = ay * bw + aw * by + az * bx - ax * bz;\n  out[6] = az * bw + aw * bz + ax * by - ay * bx;\n  out[7] = aw * bw - ax * bx - ay * by - az * bz;\n  return out;\n}\n/**\r\n * Adds two dual quat's\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {ReadonlyQuat2} a the first operand\r\n * @param {ReadonlyQuat2} b the second operand\r\n * @returns {quat2} out\r\n * @function\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  return out;\n}\n/**\r\n * Multiplies two dual quat's\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {ReadonlyQuat2} a the first operand\r\n * @param {ReadonlyQuat2} b the second operand\r\n * @returns {quat2} out\r\n */\n\nexport function multiply(out, a, b) {\n  var ax0 = a[0],\n      ay0 = a[1],\n      az0 = a[2],\n      aw0 = a[3],\n      bx1 = b[4],\n      by1 = b[5],\n      bz1 = b[6],\n      bw1 = b[7],\n      ax1 = a[4],\n      ay1 = a[5],\n      az1 = a[6],\n      aw1 = a[7],\n      bx0 = b[0],\n      by0 = b[1],\n      bz0 = b[2],\n      bw0 = b[3];\n  out[0] = ax0 * bw0 + aw0 * bx0 + ay0 * bz0 - az0 * by0;\n  out[1] = ay0 * bw0 + aw0 * by0 + az0 * bx0 - ax0 * bz0;\n  out[2] = az0 * bw0 + aw0 * bz0 + ax0 * by0 - ay0 * bx0;\n  out[3] = aw0 * bw0 - ax0 * bx0 - ay0 * by0 - az0 * bz0;\n  out[4] = ax0 * bw1 + aw0 * bx1 + ay0 * bz1 - az0 * by1 + ax1 * bw0 + aw1 * bx0 + ay1 * bz0 - az1 * by0;\n  out[5] = ay0 * bw1 + aw0 * by1 + az0 * bx1 - ax0 * bz1 + ay1 * bw0 + aw1 * by0 + az1 * bx0 - ax1 * bz0;\n  out[6] = az0 * bw1 + aw0 * bz1 + ax0 * by1 - ay0 * bx1 + az1 * bw0 + aw1 * bz0 + ax1 * by0 - ay1 * bx0;\n  out[7] = aw0 * bw1 - ax0 * bx1 - ay0 * by1 - az0 * bz1 + aw1 * bw0 - ax1 * bx0 - ay1 * by0 - az1 * bz0;\n  return out;\n}\n/**\r\n * Alias for {@link quat2.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Scales a dual quat by a scalar number\r\n *\r\n * @param {quat2} out the receiving dual quat\r\n * @param {ReadonlyQuat2} a the dual quat to scale\r\n * @param {Number} b amount to scale the dual quat by\r\n * @returns {quat2} out\r\n * @function\r\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  return out;\n}\n/**\r\n * Calculates the dot product of two dual quat's (The dot product of the real parts)\r\n *\r\n * @param {ReadonlyQuat2} a the first operand\r\n * @param {ReadonlyQuat2} b the second operand\r\n * @returns {Number} dot product of a and b\r\n * @function\r\n */\n\nexport var dot = quat.dot;\n/**\r\n * Performs a linear interpolation between two dual quats's\r\n * NOTE: The resulting dual quaternions won't always be normalized (The error is most noticeable when t = 0.5)\r\n *\r\n * @param {quat2} out the receiving dual quat\r\n * @param {ReadonlyQuat2} a the first operand\r\n * @param {ReadonlyQuat2} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {quat2} out\r\n */\n\nexport function lerp(out, a, b, t) {\n  var mt = 1 - t;\n  if (dot(a, b) < 0) t = -t;\n  out[0] = a[0] * mt + b[0] * t;\n  out[1] = a[1] * mt + b[1] * t;\n  out[2] = a[2] * mt + b[2] * t;\n  out[3] = a[3] * mt + b[3] * t;\n  out[4] = a[4] * mt + b[4] * t;\n  out[5] = a[5] * mt + b[5] * t;\n  out[6] = a[6] * mt + b[6] * t;\n  out[7] = a[7] * mt + b[7] * t;\n  return out;\n}\n/**\r\n * Calculates the inverse of a dual quat. If they are normalized, conjugate is cheaper\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {ReadonlyQuat2} a dual quat to calculate inverse of\r\n * @returns {quat2} out\r\n */\n\nexport function invert(out, a) {\n  var sqlen = squaredLength(a);\n  out[0] = -a[0] / sqlen;\n  out[1] = -a[1] / sqlen;\n  out[2] = -a[2] / sqlen;\n  out[3] = a[3] / sqlen;\n  out[4] = -a[4] / sqlen;\n  out[5] = -a[5] / sqlen;\n  out[6] = -a[6] / sqlen;\n  out[7] = a[7] / sqlen;\n  return out;\n}\n/**\r\n * Calculates the conjugate of a dual quat\r\n * If the dual quaternion is normalized, this function is faster than quat2.inverse and produces the same result.\r\n *\r\n * @param {quat2} out the receiving quaternion\r\n * @param {ReadonlyQuat2} a quat to calculate conjugate of\r\n * @returns {quat2} out\r\n */\n\nexport function conjugate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a[3];\n  out[4] = -a[4];\n  out[5] = -a[5];\n  out[6] = -a[6];\n  out[7] = a[7];\n  return out;\n}\n/**\r\n * Calculates the length of a dual quat\r\n *\r\n * @param {ReadonlyQuat2} a dual quat to calculate length of\r\n * @returns {Number} length of a\r\n * @function\r\n */\n\nexport var length = quat.length;\n/**\r\n * Alias for {@link quat2.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Calculates the squared length of a dual quat\r\n *\r\n * @param {ReadonlyQuat2} a dual quat to calculate squared length of\r\n * @returns {Number} squared length of a\r\n * @function\r\n */\n\nexport var squaredLength = quat.squaredLength;\n/**\r\n * Alias for {@link quat2.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Normalize a dual quat\r\n *\r\n * @param {quat2} out the receiving dual quaternion\r\n * @param {ReadonlyQuat2} a dual quaternion to normalize\r\n * @returns {quat2} out\r\n * @function\r\n */\n\nexport function normalize(out, a) {\n  var magnitude = squaredLength(a);\n\n  if (magnitude > 0) {\n    magnitude = Math.sqrt(magnitude);\n    var a0 = a[0] / magnitude;\n    var a1 = a[1] / magnitude;\n    var a2 = a[2] / magnitude;\n    var a3 = a[3] / magnitude;\n    var b0 = a[4];\n    var b1 = a[5];\n    var b2 = a[6];\n    var b3 = a[7];\n    var a_dot_b = a0 * b0 + a1 * b1 + a2 * b2 + a3 * b3;\n    out[0] = a0;\n    out[1] = a1;\n    out[2] = a2;\n    out[3] = a3;\n    out[4] = (b0 - a0 * a_dot_b) / magnitude;\n    out[5] = (b1 - a1 * a_dot_b) / magnitude;\n    out[6] = (b2 - a2 * a_dot_b) / magnitude;\n    out[7] = (b3 - a3 * a_dot_b) / magnitude;\n  }\n\n  return out;\n}\n/**\r\n * Returns a string representation of a dual quatenion\r\n *\r\n * @param {ReadonlyQuat2} a dual quaternion to represent as a string\r\n * @returns {String} string representation of the dual quat\r\n */\n\nexport function str(a) {\n  return \"quat2(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \", \" + a[4] + \", \" + a[5] + \", \" + a[6] + \", \" + a[7] + \")\";\n}\n/**\r\n * Returns whether or not the dual quaternions have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyQuat2} a the first dual quaternion.\r\n * @param {ReadonlyQuat2} b the second dual quaternion.\r\n * @returns {Boolean} true if the dual quaternions are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7];\n}\n/**\r\n * Returns whether or not the dual quaternions have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyQuat2} a the first dual quat.\r\n * @param {ReadonlyQuat2} b the second dual quat.\r\n * @returns {Boolean} true if the dual quats are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3],\n      a4 = a[4],\n      a5 = a[5],\n      a6 = a[6],\n      a7 = a[7];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3],\n      b4 = b[4],\n      b5 = b[5],\n      b6 = b[6],\n      b7 = b[7];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7));\n}","import * as glMatrix from \"./common.js\";\n/**\r\n * 2 Dimensional Vector\r\n * @module vec2\r\n */\n\n/**\r\n * Creates a new, empty vec2\r\n *\r\n * @returns {vec2} a new 2D vector\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(2);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n  }\n\n  return out;\n}\n/**\r\n * Creates a new vec2 initialized with values from an existing vector\r\n *\r\n * @param {ReadonlyVec2} a vector to clone\r\n * @returns {vec2} a new 2D vector\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n/**\r\n * Creates a new vec2 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @returns {vec2} a new 2D vector\r\n */\n\nexport function fromValues(x, y) {\n  var out = new glMatrix.ARRAY_TYPE(2);\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n/**\r\n * Copy the values from one vec2 to another\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the source vector\r\n * @returns {vec2} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n/**\r\n * Set the components of a vec2 to the given values\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @returns {vec2} out\r\n */\n\nexport function set(out, x, y) {\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n/**\r\n * Adds two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  return out;\n}\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  return out;\n}\n/**\r\n * Multiplies two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  return out;\n}\n/**\r\n * Divides two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  return out;\n}\n/**\r\n * Math.ceil the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a vector to ceil\r\n * @returns {vec2} out\r\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  return out;\n}\n/**\r\n * Math.floor the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a vector to floor\r\n * @returns {vec2} out\r\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  return out;\n}\n/**\r\n * Returns the minimum of two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  return out;\n}\n/**\r\n * Returns the maximum of two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @returns {vec2} out\r\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  return out;\n}\n/**\r\n * Math.round the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a vector to round\r\n * @returns {vec2} out\r\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  return out;\n}\n/**\r\n * Scales a vec2 by a scalar number\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec2} out\r\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  return out;\n}\n/**\r\n * Adds two vec2's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec2} out\r\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  return out;\n}\n/**\r\n * Calculates the euclidian distance between two vec2's\r\n *\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0],\n      y = b[1] - a[1];\n  return Math.hypot(x, y);\n}\n/**\r\n * Calculates the squared euclidian distance between two vec2's\r\n *\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0],\n      y = b[1] - a[1];\n  return x * x + y * y;\n}\n/**\r\n * Calculates the length of a vec2\r\n *\r\n * @param {ReadonlyVec2} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nexport function length(a) {\n  var x = a[0],\n      y = a[1];\n  return Math.hypot(x, y);\n}\n/**\r\n * Calculates the squared length of a vec2\r\n *\r\n * @param {ReadonlyVec2} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\n\nexport function squaredLength(a) {\n  var x = a[0],\n      y = a[1];\n  return x * x + y * y;\n}\n/**\r\n * Negates the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a vector to negate\r\n * @returns {vec2} out\r\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  return out;\n}\n/**\r\n * Returns the inverse of the components of a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a vector to invert\r\n * @returns {vec2} out\r\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  return out;\n}\n/**\r\n * Normalize a vec2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a vector to normalize\r\n * @returns {vec2} out\r\n */\n\nexport function normalize(out, a) {\n  var x = a[0],\n      y = a[1];\n  var len = x * x + y * y;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  return out;\n}\n/**\r\n * Calculates the dot product of two vec2's\r\n *\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1];\n}\n/**\r\n * Computes the cross product of two vec2's\r\n * Note that the cross product must by definition produce a 3D vector\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function cross(out, a, b) {\n  var z = a[0] * b[1] - a[1] * b[0];\n  out[0] = out[1] = 0;\n  out[2] = z;\n  return out;\n}\n/**\r\n * Performs a linear interpolation between two vec2's\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the first operand\r\n * @param {ReadonlyVec2} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec2} out\r\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0],\n      ay = a[1];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  return out;\n}\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec2} out\r\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  out[0] = Math.cos(r) * scale;\n  out[1] = Math.sin(r) * scale;\n  return out;\n}\n/**\r\n * Transforms the vec2 with a mat2\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the vector to transform\r\n * @param {ReadonlyMat2} m matrix to transform with\r\n * @returns {vec2} out\r\n */\n\nexport function transformMat2(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[2] * y;\n  out[1] = m[1] * x + m[3] * y;\n  return out;\n}\n/**\r\n * Transforms the vec2 with a mat2d\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the vector to transform\r\n * @param {ReadonlyMat2d} m matrix to transform with\r\n * @returns {vec2} out\r\n */\n\nexport function transformMat2d(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[2] * y + m[4];\n  out[1] = m[1] * x + m[3] * y + m[5];\n  return out;\n}\n/**\r\n * Transforms the vec2 with a mat3\r\n * 3rd vector component is implicitly '1'\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the vector to transform\r\n * @param {ReadonlyMat3} m matrix to transform with\r\n * @returns {vec2} out\r\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1];\n  out[0] = m[0] * x + m[3] * y + m[6];\n  out[1] = m[1] * x + m[4] * y + m[7];\n  return out;\n}\n/**\r\n * Transforms the vec2 with a mat4\r\n * 3rd vector component is implicitly '0'\r\n * 4th vector component is implicitly '1'\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @param {ReadonlyVec2} a the vector to transform\r\n * @param {ReadonlyMat4} m matrix to transform with\r\n * @returns {vec2} out\r\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0];\n  var y = a[1];\n  out[0] = m[0] * x + m[4] * y + m[12];\n  out[1] = m[1] * x + m[5] * y + m[13];\n  return out;\n}\n/**\r\n * Rotate a 2D vector\r\n * @param {vec2} out The receiving vec2\r\n * @param {ReadonlyVec2} a The vec2 point to rotate\r\n * @param {ReadonlyVec2} b The origin of the rotation\r\n * @param {Number} rad The angle of rotation in radians\r\n * @returns {vec2} out\r\n */\n\nexport function rotate(out, a, b, rad) {\n  //Translate point to the origin\n  var p0 = a[0] - b[0],\n      p1 = a[1] - b[1],\n      sinC = Math.sin(rad),\n      cosC = Math.cos(rad); //perform rotation and translate to correct position\n\n  out[0] = p0 * cosC - p1 * sinC + b[0];\n  out[1] = p0 * sinC + p1 * cosC + b[1];\n  return out;\n}\n/**\r\n * Get the angle between two 2D vectors\r\n * @param {ReadonlyVec2} a The first operand\r\n * @param {ReadonlyVec2} b The second operand\r\n * @returns {Number} The angle in radians\r\n */\n\nexport function angle(a, b) {\n  var x1 = a[0],\n      y1 = a[1],\n      x2 = b[0],\n      y2 = b[1],\n      // mag is the product of the magnitudes of a and b\n  mag = Math.sqrt(x1 * x1 + y1 * y1) * Math.sqrt(x2 * x2 + y2 * y2),\n      // mag &&.. short circuits if mag == 0\n  cosine = mag && (x1 * x2 + y1 * y2) / mag; // Math.min(Math.max(cosine, -1), 1) clamps the cosine between -1 and 1\n\n  return Math.acos(Math.min(Math.max(cosine, -1), 1));\n}\n/**\r\n * Set the components of a vec2 to zero\r\n *\r\n * @param {vec2} out the receiving vector\r\n * @returns {vec2} out\r\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  return out;\n}\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {ReadonlyVec2} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nexport function str(a) {\n  return \"vec2(\" + a[0] + \", \" + a[1] + \")\";\n}\n/**\r\n * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyVec2} a The first vector.\r\n * @param {ReadonlyVec2} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1];\n}\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyVec2} a The first vector.\r\n * @param {ReadonlyVec2} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1];\n  var b0 = b[0],\n      b1 = b[1];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1));\n}\n/**\r\n * Alias for {@link vec2.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Alias for {@link vec2.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;\n/**\r\n * Alias for {@link vec2.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link vec2.divide}\r\n * @function\r\n */\n\nexport var div = divide;\n/**\r\n * Alias for {@link vec2.distance}\r\n * @function\r\n */\n\nexport var dist = distance;\n/**\r\n * Alias for {@link vec2.squaredDistance}\r\n * @function\r\n */\n\nexport var sqrDist = squaredDistance;\n/**\r\n * Alias for {@link vec2.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Perform some operation over an array of vec2s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 2;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n    }\n\n    return a;\n  };\n}();","import * as glMatrix from \"./common.js\";\n/**\r\n * 3 Dimensional Vector\r\n * @module vec3\r\n */\n\n/**\r\n * Creates a new, empty vec3\r\n *\r\n * @returns {vec3} a new 3D vector\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(3);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n  }\n\n  return out;\n}\n/**\r\n * Creates a new vec3 initialized with values from an existing vector\r\n *\r\n * @param {ReadonlyVec3} a vector to clone\r\n * @returns {vec3} a new 3D vector\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\r\n * Calculates the length of a vec3\r\n *\r\n * @param {ReadonlyVec3} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return Math.hypot(x, y, z);\n}\n/**\r\n * Creates a new vec3 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} a new 3D vector\r\n */\n\nexport function fromValues(x, y, z) {\n  var out = new glMatrix.ARRAY_TYPE(3);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\r\n * Copy the values from one vec3 to another\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the source vector\r\n * @returns {vec3} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n/**\r\n * Set the components of a vec3 to the given values\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @returns {vec3} out\r\n */\n\nexport function set(out, x, y, z) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n/**\r\n * Adds two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\n/**\r\n * Multiplies two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  return out;\n}\n/**\r\n * Divides two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  return out;\n}\n/**\r\n * Math.ceil the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to ceil\r\n * @returns {vec3} out\r\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  return out;\n}\n/**\r\n * Math.floor the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to floor\r\n * @returns {vec3} out\r\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  return out;\n}\n/**\r\n * Returns the minimum of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  return out;\n}\n/**\r\n * Returns the maximum of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  return out;\n}\n/**\r\n * Math.round the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to round\r\n * @returns {vec3} out\r\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  return out;\n}\n/**\r\n * Scales a vec3 by a scalar number\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec3} out\r\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  return out;\n}\n/**\r\n * Adds two vec3's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec3} out\r\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  return out;\n}\n/**\r\n * Calculates the euclidian distance between two vec3's\r\n *\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return Math.hypot(x, y, z);\n}\n/**\r\n * Calculates the squared euclidian distance between two vec3's\r\n *\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return x * x + y * y + z * z;\n}\n/**\r\n * Calculates the squared length of a vec3\r\n *\r\n * @param {ReadonlyVec3} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return x * x + y * y + z * z;\n}\n/**\r\n * Negates the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to negate\r\n * @returns {vec3} out\r\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  return out;\n}\n/**\r\n * Returns the inverse of the components of a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to invert\r\n * @returns {vec3} out\r\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n}\n/**\r\n * Normalize a vec3\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a vector to normalize\r\n * @returns {vec3} out\r\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var len = x * x + y * y + z * z;\n\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = a[0] * len;\n  out[1] = a[1] * len;\n  out[2] = a[2] * len;\n  return out;\n}\n/**\r\n * Calculates the dot product of two vec3's\r\n *\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n/**\r\n * Computes the cross product of two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @returns {vec3} out\r\n */\n\nexport function cross(out, a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2];\n  var bx = b[0],\n      by = b[1],\n      bz = b[2];\n  out[0] = ay * bz - az * by;\n  out[1] = az * bx - ax * bz;\n  out[2] = ax * by - ay * bx;\n  return out;\n}\n/**\r\n * Performs a linear interpolation between two vec3's\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  return out;\n}\n/**\r\n * Performs a hermite interpolation with two control points\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @param {ReadonlyVec3} c the third operand\r\n * @param {ReadonlyVec3} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\nexport function hermite(out, a, b, c, d, t) {\n  var factorTimes2 = t * t;\n  var factor1 = factorTimes2 * (2 * t - 3) + 1;\n  var factor2 = factorTimes2 * (t - 2) + t;\n  var factor3 = factorTimes2 * (t - 1);\n  var factor4 = factorTimes2 * (3 - 2 * t);\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\r\n * Performs a bezier interpolation with two control points\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the first operand\r\n * @param {ReadonlyVec3} b the second operand\r\n * @param {ReadonlyVec3} c the third operand\r\n * @param {ReadonlyVec3} d the fourth operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec3} out\r\n */\n\nexport function bezier(out, a, b, c, d, t) {\n  var inverseFactor = 1 - t;\n  var inverseFactorTimesTwo = inverseFactor * inverseFactor;\n  var factorTimes2 = t * t;\n  var factor1 = inverseFactorTimesTwo * inverseFactor;\n  var factor2 = 3 * t * inverseFactorTimesTwo;\n  var factor3 = 3 * factorTimes2 * inverseFactor;\n  var factor4 = factorTimes2 * t;\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n  return out;\n}\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec3} out\r\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0;\n  var r = glMatrix.RANDOM() * 2.0 * Math.PI;\n  var z = glMatrix.RANDOM() * 2.0 - 1.0;\n  var zScale = Math.sqrt(1.0 - z * z) * scale;\n  out[0] = Math.cos(r) * zScale;\n  out[1] = Math.sin(r) * zScale;\n  out[2] = z * scale;\n  return out;\n}\n/**\r\n * Transforms the vec3 with a mat4.\r\n * 4th vector component is implicitly '1'\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the vector to transform\r\n * @param {ReadonlyMat4} m matrix to transform with\r\n * @returns {vec3} out\r\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var w = m[3] * x + m[7] * y + m[11] * z + m[15];\n  w = w || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n  return out;\n}\n/**\r\n * Transforms the vec3 with a mat3.\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the vector to transform\r\n * @param {ReadonlyMat3} m the 3x3 matrix to transform with\r\n * @returns {vec3} out\r\n */\n\nexport function transformMat3(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  out[0] = x * m[0] + y * m[3] + z * m[6];\n  out[1] = x * m[1] + y * m[4] + z * m[7];\n  out[2] = x * m[2] + y * m[5] + z * m[8];\n  return out;\n}\n/**\r\n * Transforms the vec3 with a quat\r\n * Can also be used for dual quaternions. (Multiply it with the real part)\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @param {ReadonlyVec3} a the vector to transform\r\n * @param {ReadonlyQuat} q quaternion to transform with\r\n * @returns {vec3} out\r\n */\n\nexport function transformQuat(out, a, q) {\n  // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3];\n  var x = a[0],\n      y = a[1],\n      z = a[2]; // var qvec = [qx, qy, qz];\n  // var uv = vec3.cross([], qvec, a);\n\n  var uvx = qy * z - qz * y,\n      uvy = qz * x - qx * z,\n      uvz = qx * y - qy * x; // var uuv = vec3.cross([], qvec, uv);\n\n  var uuvx = qy * uvz - qz * uvy,\n      uuvy = qz * uvx - qx * uvz,\n      uuvz = qx * uvy - qy * uvx; // vec3.scale(uv, uv, 2 * w);\n\n  var w2 = qw * 2;\n  uvx *= w2;\n  uvy *= w2;\n  uvz *= w2; // vec3.scale(uuv, uuv, 2);\n\n  uuvx *= 2;\n  uuvy *= 2;\n  uuvz *= 2; // return vec3.add(out, a, vec3.add(out, uv, uuv));\n\n  out[0] = x + uvx + uuvx;\n  out[1] = y + uvy + uuvy;\n  out[2] = z + uvz + uuvz;\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the x-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {ReadonlyVec3} a The vec3 point to rotate\r\n * @param {ReadonlyVec3} b The origin of the rotation\r\n * @param {Number} rad The angle of rotation in radians\r\n * @returns {vec3} out\r\n */\n\nexport function rotateX(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0];\n  r[1] = p[1] * Math.cos(rad) - p[2] * Math.sin(rad);\n  r[2] = p[1] * Math.sin(rad) + p[2] * Math.cos(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the y-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {ReadonlyVec3} a The vec3 point to rotate\r\n * @param {ReadonlyVec3} b The origin of the rotation\r\n * @param {Number} rad The angle of rotation in radians\r\n * @returns {vec3} out\r\n */\n\nexport function rotateY(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[2] * Math.sin(rad) + p[0] * Math.cos(rad);\n  r[1] = p[1];\n  r[2] = p[2] * Math.cos(rad) - p[0] * Math.sin(rad); //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Rotate a 3D vector around the z-axis\r\n * @param {vec3} out The receiving vec3\r\n * @param {ReadonlyVec3} a The vec3 point to rotate\r\n * @param {ReadonlyVec3} b The origin of the rotation\r\n * @param {Number} rad The angle of rotation in radians\r\n * @returns {vec3} out\r\n */\n\nexport function rotateZ(out, a, b, rad) {\n  var p = [],\n      r = []; //Translate point to the origin\n\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2]; //perform rotation\n\n  r[0] = p[0] * Math.cos(rad) - p[1] * Math.sin(rad);\n  r[1] = p[0] * Math.sin(rad) + p[1] * Math.cos(rad);\n  r[2] = p[2]; //translate to correct position\n\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n  return out;\n}\n/**\r\n * Get the angle between two 3D vectors\r\n * @param {ReadonlyVec3} a The first operand\r\n * @param {ReadonlyVec3} b The second operand\r\n * @returns {Number} The angle in radians\r\n */\n\nexport function angle(a, b) {\n  var ax = a[0],\n      ay = a[1],\n      az = a[2],\n      bx = b[0],\n      by = b[1],\n      bz = b[2],\n      mag1 = Math.sqrt(ax * ax + ay * ay + az * az),\n      mag2 = Math.sqrt(bx * bx + by * by + bz * bz),\n      mag = mag1 * mag2,\n      cosine = mag && dot(a, b) / mag;\n  return Math.acos(Math.min(Math.max(cosine, -1), 1));\n}\n/**\r\n * Set the components of a vec3 to zero\r\n *\r\n * @param {vec3} out the receiving vector\r\n * @returns {vec3} out\r\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  return out;\n}\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {ReadonlyVec3} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nexport function str(a) {\n  return \"vec3(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \")\";\n}\n/**\r\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyVec3} a The first vector.\r\n * @param {ReadonlyVec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyVec3} a The first vector.\r\n * @param {ReadonlyVec3} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));\n}\n/**\r\n * Alias for {@link vec3.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;\n/**\r\n * Alias for {@link vec3.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link vec3.divide}\r\n * @function\r\n */\n\nexport var div = divide;\n/**\r\n * Alias for {@link vec3.distance}\r\n * @function\r\n */\n\nexport var dist = distance;\n/**\r\n * Alias for {@link vec3.squaredDistance}\r\n * @function\r\n */\n\nexport var sqrDist = squaredDistance;\n/**\r\n * Alias for {@link vec3.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Alias for {@link vec3.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Perform some operation over an array of vec3s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 3;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n    }\n\n    return a;\n  };\n}();","import * as glMatrix from \"./common.js\";\n/**\r\n * 4 Dimensional Vector\r\n * @module vec4\r\n */\n\n/**\r\n * Creates a new, empty vec4\r\n *\r\n * @returns {vec4} a new 4D vector\r\n */\n\nexport function create() {\n  var out = new glMatrix.ARRAY_TYPE(4);\n\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n  }\n\n  return out;\n}\n/**\r\n * Creates a new vec4 initialized with values from an existing vector\r\n *\r\n * @param {ReadonlyVec4} a vector to clone\r\n * @returns {vec4} a new 4D vector\r\n */\n\nexport function clone(a) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Creates a new vec4 initialized with the given values\r\n *\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {vec4} a new 4D vector\r\n */\n\nexport function fromValues(x, y, z, w) {\n  var out = new glMatrix.ARRAY_TYPE(4);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\r\n * Copy the values from one vec4 to another\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the source vector\r\n * @returns {vec4} out\r\n */\n\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Set the components of a vec4 to the given values\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {Number} x X component\r\n * @param {Number} y Y component\r\n * @param {Number} z Z component\r\n * @param {Number} w W component\r\n * @returns {vec4} out\r\n */\n\nexport function set(out, x, y, z, w) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n/**\r\n * Adds two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  return out;\n}\n/**\r\n * Subtracts vector b from vector a\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  return out;\n}\n/**\r\n * Multiplies two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  out[3] = a[3] * b[3];\n  return out;\n}\n/**\r\n * Divides two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  out[3] = a[3] / b[3];\n  return out;\n}\n/**\r\n * Math.ceil the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a vector to ceil\r\n * @returns {vec4} out\r\n */\n\nexport function ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  out[3] = Math.ceil(a[3]);\n  return out;\n}\n/**\r\n * Math.floor the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a vector to floor\r\n * @returns {vec4} out\r\n */\n\nexport function floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  out[3] = Math.floor(a[3]);\n  return out;\n}\n/**\r\n * Returns the minimum of two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  out[3] = Math.min(a[3], b[3]);\n  return out;\n}\n/**\r\n * Returns the maximum of two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {vec4} out\r\n */\n\nexport function max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  out[3] = Math.max(a[3], b[3]);\n  return out;\n}\n/**\r\n * Math.round the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a vector to round\r\n * @returns {vec4} out\r\n */\n\nexport function round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  out[3] = Math.round(a[3]);\n  return out;\n}\n/**\r\n * Scales a vec4 by a scalar number\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the vector to scale\r\n * @param {Number} b amount to scale the vector by\r\n * @returns {vec4} out\r\n */\n\nexport function scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  return out;\n}\n/**\r\n * Adds two vec4's after scaling the second operand by a scalar value\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @param {Number} scale the amount to scale b by before adding\r\n * @returns {vec4} out\r\n */\n\nexport function scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  return out;\n}\n/**\r\n * Calculates the euclidian distance between two vec4's\r\n *\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {Number} distance between a and b\r\n */\n\nexport function distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return Math.hypot(x, y, z, w);\n}\n/**\r\n * Calculates the squared euclidian distance between two vec4's\r\n *\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {Number} squared distance between a and b\r\n */\n\nexport function squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\r\n * Calculates the length of a vec4\r\n *\r\n * @param {ReadonlyVec4} a vector to calculate length of\r\n * @returns {Number} length of a\r\n */\n\nexport function length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return Math.hypot(x, y, z, w);\n}\n/**\r\n * Calculates the squared length of a vec4\r\n *\r\n * @param {ReadonlyVec4} a vector to calculate squared length of\r\n * @returns {Number} squared length of a\r\n */\n\nexport function squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return x * x + y * y + z * z + w * w;\n}\n/**\r\n * Negates the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a vector to negate\r\n * @returns {vec4} out\r\n */\n\nexport function negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = -a[3];\n  return out;\n}\n/**\r\n * Returns the inverse of the components of a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a vector to invert\r\n * @returns {vec4} out\r\n */\n\nexport function inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  out[3] = 1.0 / a[3];\n  return out;\n}\n/**\r\n * Normalize a vec4\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a vector to normalize\r\n * @returns {vec4} out\r\n */\n\nexport function normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  var len = x * x + y * y + z * z + w * w;\n\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n  }\n\n  out[0] = x * len;\n  out[1] = y * len;\n  out[2] = z * len;\n  out[3] = w * len;\n  return out;\n}\n/**\r\n * Calculates the dot product of two vec4's\r\n *\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @returns {Number} dot product of a and b\r\n */\n\nexport function dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n}\n/**\r\n * Returns the cross-product of three vectors in a 4-dimensional space\r\n *\r\n * @param {ReadonlyVec4} result the receiving vector\r\n * @param {ReadonlyVec4} U the first vector\r\n * @param {ReadonlyVec4} V the second vector\r\n * @param {ReadonlyVec4} W the third vector\r\n * @returns {vec4} result\r\n */\n\nexport function cross(out, u, v, w) {\n  var A = v[0] * w[1] - v[1] * w[0],\n      B = v[0] * w[2] - v[2] * w[0],\n      C = v[0] * w[3] - v[3] * w[0],\n      D = v[1] * w[2] - v[2] * w[1],\n      E = v[1] * w[3] - v[3] * w[1],\n      F = v[2] * w[3] - v[3] * w[2];\n  var G = u[0];\n  var H = u[1];\n  var I = u[2];\n  var J = u[3];\n  out[0] = H * F - I * E + J * D;\n  out[1] = -(G * F) + I * C - J * B;\n  out[2] = G * E - H * C + J * A;\n  out[3] = -(G * D) + H * B - I * A;\n  return out;\n}\n/**\r\n * Performs a linear interpolation between two vec4's\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the first operand\r\n * @param {ReadonlyVec4} b the second operand\r\n * @param {Number} t interpolation amount, in the range [0-1], between the two inputs\r\n * @returns {vec4} out\r\n */\n\nexport function lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  var aw = a[3];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  out[3] = aw + t * (b[3] - aw);\n  return out;\n}\n/**\r\n * Generates a random vector with the given scale\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\r\n * @returns {vec4} out\r\n */\n\nexport function random(out, scale) {\n  scale = scale || 1.0; // Marsaglia, George. Choosing a Point from the Surface of a\n  // Sphere. Ann. Math. Statist. 43 (1972), no. 2, 645--646.\n  // http://projecteuclid.org/euclid.aoms/1177692644;\n\n  var v1, v2, v3, v4;\n  var s1, s2;\n\n  do {\n    v1 = glMatrix.RANDOM() * 2 - 1;\n    v2 = glMatrix.RANDOM() * 2 - 1;\n    s1 = v1 * v1 + v2 * v2;\n  } while (s1 >= 1);\n\n  do {\n    v3 = glMatrix.RANDOM() * 2 - 1;\n    v4 = glMatrix.RANDOM() * 2 - 1;\n    s2 = v3 * v3 + v4 * v4;\n  } while (s2 >= 1);\n\n  var d = Math.sqrt((1 - s1) / s2);\n  out[0] = scale * v1;\n  out[1] = scale * v2;\n  out[2] = scale * v3 * d;\n  out[3] = scale * v4 * d;\n  return out;\n}\n/**\r\n * Transforms the vec4 with a mat4.\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the vector to transform\r\n * @param {ReadonlyMat4} m matrix to transform with\r\n * @returns {vec4} out\r\n */\n\nexport function transformMat4(out, a, m) {\n  var x = a[0],\n      y = a[1],\n      z = a[2],\n      w = a[3];\n  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\n  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\n  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n  return out;\n}\n/**\r\n * Transforms the vec4 with a quat\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @param {ReadonlyVec4} a the vector to transform\r\n * @param {ReadonlyQuat} q quaternion to transform with\r\n * @returns {vec4} out\r\n */\n\nexport function transformQuat(out, a, q) {\n  var x = a[0],\n      y = a[1],\n      z = a[2];\n  var qx = q[0],\n      qy = q[1],\n      qz = q[2],\n      qw = q[3]; // calculate quat * vec\n\n  var ix = qw * x + qy * z - qz * y;\n  var iy = qw * y + qz * x - qx * z;\n  var iz = qw * z + qx * y - qy * x;\n  var iw = -qx * x - qy * y - qz * z; // calculate result * inverse quat\n\n  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n  out[3] = a[3];\n  return out;\n}\n/**\r\n * Set the components of a vec4 to zero\r\n *\r\n * @param {vec4} out the receiving vector\r\n * @returns {vec4} out\r\n */\n\nexport function zero(out) {\n  out[0] = 0.0;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  return out;\n}\n/**\r\n * Returns a string representation of a vector\r\n *\r\n * @param {ReadonlyVec4} a vector to represent as a string\r\n * @returns {String} string representation of the vector\r\n */\n\nexport function str(a) {\n  return \"vec4(\" + a[0] + \", \" + a[1] + \", \" + a[2] + \", \" + a[3] + \")\";\n}\n/**\r\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\r\n *\r\n * @param {ReadonlyVec4} a The first vector.\r\n * @param {ReadonlyVec4} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n/**\r\n * Returns whether or not the vectors have approximately the same elements in the same position.\r\n *\r\n * @param {ReadonlyVec4} a The first vector.\r\n * @param {ReadonlyVec4} b The second vector.\r\n * @returns {Boolean} True if the vectors are equal, false otherwise.\r\n */\n\nexport function equals(a, b) {\n  var a0 = a[0],\n      a1 = a[1],\n      a2 = a[2],\n      a3 = a[3];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2],\n      b3 = b[3];\n  return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3));\n}\n/**\r\n * Alias for {@link vec4.subtract}\r\n * @function\r\n */\n\nexport var sub = subtract;\n/**\r\n * Alias for {@link vec4.multiply}\r\n * @function\r\n */\n\nexport var mul = multiply;\n/**\r\n * Alias for {@link vec4.divide}\r\n * @function\r\n */\n\nexport var div = divide;\n/**\r\n * Alias for {@link vec4.distance}\r\n * @function\r\n */\n\nexport var dist = distance;\n/**\r\n * Alias for {@link vec4.squaredDistance}\r\n * @function\r\n */\n\nexport var sqrDist = squaredDistance;\n/**\r\n * Alias for {@link vec4.length}\r\n * @function\r\n */\n\nexport var len = length;\n/**\r\n * Alias for {@link vec4.squaredLength}\r\n * @function\r\n */\n\nexport var sqrLen = squaredLength;\n/**\r\n * Perform some operation over an array of vec4s.\r\n *\r\n * @param {Array} a the array of vectors to iterate over\r\n * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed\r\n * @param {Number} offset Number of elements to skip at the beginning of the array\r\n * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array\r\n * @param {Function} fn Function to call for each vector in the array\r\n * @param {Object} [arg] additional argument to pass to fn\r\n * @returns {Array} a\r\n * @function\r\n */\n\nexport var forEach = function () {\n  var vec = create();\n  return function (a, stride, offset, count, fn, arg) {\n    var i, l;\n\n    if (!stride) {\n      stride = 4;\n    }\n\n    if (!offset) {\n      offset = 0;\n    }\n\n    if (count) {\n      l = Math.min(count * stride + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for (i = offset; i < l; i += stride) {\n      vec[0] = a[i];\n      vec[1] = a[i + 1];\n      vec[2] = a[i + 2];\n      vec[3] = a[i + 3];\n      fn(vec, vec, arg);\n      a[i] = vec[0];\n      a[i + 1] = vec[1];\n      a[i + 2] = vec[2];\n      a[i + 3] = vec[3];\n    }\n\n    return a;\n  };\n}();","/*! *****************************************************************************\nCopyright (C) Microsoft. All rights reserved.\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\nthis file except in compliance with the License. You may obtain a copy of the\nLicense at http://www.apache.org/licenses/LICENSE-2.0\n\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\nMERCHANTABLITY OR NON-INFRINGEMENT.\n\nSee the Apache Version 2.0 License for specific language governing permissions\nand limitations under the License.\n***************************************************************************** */\nvar Reflect;\n(function (Reflect) {\n    // Metadata Proposal\n    // https://rbuckton.github.io/reflect-metadata/\n    (function (factory) {\n        var root = typeof global === \"object\" ? global :\n            typeof self === \"object\" ? self :\n                typeof this === \"object\" ? this :\n                    Function(\"return this;\")();\n        var exporter = makeExporter(Reflect);\n        if (typeof root.Reflect === \"undefined\") {\n            root.Reflect = Reflect;\n        }\n        else {\n            exporter = makeExporter(root.Reflect, exporter);\n        }\n        factory(exporter);\n        function makeExporter(target, previous) {\n            return function (key, value) {\n                if (typeof target[key] !== \"function\") {\n                    Object.defineProperty(target, key, { configurable: true, writable: true, value: value });\n                }\n                if (previous)\n                    previous(key, value);\n            };\n        }\n    })(function (exporter) {\n        var hasOwn = Object.prototype.hasOwnProperty;\n        // feature test for Symbol support\n        var supportsSymbol = typeof Symbol === \"function\";\n        var toPrimitiveSymbol = supportsSymbol && typeof Symbol.toPrimitive !== \"undefined\" ? Symbol.toPrimitive : \"@@toPrimitive\";\n        var iteratorSymbol = supportsSymbol && typeof Symbol.iterator !== \"undefined\" ? Symbol.iterator : \"@@iterator\";\n        var supportsCreate = typeof Object.create === \"function\"; // feature test for Object.create support\n        var supportsProto = { __proto__: [] } instanceof Array; // feature test for __proto__ support\n        var downLevel = !supportsCreate && !supportsProto;\n        var HashMap = {\n            // create an object in dictionary mode (a.k.a. \"slow\" mode in v8)\n            create: supportsCreate\n                ? function () { return MakeDictionary(Object.create(null)); }\n                : supportsProto\n                    ? function () { return MakeDictionary({ __proto__: null }); }\n                    : function () { return MakeDictionary({}); },\n            has: downLevel\n                ? function (map, key) { return hasOwn.call(map, key); }\n                : function (map, key) { return key in map; },\n            get: downLevel\n                ? function (map, key) { return hasOwn.call(map, key) ? map[key] : undefined; }\n                : function (map, key) { return map[key]; },\n        };\n        // Load global or shim versions of Map, Set, and WeakMap\n        var functionPrototype = Object.getPrototypeOf(Function);\n        var usePolyfill = typeof process === \"object\" && process.env && process.env[\"REFLECT_METADATA_USE_MAP_POLYFILL\"] === \"true\";\n        var _Map = !usePolyfill && typeof Map === \"function\" && typeof Map.prototype.entries === \"function\" ? Map : CreateMapPolyfill();\n        var _Set = !usePolyfill && typeof Set === \"function\" && typeof Set.prototype.entries === \"function\" ? Set : CreateSetPolyfill();\n        var _WeakMap = !usePolyfill && typeof WeakMap === \"function\" ? WeakMap : CreateWeakMapPolyfill();\n        // [[Metadata]] internal slot\n        // https://rbuckton.github.io/reflect-metadata/#ordinary-object-internal-methods-and-internal-slots\n        var Metadata = new _WeakMap();\n        /**\n         * Applies a set of decorators to a property of a target object.\n         * @param decorators An array of decorators.\n         * @param target The target object.\n         * @param propertyKey (Optional) The property key to decorate.\n         * @param attributes (Optional) The property descriptor for the target key.\n         * @remarks Decorators are applied in reverse order.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     Example = Reflect.decorate(decoratorsArray, Example);\n         *\n         *     // property (on constructor)\n         *     Reflect.decorate(decoratorsArray, Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     Reflect.decorate(decoratorsArray, Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     Object.defineProperty(Example, \"staticMethod\",\n         *         Reflect.decorate(decoratorsArray, Example, \"staticMethod\",\n         *             Object.getOwnPropertyDescriptor(Example, \"staticMethod\")));\n         *\n         *     // method (on prototype)\n         *     Object.defineProperty(Example.prototype, \"method\",\n         *         Reflect.decorate(decoratorsArray, Example.prototype, \"method\",\n         *             Object.getOwnPropertyDescriptor(Example.prototype, \"method\")));\n         *\n         */\n        function decorate(decorators, target, propertyKey, attributes) {\n            if (!IsUndefined(propertyKey)) {\n                if (!IsArray(decorators))\n                    throw new TypeError();\n                if (!IsObject(target))\n                    throw new TypeError();\n                if (!IsObject(attributes) && !IsUndefined(attributes) && !IsNull(attributes))\n                    throw new TypeError();\n                if (IsNull(attributes))\n                    attributes = undefined;\n                propertyKey = ToPropertyKey(propertyKey);\n                return DecorateProperty(decorators, target, propertyKey, attributes);\n            }\n            else {\n                if (!IsArray(decorators))\n                    throw new TypeError();\n                if (!IsConstructor(target))\n                    throw new TypeError();\n                return DecorateConstructor(decorators, target);\n            }\n        }\n        exporter(\"decorate\", decorate);\n        // 4.1.2 Reflect.metadata(metadataKey, metadataValue)\n        // https://rbuckton.github.io/reflect-metadata/#reflect.metadata\n        /**\n         * A default metadata decorator factory that can be used on a class, class member, or parameter.\n         * @param metadataKey The key for the metadata entry.\n         * @param metadataValue The value for the metadata entry.\n         * @returns A decorator function.\n         * @remarks\n         * If `metadataKey` is already defined for the target and target key, the\n         * metadataValue for that key will be overwritten.\n         * @example\n         *\n         *     // constructor\n         *     @Reflect.metadata(key, value)\n         *     class Example {\n         *     }\n         *\n         *     // property (on constructor, TypeScript only)\n         *     class Example {\n         *         @Reflect.metadata(key, value)\n         *         static staticProperty;\n         *     }\n         *\n         *     // property (on prototype, TypeScript only)\n         *     class Example {\n         *         @Reflect.metadata(key, value)\n         *         property;\n         *     }\n         *\n         *     // method (on constructor)\n         *     class Example {\n         *         @Reflect.metadata(key, value)\n         *         static staticMethod() { }\n         *     }\n         *\n         *     // method (on prototype)\n         *     class Example {\n         *         @Reflect.metadata(key, value)\n         *         method() { }\n         *     }\n         *\n         */\n        function metadata(metadataKey, metadataValue) {\n            function decorator(target, propertyKey) {\n                if (!IsObject(target))\n                    throw new TypeError();\n                if (!IsUndefined(propertyKey) && !IsPropertyKey(propertyKey))\n                    throw new TypeError();\n                OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, propertyKey);\n            }\n            return decorator;\n        }\n        exporter(\"metadata\", metadata);\n        /**\n         * Define a unique metadata entry on the target.\n         * @param metadataKey A key used to store and retrieve metadata.\n         * @param metadataValue A value that contains attached metadata.\n         * @param target The target object on which to define metadata.\n         * @param propertyKey (Optional) The property key for the target.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     Reflect.defineMetadata(\"custom:annotation\", options, Example);\n         *\n         *     // property (on constructor)\n         *     Reflect.defineMetadata(\"custom:annotation\", options, Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     Reflect.defineMetadata(\"custom:annotation\", options, Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     Reflect.defineMetadata(\"custom:annotation\", options, Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     Reflect.defineMetadata(\"custom:annotation\", options, Example.prototype, \"method\");\n         *\n         *     // decorator factory as metadata-producing annotation.\n         *     function MyAnnotation(options): Decorator {\n         *         return (target, key?) => Reflect.defineMetadata(\"custom:annotation\", options, target, key);\n         *     }\n         *\n         */\n        function defineMetadata(metadataKey, metadataValue, target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            return OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, propertyKey);\n        }\n        exporter(\"defineMetadata\", defineMetadata);\n        /**\n         * Gets a value indicating whether the target object or its prototype chain has the provided metadata key defined.\n         * @param metadataKey A key used to store and retrieve metadata.\n         * @param target The target object on which the metadata is defined.\n         * @param propertyKey (Optional) The property key for the target.\n         * @returns `true` if the metadata key was defined on the target object or its prototype chain; otherwise, `false`.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     result = Reflect.hasMetadata(\"custom:annotation\", Example);\n         *\n         *     // property (on constructor)\n         *     result = Reflect.hasMetadata(\"custom:annotation\", Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     result = Reflect.hasMetadata(\"custom:annotation\", Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     result = Reflect.hasMetadata(\"custom:annotation\", Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     result = Reflect.hasMetadata(\"custom:annotation\", Example.prototype, \"method\");\n         *\n         */\n        function hasMetadata(metadataKey, target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            return OrdinaryHasMetadata(metadataKey, target, propertyKey);\n        }\n        exporter(\"hasMetadata\", hasMetadata);\n        /**\n         * Gets a value indicating whether the target object has the provided metadata key defined.\n         * @param metadataKey A key used to store and retrieve metadata.\n         * @param target The target object on which the metadata is defined.\n         * @param propertyKey (Optional) The property key for the target.\n         * @returns `true` if the metadata key was defined on the target object; otherwise, `false`.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example);\n         *\n         *     // property (on constructor)\n         *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example.prototype, \"method\");\n         *\n         */\n        function hasOwnMetadata(metadataKey, target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            return OrdinaryHasOwnMetadata(metadataKey, target, propertyKey);\n        }\n        exporter(\"hasOwnMetadata\", hasOwnMetadata);\n        /**\n         * Gets the metadata value for the provided metadata key on the target object or its prototype chain.\n         * @param metadataKey A key used to store and retrieve metadata.\n         * @param target The target object on which the metadata is defined.\n         * @param propertyKey (Optional) The property key for the target.\n         * @returns The metadata value for the metadata key if found; otherwise, `undefined`.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     result = Reflect.getMetadata(\"custom:annotation\", Example);\n         *\n         *     // property (on constructor)\n         *     result = Reflect.getMetadata(\"custom:annotation\", Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     result = Reflect.getMetadata(\"custom:annotation\", Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     result = Reflect.getMetadata(\"custom:annotation\", Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     result = Reflect.getMetadata(\"custom:annotation\", Example.prototype, \"method\");\n         *\n         */\n        function getMetadata(metadataKey, target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            return OrdinaryGetMetadata(metadataKey, target, propertyKey);\n        }\n        exporter(\"getMetadata\", getMetadata);\n        /**\n         * Gets the metadata value for the provided metadata key on the target object.\n         * @param metadataKey A key used to store and retrieve metadata.\n         * @param target The target object on which the metadata is defined.\n         * @param propertyKey (Optional) The property key for the target.\n         * @returns The metadata value for the metadata key if found; otherwise, `undefined`.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example);\n         *\n         *     // property (on constructor)\n         *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example.prototype, \"method\");\n         *\n         */\n        function getOwnMetadata(metadataKey, target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            return OrdinaryGetOwnMetadata(metadataKey, target, propertyKey);\n        }\n        exporter(\"getOwnMetadata\", getOwnMetadata);\n        /**\n         * Gets the metadata keys defined on the target object or its prototype chain.\n         * @param target The target object on which the metadata is defined.\n         * @param propertyKey (Optional) The property key for the target.\n         * @returns An array of unique metadata keys.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     result = Reflect.getMetadataKeys(Example);\n         *\n         *     // property (on constructor)\n         *     result = Reflect.getMetadataKeys(Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     result = Reflect.getMetadataKeys(Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     result = Reflect.getMetadataKeys(Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     result = Reflect.getMetadataKeys(Example.prototype, \"method\");\n         *\n         */\n        function getMetadataKeys(target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            return OrdinaryMetadataKeys(target, propertyKey);\n        }\n        exporter(\"getMetadataKeys\", getMetadataKeys);\n        /**\n         * Gets the unique metadata keys defined on the target object.\n         * @param target The target object on which the metadata is defined.\n         * @param propertyKey (Optional) The property key for the target.\n         * @returns An array of unique metadata keys.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     result = Reflect.getOwnMetadataKeys(Example);\n         *\n         *     // property (on constructor)\n         *     result = Reflect.getOwnMetadataKeys(Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     result = Reflect.getOwnMetadataKeys(Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     result = Reflect.getOwnMetadataKeys(Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     result = Reflect.getOwnMetadataKeys(Example.prototype, \"method\");\n         *\n         */\n        function getOwnMetadataKeys(target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            return OrdinaryOwnMetadataKeys(target, propertyKey);\n        }\n        exporter(\"getOwnMetadataKeys\", getOwnMetadataKeys);\n        /**\n         * Deletes the metadata entry from the target object with the provided key.\n         * @param metadataKey A key used to store and retrieve metadata.\n         * @param target The target object on which the metadata is defined.\n         * @param propertyKey (Optional) The property key for the target.\n         * @returns `true` if the metadata entry was found and deleted; otherwise, false.\n         * @example\n         *\n         *     class Example {\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\n         *         // static staticProperty;\n         *         // property;\n         *\n         *         constructor(p) { }\n         *         static staticMethod(p) { }\n         *         method(p) { }\n         *     }\n         *\n         *     // constructor\n         *     result = Reflect.deleteMetadata(\"custom:annotation\", Example);\n         *\n         *     // property (on constructor)\n         *     result = Reflect.deleteMetadata(\"custom:annotation\", Example, \"staticProperty\");\n         *\n         *     // property (on prototype)\n         *     result = Reflect.deleteMetadata(\"custom:annotation\", Example.prototype, \"property\");\n         *\n         *     // method (on constructor)\n         *     result = Reflect.deleteMetadata(\"custom:annotation\", Example, \"staticMethod\");\n         *\n         *     // method (on prototype)\n         *     result = Reflect.deleteMetadata(\"custom:annotation\", Example.prototype, \"method\");\n         *\n         */\n        function deleteMetadata(metadataKey, target, propertyKey) {\n            if (!IsObject(target))\n                throw new TypeError();\n            if (!IsUndefined(propertyKey))\n                propertyKey = ToPropertyKey(propertyKey);\n            var metadataMap = GetOrCreateMetadataMap(target, propertyKey, /*Create*/ false);\n            if (IsUndefined(metadataMap))\n                return false;\n            if (!metadataMap.delete(metadataKey))\n                return false;\n            if (metadataMap.size > 0)\n                return true;\n            var targetMetadata = Metadata.get(target);\n            targetMetadata.delete(propertyKey);\n            if (targetMetadata.size > 0)\n                return true;\n            Metadata.delete(target);\n            return true;\n        }\n        exporter(\"deleteMetadata\", deleteMetadata);\n        function DecorateConstructor(decorators, target) {\n            for (var i = decorators.length - 1; i >= 0; --i) {\n                var decorator = decorators[i];\n                var decorated = decorator(target);\n                if (!IsUndefined(decorated) && !IsNull(decorated)) {\n                    if (!IsConstructor(decorated))\n                        throw new TypeError();\n                    target = decorated;\n                }\n            }\n            return target;\n        }\n        function DecorateProperty(decorators, target, propertyKey, descriptor) {\n            for (var i = decorators.length - 1; i >= 0; --i) {\n                var decorator = decorators[i];\n                var decorated = decorator(target, propertyKey, descriptor);\n                if (!IsUndefined(decorated) && !IsNull(decorated)) {\n                    if (!IsObject(decorated))\n                        throw new TypeError();\n                    descriptor = decorated;\n                }\n            }\n            return descriptor;\n        }\n        function GetOrCreateMetadataMap(O, P, Create) {\n            var targetMetadata = Metadata.get(O);\n            if (IsUndefined(targetMetadata)) {\n                if (!Create)\n                    return undefined;\n                targetMetadata = new _Map();\n                Metadata.set(O, targetMetadata);\n            }\n            var metadataMap = targetMetadata.get(P);\n            if (IsUndefined(metadataMap)) {\n                if (!Create)\n                    return undefined;\n                metadataMap = new _Map();\n                targetMetadata.set(P, metadataMap);\n            }\n            return metadataMap;\n        }\n        // 3.1.1.1 OrdinaryHasMetadata(MetadataKey, O, P)\n        // https://rbuckton.github.io/reflect-metadata/#ordinaryhasmetadata\n        function OrdinaryHasMetadata(MetadataKey, O, P) {\n            var hasOwn = OrdinaryHasOwnMetadata(MetadataKey, O, P);\n            if (hasOwn)\n                return true;\n            var parent = OrdinaryGetPrototypeOf(O);\n            if (!IsNull(parent))\n                return OrdinaryHasMetadata(MetadataKey, parent, P);\n            return false;\n        }\n        // 3.1.2.1 OrdinaryHasOwnMetadata(MetadataKey, O, P)\n        // https://rbuckton.github.io/reflect-metadata/#ordinaryhasownmetadata\n        function OrdinaryHasOwnMetadata(MetadataKey, O, P) {\n            var metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ false);\n            if (IsUndefined(metadataMap))\n                return false;\n            return ToBoolean(metadataMap.has(MetadataKey));\n        }\n        // 3.1.3.1 OrdinaryGetMetadata(MetadataKey, O, P)\n        // https://rbuckton.github.io/reflect-metadata/#ordinarygetmetadata\n        function OrdinaryGetMetadata(MetadataKey, O, P) {\n            var hasOwn = OrdinaryHasOwnMetadata(MetadataKey, O, P);\n            if (hasOwn)\n                return OrdinaryGetOwnMetadata(MetadataKey, O, P);\n            var parent = OrdinaryGetPrototypeOf(O);\n            if (!IsNull(parent))\n                return OrdinaryGetMetadata(MetadataKey, parent, P);\n            return undefined;\n        }\n        // 3.1.4.1 OrdinaryGetOwnMetadata(MetadataKey, O, P)\n        // https://rbuckton.github.io/reflect-metadata/#ordinarygetownmetadata\n        function OrdinaryGetOwnMetadata(MetadataKey, O, P) {\n            var metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ false);\n            if (IsUndefined(metadataMap))\n                return undefined;\n            return metadataMap.get(MetadataKey);\n        }\n        // 3.1.5.1 OrdinaryDefineOwnMetadata(MetadataKey, MetadataValue, O, P)\n        // https://rbuckton.github.io/reflect-metadata/#ordinarydefineownmetadata\n        function OrdinaryDefineOwnMetadata(MetadataKey, MetadataValue, O, P) {\n            var metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ true);\n            metadataMap.set(MetadataKey, MetadataValue);\n        }\n        // 3.1.6.1 OrdinaryMetadataKeys(O, P)\n        // https://rbuckton.github.io/reflect-metadata/#ordinarymetadatakeys\n        function OrdinaryMetadataKeys(O, P) {\n            var ownKeys = OrdinaryOwnMetadataKeys(O, P);\n            var parent = OrdinaryGetPrototypeOf(O);\n            if (parent === null)\n                return ownKeys;\n            var parentKeys = OrdinaryMetadataKeys(parent, P);\n            if (parentKeys.length <= 0)\n                return ownKeys;\n            if (ownKeys.length <= 0)\n                return parentKeys;\n            var set = new _Set();\n            var keys = [];\n            for (var _i = 0, ownKeys_1 = ownKeys; _i < ownKeys_1.length; _i++) {\n                var key = ownKeys_1[_i];\n                var hasKey = set.has(key);\n                if (!hasKey) {\n                    set.add(key);\n                    keys.push(key);\n                }\n            }\n            for (var _a = 0, parentKeys_1 = parentKeys; _a < parentKeys_1.length; _a++) {\n                var key = parentKeys_1[_a];\n                var hasKey = set.has(key);\n                if (!hasKey) {\n                    set.add(key);\n                    keys.push(key);\n                }\n            }\n            return keys;\n        }\n        // 3.1.7.1 OrdinaryOwnMetadataKeys(O, P)\n        // https://rbuckton.github.io/reflect-metadata/#ordinaryownmetadatakeys\n        function OrdinaryOwnMetadataKeys(O, P) {\n            var keys = [];\n            var metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ false);\n            if (IsUndefined(metadataMap))\n                return keys;\n            var keysObj = metadataMap.keys();\n            var iterator = GetIterator(keysObj);\n            var k = 0;\n            while (true) {\n                var next = IteratorStep(iterator);\n                if (!next) {\n                    keys.length = k;\n                    return keys;\n                }\n                var nextValue = IteratorValue(next);\n                try {\n                    keys[k] = nextValue;\n                }\n                catch (e) {\n                    try {\n                        IteratorClose(iterator);\n                    }\n                    finally {\n                        throw e;\n                    }\n                }\n                k++;\n            }\n        }\n        // 6 ECMAScript Data Typ0es and Values\n        // https://tc39.github.io/ecma262/#sec-ecmascript-data-types-and-values\n        function Type(x) {\n            if (x === null)\n                return 1 /* Null */;\n            switch (typeof x) {\n                case \"undefined\": return 0 /* Undefined */;\n                case \"boolean\": return 2 /* Boolean */;\n                case \"string\": return 3 /* String */;\n                case \"symbol\": return 4 /* Symbol */;\n                case \"number\": return 5 /* Number */;\n                case \"object\": return x === null ? 1 /* Null */ : 6 /* Object */;\n                default: return 6 /* Object */;\n            }\n        }\n        // 6.1.1 The Undefined Type\n        // https://tc39.github.io/ecma262/#sec-ecmascript-language-types-undefined-type\n        function IsUndefined(x) {\n            return x === undefined;\n        }\n        // 6.1.2 The Null Type\n        // https://tc39.github.io/ecma262/#sec-ecmascript-language-types-null-type\n        function IsNull(x) {\n            return x === null;\n        }\n        // 6.1.5 The Symbol Type\n        // https://tc39.github.io/ecma262/#sec-ecmascript-language-types-symbol-type\n        function IsSymbol(x) {\n            return typeof x === \"symbol\";\n        }\n        // 6.1.7 The Object Type\n        // https://tc39.github.io/ecma262/#sec-object-type\n        function IsObject(x) {\n            return typeof x === \"object\" ? x !== null : typeof x === \"function\";\n        }\n        // 7.1 Type Conversion\n        // https://tc39.github.io/ecma262/#sec-type-conversion\n        // 7.1.1 ToPrimitive(input [, PreferredType])\n        // https://tc39.github.io/ecma262/#sec-toprimitive\n        function ToPrimitive(input, PreferredType) {\n            switch (Type(input)) {\n                case 0 /* Undefined */: return input;\n                case 1 /* Null */: return input;\n                case 2 /* Boolean */: return input;\n                case 3 /* String */: return input;\n                case 4 /* Symbol */: return input;\n                case 5 /* Number */: return input;\n            }\n            var hint = PreferredType === 3 /* String */ ? \"string\" : PreferredType === 5 /* Number */ ? \"number\" : \"default\";\n            var exoticToPrim = GetMethod(input, toPrimitiveSymbol);\n            if (exoticToPrim !== undefined) {\n                var result = exoticToPrim.call(input, hint);\n                if (IsObject(result))\n                    throw new TypeError();\n                return result;\n            }\n            return OrdinaryToPrimitive(input, hint === \"default\" ? \"number\" : hint);\n        }\n        // 7.1.1.1 OrdinaryToPrimitive(O, hint)\n        // https://tc39.github.io/ecma262/#sec-ordinarytoprimitive\n        function OrdinaryToPrimitive(O, hint) {\n            if (hint === \"string\") {\n                var toString_1 = O.toString;\n                if (IsCallable(toString_1)) {\n                    var result = toString_1.call(O);\n                    if (!IsObject(result))\n                        return result;\n                }\n                var valueOf = O.valueOf;\n                if (IsCallable(valueOf)) {\n                    var result = valueOf.call(O);\n                    if (!IsObject(result))\n                        return result;\n                }\n            }\n            else {\n                var valueOf = O.valueOf;\n                if (IsCallable(valueOf)) {\n                    var result = valueOf.call(O);\n                    if (!IsObject(result))\n                        return result;\n                }\n                var toString_2 = O.toString;\n                if (IsCallable(toString_2)) {\n                    var result = toString_2.call(O);\n                    if (!IsObject(result))\n                        return result;\n                }\n            }\n            throw new TypeError();\n        }\n        // 7.1.2 ToBoolean(argument)\n        // https://tc39.github.io/ecma262/2016/#sec-toboolean\n        function ToBoolean(argument) {\n            return !!argument;\n        }\n        // 7.1.12 ToString(argument)\n        // https://tc39.github.io/ecma262/#sec-tostring\n        function ToString(argument) {\n            return \"\" + argument;\n        }\n        // 7.1.14 ToPropertyKey(argument)\n        // https://tc39.github.io/ecma262/#sec-topropertykey\n        function ToPropertyKey(argument) {\n            var key = ToPrimitive(argument, 3 /* String */);\n            if (IsSymbol(key))\n                return key;\n            return ToString(key);\n        }\n        // 7.2 Testing and Comparison Operations\n        // https://tc39.github.io/ecma262/#sec-testing-and-comparison-operations\n        // 7.2.2 IsArray(argument)\n        // https://tc39.github.io/ecma262/#sec-isarray\n        function IsArray(argument) {\n            return Array.isArray\n                ? Array.isArray(argument)\n                : argument instanceof Object\n                    ? argument instanceof Array\n                    : Object.prototype.toString.call(argument) === \"[object Array]\";\n        }\n        // 7.2.3 IsCallable(argument)\n        // https://tc39.github.io/ecma262/#sec-iscallable\n        function IsCallable(argument) {\n            // NOTE: This is an approximation as we cannot check for [[Call]] internal method.\n            return typeof argument === \"function\";\n        }\n        // 7.2.4 IsConstructor(argument)\n        // https://tc39.github.io/ecma262/#sec-isconstructor\n        function IsConstructor(argument) {\n            // NOTE: This is an approximation as we cannot check for [[Construct]] internal method.\n            return typeof argument === \"function\";\n        }\n        // 7.2.7 IsPropertyKey(argument)\n        // https://tc39.github.io/ecma262/#sec-ispropertykey\n        function IsPropertyKey(argument) {\n            switch (Type(argument)) {\n                case 3 /* String */: return true;\n                case 4 /* Symbol */: return true;\n                default: return false;\n            }\n        }\n        // 7.3 Operations on Objects\n        // https://tc39.github.io/ecma262/#sec-operations-on-objects\n        // 7.3.9 GetMethod(V, P)\n        // https://tc39.github.io/ecma262/#sec-getmethod\n        function GetMethod(V, P) {\n            var func = V[P];\n            if (func === undefined || func === null)\n                return undefined;\n            if (!IsCallable(func))\n                throw new TypeError();\n            return func;\n        }\n        // 7.4 Operations on Iterator Objects\n        // https://tc39.github.io/ecma262/#sec-operations-on-iterator-objects\n        function GetIterator(obj) {\n            var method = GetMethod(obj, iteratorSymbol);\n            if (!IsCallable(method))\n                throw new TypeError(); // from Call\n            var iterator = method.call(obj);\n            if (!IsObject(iterator))\n                throw new TypeError();\n            return iterator;\n        }\n        // 7.4.4 IteratorValue(iterResult)\n        // https://tc39.github.io/ecma262/2016/#sec-iteratorvalue\n        function IteratorValue(iterResult) {\n            return iterResult.value;\n        }\n        // 7.4.5 IteratorStep(iterator)\n        // https://tc39.github.io/ecma262/#sec-iteratorstep\n        function IteratorStep(iterator) {\n            var result = iterator.next();\n            return result.done ? false : result;\n        }\n        // 7.4.6 IteratorClose(iterator, completion)\n        // https://tc39.github.io/ecma262/#sec-iteratorclose\n        function IteratorClose(iterator) {\n            var f = iterator[\"return\"];\n            if (f)\n                f.call(iterator);\n        }\n        // 9.1 Ordinary Object Internal Methods and Internal Slots\n        // https://tc39.github.io/ecma262/#sec-ordinary-object-internal-methods-and-internal-slots\n        // 9.1.1.1 OrdinaryGetPrototypeOf(O)\n        // https://tc39.github.io/ecma262/#sec-ordinarygetprototypeof\n        function OrdinaryGetPrototypeOf(O) {\n            var proto = Object.getPrototypeOf(O);\n            if (typeof O !== \"function\" || O === functionPrototype)\n                return proto;\n            // TypeScript doesn't set __proto__ in ES5, as it's non-standard.\n            // Try to determine the superclass constructor. Compatible implementations\n            // must either set __proto__ on a subclass constructor to the superclass constructor,\n            // or ensure each class has a valid `constructor` property on its prototype that\n            // points back to the constructor.\n            // If this is not the same as Function.[[Prototype]], then this is definately inherited.\n            // This is the case when in ES6 or when using __proto__ in a compatible browser.\n            if (proto !== functionPrototype)\n                return proto;\n            // If the super prototype is Object.prototype, null, or undefined, then we cannot determine the heritage.\n            var prototype = O.prototype;\n            var prototypeProto = prototype && Object.getPrototypeOf(prototype);\n            if (prototypeProto == null || prototypeProto === Object.prototype)\n                return proto;\n            // If the constructor was not a function, then we cannot determine the heritage.\n            var constructor = prototypeProto.constructor;\n            if (typeof constructor !== \"function\")\n                return proto;\n            // If we have some kind of self-reference, then we cannot determine the heritage.\n            if (constructor === O)\n                return proto;\n            // we have a pretty good guess at the heritage.\n            return constructor;\n        }\n        // naive Map shim\n        function CreateMapPolyfill() {\n            var cacheSentinel = {};\n            var arraySentinel = [];\n            var MapIterator = /** @class */ (function () {\n                function MapIterator(keys, values, selector) {\n                    this._index = 0;\n                    this._keys = keys;\n                    this._values = values;\n                    this._selector = selector;\n                }\n                MapIterator.prototype[\"@@iterator\"] = function () { return this; };\n                MapIterator.prototype[iteratorSymbol] = function () { return this; };\n                MapIterator.prototype.next = function () {\n                    var index = this._index;\n                    if (index >= 0 && index < this._keys.length) {\n                        var result = this._selector(this._keys[index], this._values[index]);\n                        if (index + 1 >= this._keys.length) {\n                            this._index = -1;\n                            this._keys = arraySentinel;\n                            this._values = arraySentinel;\n                        }\n                        else {\n                            this._index++;\n                        }\n                        return { value: result, done: false };\n                    }\n                    return { value: undefined, done: true };\n                };\n                MapIterator.prototype.throw = function (error) {\n                    if (this._index >= 0) {\n                        this._index = -1;\n                        this._keys = arraySentinel;\n                        this._values = arraySentinel;\n                    }\n                    throw error;\n                };\n                MapIterator.prototype.return = function (value) {\n                    if (this._index >= 0) {\n                        this._index = -1;\n                        this._keys = arraySentinel;\n                        this._values = arraySentinel;\n                    }\n                    return { value: value, done: true };\n                };\n                return MapIterator;\n            }());\n            return /** @class */ (function () {\n                function Map() {\n                    this._keys = [];\n                    this._values = [];\n                    this._cacheKey = cacheSentinel;\n                    this._cacheIndex = -2;\n                }\n                Object.defineProperty(Map.prototype, \"size\", {\n                    get: function () { return this._keys.length; },\n                    enumerable: true,\n                    configurable: true\n                });\n                Map.prototype.has = function (key) { return this._find(key, /*insert*/ false) >= 0; };\n                Map.prototype.get = function (key) {\n                    var index = this._find(key, /*insert*/ false);\n                    return index >= 0 ? this._values[index] : undefined;\n                };\n                Map.prototype.set = function (key, value) {\n                    var index = this._find(key, /*insert*/ true);\n                    this._values[index] = value;\n                    return this;\n                };\n                Map.prototype.delete = function (key) {\n                    var index = this._find(key, /*insert*/ false);\n                    if (index >= 0) {\n                        var size = this._keys.length;\n                        for (var i = index + 1; i < size; i++) {\n                            this._keys[i - 1] = this._keys[i];\n                            this._values[i - 1] = this._values[i];\n                        }\n                        this._keys.length--;\n                        this._values.length--;\n                        if (key === this._cacheKey) {\n                            this._cacheKey = cacheSentinel;\n                            this._cacheIndex = -2;\n                        }\n                        return true;\n                    }\n                    return false;\n                };\n                Map.prototype.clear = function () {\n                    this._keys.length = 0;\n                    this._values.length = 0;\n                    this._cacheKey = cacheSentinel;\n                    this._cacheIndex = -2;\n                };\n                Map.prototype.keys = function () { return new MapIterator(this._keys, this._values, getKey); };\n                Map.prototype.values = function () { return new MapIterator(this._keys, this._values, getValue); };\n                Map.prototype.entries = function () { return new MapIterator(this._keys, this._values, getEntry); };\n                Map.prototype[\"@@iterator\"] = function () { return this.entries(); };\n                Map.prototype[iteratorSymbol] = function () { return this.entries(); };\n                Map.prototype._find = function (key, insert) {\n                    if (this._cacheKey !== key) {\n                        this._cacheIndex = this._keys.indexOf(this._cacheKey = key);\n                    }\n                    if (this._cacheIndex < 0 && insert) {\n                        this._cacheIndex = this._keys.length;\n                        this._keys.push(key);\n                        this._values.push(undefined);\n                    }\n                    return this._cacheIndex;\n                };\n                return Map;\n            }());\n            function getKey(key, _) {\n                return key;\n            }\n            function getValue(_, value) {\n                return value;\n            }\n            function getEntry(key, value) {\n                return [key, value];\n            }\n        }\n        // naive Set shim\n        function CreateSetPolyfill() {\n            return /** @class */ (function () {\n                function Set() {\n                    this._map = new _Map();\n                }\n                Object.defineProperty(Set.prototype, \"size\", {\n                    get: function () { return this._map.size; },\n                    enumerable: true,\n                    configurable: true\n                });\n                Set.prototype.has = function (value) { return this._map.has(value); };\n                Set.prototype.add = function (value) { return this._map.set(value, value), this; };\n                Set.prototype.delete = function (value) { return this._map.delete(value); };\n                Set.prototype.clear = function () { this._map.clear(); };\n                Set.prototype.keys = function () { return this._map.keys(); };\n                Set.prototype.values = function () { return this._map.values(); };\n                Set.prototype.entries = function () { return this._map.entries(); };\n                Set.prototype[\"@@iterator\"] = function () { return this.keys(); };\n                Set.prototype[iteratorSymbol] = function () { return this.keys(); };\n                return Set;\n            }());\n        }\n        // naive WeakMap shim\n        function CreateWeakMapPolyfill() {\n            var UUID_SIZE = 16;\n            var keys = HashMap.create();\n            var rootKey = CreateUniqueKey();\n            return /** @class */ (function () {\n                function WeakMap() {\n                    this._key = CreateUniqueKey();\n                }\n                WeakMap.prototype.has = function (target) {\n                    var table = GetOrCreateWeakMapTable(target, /*create*/ false);\n                    return table !== undefined ? HashMap.has(table, this._key) : false;\n                };\n                WeakMap.prototype.get = function (target) {\n                    var table = GetOrCreateWeakMapTable(target, /*create*/ false);\n                    return table !== undefined ? HashMap.get(table, this._key) : undefined;\n                };\n                WeakMap.prototype.set = function (target, value) {\n                    var table = GetOrCreateWeakMapTable(target, /*create*/ true);\n                    table[this._key] = value;\n                    return this;\n                };\n                WeakMap.prototype.delete = function (target) {\n                    var table = GetOrCreateWeakMapTable(target, /*create*/ false);\n                    return table !== undefined ? delete table[this._key] : false;\n                };\n                WeakMap.prototype.clear = function () {\n                    // NOTE: not a real clear, just makes the previous data unreachable\n                    this._key = CreateUniqueKey();\n                };\n                return WeakMap;\n            }());\n            function CreateUniqueKey() {\n                var key;\n                do\n                    key = \"@@WeakMap@@\" + CreateUUID();\n                while (HashMap.has(keys, key));\n                keys[key] = true;\n                return key;\n            }\n            function GetOrCreateWeakMapTable(target, create) {\n                if (!hasOwn.call(target, rootKey)) {\n                    if (!create)\n                        return undefined;\n                    Object.defineProperty(target, rootKey, { value: HashMap.create() });\n                }\n                return target[rootKey];\n            }\n            function FillRandomBytes(buffer, size) {\n                for (var i = 0; i < size; ++i)\n                    buffer[i] = Math.random() * 0xff | 0;\n                return buffer;\n            }\n            function GenRandomBytes(size) {\n                if (typeof Uint8Array === \"function\") {\n                    if (typeof crypto !== \"undefined\")\n                        return crypto.getRandomValues(new Uint8Array(size));\n                    if (typeof msCrypto !== \"undefined\")\n                        return msCrypto.getRandomValues(new Uint8Array(size));\n                    return FillRandomBytes(new Uint8Array(size), size);\n                }\n                return FillRandomBytes(new Array(size), size);\n            }\n            function CreateUUID() {\n                var data = GenRandomBytes(UUID_SIZE);\n                // mark as random - RFC 4122 § 4.4\n                data[6] = data[6] & 0x4f | 0x40;\n                data[8] = data[8] & 0xbf | 0x80;\n                var result = \"\";\n                for (var offset = 0; offset < UUID_SIZE; ++offset) {\n                    var byte = data[offset];\n                    if (offset === 4 || offset === 6 || offset === 8)\n                        result += \"-\";\n                    if (byte < 16)\n                        result += \"0\";\n                    result += byte.toString(16).toLowerCase();\n                }\n                return result;\n            }\n        }\n        // uses a heuristic used by v8 and chakra to force an object into dictionary mode.\n        function MakeDictionary(obj) {\n            obj.__ = undefined;\n            delete obj.__;\n            return obj;\n        }\n    });\n})(Reflect || (Reflect = {}));\n","// Imports\nvar ___CSS_LOADER_API_IMPORT___ = require(\"../../node_modules/css-loader/dist/runtime/api.js\");\nexports = ___CSS_LOADER_API_IMPORT___(false);\n// Module\nexports.push([module.id, \"\\r\\nbody {\\r\\n    margin: 0;\\r\\n    padding: 0;\\r\\n    position: absolute;\\r\\n    width: 100%;\\r\\n    height: 100%;\\r\\n    overflow: hidden;\\r\\n    display: flex;\\r\\n    flex-flow: column nowrap;\\r\\n    align-items: center;\\r\\n    justify-content: center;\\r\\n    background-color: #EEE;\\r\\n    font-family: 'Open Sans', Roboto, Segoe UI, Microsoft Yahei UI, Tahoma, Geneva, Verdana, sans-serif;\\r\\n\\r\\n    background-position: 0px 0px,\\r\\n    16px 16px;\\r\\n    background-size: 32px 32px;\\r\\n    background-image: linear-gradient(45deg, #eee 25%, transparent 25%, transparent 75%, #eee 75%, #eee 100%),\\r\\n    linear-gradient(45deg, #eee 25%, white 25%, white 75%, #eee 75%, #eee 100%);\\r\\n}\\r\\n\\r\\n#root {\\r\\n    max-width: 100%;\\r\\n    max-height: 100%;\\r\\n}\\r\\n\\r\\n#canvas {\\r\\n    max-width: 100%;\\r\\n    max-height: 100%;\\r\\n}\", \"\"]);\n// Exports\nmodule.exports = exports;\n","\"use strict\";\n\n/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n*/\n// css base code, injected by the css-loader\n// eslint-disable-next-line func-names\nmodule.exports = function (useSourceMap) {\n  var list = []; // return the list of modules as css string\n\n  list.toString = function toString() {\n    return this.map(function (item) {\n      var content = cssWithMappingToString(item, useSourceMap);\n\n      if (item[2]) {\n        return \"@media \".concat(item[2], \" {\").concat(content, \"}\");\n      }\n\n      return content;\n    }).join('');\n  }; // import a list of modules into the list\n  // eslint-disable-next-line func-names\n\n\n  list.i = function (modules, mediaQuery, dedupe) {\n    if (typeof modules === 'string') {\n      // eslint-disable-next-line no-param-reassign\n      modules = [[null, modules, '']];\n    }\n\n    var alreadyImportedModules = {};\n\n    if (dedupe) {\n      for (var i = 0; i < this.length; i++) {\n        // eslint-disable-next-line prefer-destructuring\n        var id = this[i][0];\n\n        if (id != null) {\n          alreadyImportedModules[id] = true;\n        }\n      }\n    }\n\n    for (var _i = 0; _i < modules.length; _i++) {\n      var item = [].concat(modules[_i]);\n\n      if (dedupe && alreadyImportedModules[item[0]]) {\n        // eslint-disable-next-line no-continue\n        continue;\n      }\n\n      if (mediaQuery) {\n        if (!item[2]) {\n          item[2] = mediaQuery;\n        } else {\n          item[2] = \"\".concat(mediaQuery, \" and \").concat(item[2]);\n        }\n      }\n\n      list.push(item);\n    }\n  };\n\n  return list;\n};\n\nfunction cssWithMappingToString(item, useSourceMap) {\n  var content = item[1] || ''; // eslint-disable-next-line prefer-destructuring\n\n  var cssMapping = item[3];\n\n  if (!cssMapping) {\n    return content;\n  }\n\n  if (useSourceMap && typeof btoa === 'function') {\n    var sourceMapping = toComment(cssMapping);\n    var sourceURLs = cssMapping.sources.map(function (source) {\n      return \"/*# sourceURL=\".concat(cssMapping.sourceRoot || '').concat(source, \" */\");\n    });\n    return [content].concat(sourceURLs).concat([sourceMapping]).join('\\n');\n  }\n\n  return [content].join('\\n');\n} // Adapted from convert-source-map (MIT)\n\n\nfunction toComment(sourceMap) {\n  // eslint-disable-next-line no-undef\n  var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));\n  var data = \"sourceMappingURL=data:application/json;charset=utf-8;base64,\".concat(base64);\n  return \"/*# \".concat(data, \" */\");\n}","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","\"use strict\";\n\nvar isOldIE = function isOldIE() {\n  var memo;\n  return function memorize() {\n    if (typeof memo === 'undefined') {\n      // Test for IE <= 9 as proposed by Browserhacks\n      // @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805\n      // Tests for existence of standard globals is to allow style-loader\n      // to operate correctly into non-standard environments\n      // @see https://github.com/webpack-contrib/style-loader/issues/177\n      memo = Boolean(window && document && document.all && !window.atob);\n    }\n\n    return memo;\n  };\n}();\n\nvar getTarget = function getTarget() {\n  var memo = {};\n  return function memorize(target) {\n    if (typeof memo[target] === 'undefined') {\n      var styleTarget = document.querySelector(target); // Special case to return head of iframe instead of iframe itself\n\n      if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {\n        try {\n          // This will throw an exception if access to iframe is blocked\n          // due to cross-origin restrictions\n          styleTarget = styleTarget.contentDocument.head;\n        } catch (e) {\n          // istanbul ignore next\n          styleTarget = null;\n        }\n      }\n\n      memo[target] = styleTarget;\n    }\n\n    return memo[target];\n  };\n}();\n\nvar stylesInDom = [];\n\nfunction getIndexByIdentifier(identifier) {\n  var result = -1;\n\n  for (var i = 0; i < stylesInDom.length; i++) {\n    if (stylesInDom[i].identifier === identifier) {\n      result = i;\n      break;\n    }\n  }\n\n  return result;\n}\n\nfunction modulesToDom(list, options) {\n  var idCountMap = {};\n  var identifiers = [];\n\n  for (var i = 0; i < list.length; i++) {\n    var item = list[i];\n    var id = options.base ? item[0] + options.base : item[0];\n    var count = idCountMap[id] || 0;\n    var identifier = \"\".concat(id, \" \").concat(count);\n    idCountMap[id] = count + 1;\n    var index = getIndexByIdentifier(identifier);\n    var obj = {\n      css: item[1],\n      media: item[2],\n      sourceMap: item[3]\n    };\n\n    if (index !== -1) {\n      stylesInDom[index].references++;\n      stylesInDom[index].updater(obj);\n    } else {\n      stylesInDom.push({\n        identifier: identifier,\n        updater: addStyle(obj, options),\n        references: 1\n      });\n    }\n\n    identifiers.push(identifier);\n  }\n\n  return identifiers;\n}\n\nfunction insertStyleElement(options) {\n  var style = document.createElement('style');\n  var attributes = options.attributes || {};\n\n  if (typeof attributes.nonce === 'undefined') {\n    var nonce = typeof __webpack_nonce__ !== 'undefined' ? __webpack_nonce__ : null;\n\n    if (nonce) {\n      attributes.nonce = nonce;\n    }\n  }\n\n  Object.keys(attributes).forEach(function (key) {\n    style.setAttribute(key, attributes[key]);\n  });\n\n  if (typeof options.insert === 'function') {\n    options.insert(style);\n  } else {\n    var target = getTarget(options.insert || 'head');\n\n    if (!target) {\n      throw new Error(\"Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.\");\n    }\n\n    target.appendChild(style);\n  }\n\n  return style;\n}\n\nfunction removeStyleElement(style) {\n  // istanbul ignore if\n  if (style.parentNode === null) {\n    return false;\n  }\n\n  style.parentNode.removeChild(style);\n}\n/* istanbul ignore next  */\n\n\nvar replaceText = function replaceText() {\n  var textStore = [];\n  return function replace(index, replacement) {\n    textStore[index] = replacement;\n    return textStore.filter(Boolean).join('\\n');\n  };\n}();\n\nfunction applyToSingletonTag(style, index, remove, obj) {\n  var css = remove ? '' : obj.media ? \"@media \".concat(obj.media, \" {\").concat(obj.css, \"}\") : obj.css; // For old IE\n\n  /* istanbul ignore if  */\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = replaceText(index, css);\n  } else {\n    var cssNode = document.createTextNode(css);\n    var childNodes = style.childNodes;\n\n    if (childNodes[index]) {\n      style.removeChild(childNodes[index]);\n    }\n\n    if (childNodes.length) {\n      style.insertBefore(cssNode, childNodes[index]);\n    } else {\n      style.appendChild(cssNode);\n    }\n  }\n}\n\nfunction applyToTag(style, options, obj) {\n  var css = obj.css;\n  var media = obj.media;\n  var sourceMap = obj.sourceMap;\n\n  if (media) {\n    style.setAttribute('media', media);\n  } else {\n    style.removeAttribute('media');\n  }\n\n  if (sourceMap && typeof btoa !== 'undefined') {\n    css += \"\\n/*# sourceMappingURL=data:application/json;base64,\".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), \" */\");\n  } // For old IE\n\n  /* istanbul ignore if  */\n\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    while (style.firstChild) {\n      style.removeChild(style.firstChild);\n    }\n\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nvar singleton = null;\nvar singletonCounter = 0;\n\nfunction addStyle(obj, options) {\n  var style;\n  var update;\n  var remove;\n\n  if (options.singleton) {\n    var styleIndex = singletonCounter++;\n    style = singleton || (singleton = insertStyleElement(options));\n    update = applyToSingletonTag.bind(null, style, styleIndex, false);\n    remove = applyToSingletonTag.bind(null, style, styleIndex, true);\n  } else {\n    style = insertStyleElement(options);\n    update = applyToTag.bind(null, style, options);\n\n    remove = function remove() {\n      removeStyleElement(style);\n    };\n  }\n\n  update(obj);\n  return function updateStyle(newObj) {\n    if (newObj) {\n      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap) {\n        return;\n      }\n\n      update(obj = newObj);\n    } else {\n      remove();\n    }\n  };\n}\n\nmodule.exports = function (list, options) {\n  options = options || {}; // Force single-tag solution on IE6-9, which has a hard limit on the # of <style>\n  // tags it will allow on a page\n\n  if (!options.singleton && typeof options.singleton !== 'boolean') {\n    options.singleton = isOldIE();\n  }\n\n  list = list || [];\n  var lastIdentifiers = modulesToDom(list, options);\n  return function update(newList) {\n    newList = newList || [];\n\n    if (Object.prototype.toString.call(newList) !== '[object Array]') {\n      return;\n    }\n\n    for (var i = 0; i < lastIdentifiers.length; i++) {\n      var identifier = lastIdentifiers[i];\n      var index = getIndexByIdentifier(identifier);\n      stylesInDom[index].references--;\n    }\n\n    var newLastIdentifiers = modulesToDom(newList, options);\n\n    for (var _i = 0; _i < lastIdentifiers.length; _i++) {\n      var _identifier = lastIdentifiers[_i];\n\n      var _index = getIndexByIdentifier(_identifier);\n\n      if (stylesInDom[_index].references === 0) {\n        stylesInDom[_index].updater();\n\n        stylesInDom.splice(_index, 1);\n      }\n    }\n\n    lastIdentifiers = newLastIdentifiers;\n  };\n};","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","var api = require(\"!../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = require(\"!!../../node_modules/css-loader/dist/cjs.js!./base.css\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nmodule.exports = content.locals || {};","import { Blending, Camera, Chunk, Color, Default2DMaterial, Default2DRenderPipeline, DepthTest, dot, Entity, InputManager, Keys, LineRenderer, MathUtils, minus, mul, ParticleSystem, plus, Projection, RenderObject, Sprite, Texture2D, TextureImporter, TileData, Tilemap, Time, vec2, vec3, ZograEngine } from \"zogra-engine\";\r\nimport \"./css/base.css\";\r\n\r\n\r\nconst canvas = document.querySelector(\"#canvas\") as HTMLCanvasElement;\r\nconst engine = new ZograEngine(canvas, Default2DRenderPipeline);\r\nengine.fixedDeltaTime = true;\r\nengine.renderPipeline.ambientLightColor = Color.white;\r\nconst input = new InputManager({\r\n});\r\nengine.start();\r\n\r\nconst scene = engine.scene;\r\n(window as any).scene = scene;\r\n\r\nasync function init()\r\n{\r\n\r\n    const camera = new Camera();\r\n    camera.position = vec3(0, 0, 20);\r\n    camera.projection = Projection.Orthographic;\r\n    camera.viewHeight = 10;\r\n    scene.add(camera);\r\n    (window as any).camera = camera;\r\n\r\n    const particleSystem = new ParticleSystem();\r\n    particleSystem.maxCount = 512;\r\n    particleSystem.duration = 5;\r\n    particleSystem.spawnRate = 0;\r\n    particleSystem.startSpeed = [3, 16];\r\n    particleSystem.startRotation = { x: 0, y: 0, z: () => Math.random() * 360 };\r\n    particleSystem.startColor = () => (Color.fromHSL(Math.random() * 360, 0.8, 0.7).mul(MathUtils.lerp(0.3, 0.8, Math.random())) as Color);\r\n    particleSystem.material.setPipelineStateOverride({\r\n        blend: [Blending.SrcAlpha, Blending.OneMinusSrcAlpha],\r\n        depth: DepthTest.Disable,\r\n    });\r\n    scene.add(particleSystem);\r\n    particleSystem.play();\r\n\r\n    (window as any).particleSystem = particleSystem;\r\n\r\n    engine.on(\"update\", () =>\r\n    {\r\n        input.update();\r\n\r\n        if (input.getKeyDown(Keys.Mouse0))\r\n        {\r\n            const pos = camera.screenToWorld(input.pointerPosition);\r\n            pos.z = 0;\r\n            particleSystem.emit(100, pos);\r\n        }\r\n    })\r\n\r\n}\r\ninit();"],"sourceRoot":""}