import { vec3 } from "./vec3";
import { vec4 } from "./vec4";
import { vec2 } from "./vec2";
import { Rect } from "./rect";
declare type vec = vec2 | vec3 | vec4;
declare type Operand = vec2 | vec3 | vec4 | Readonly<vec2> | Readonly<vec3> | Readonly<vec4> | number | ArrayLike<number>;
declare type Larger<U extends Operand, V extends Operand> = U extends vec4 | Readonly<vec4> ? vec4 : V extends vec4 | Readonly<vec4> ? vec4 : U extends vec3 | Readonly<vec3> ? vec3 : V extends vec3 | Readonly<vec3> ? vec3 : U extends vec2 | Readonly<vec2> ? vec2 : V extends vec2 | Readonly<vec2> ? vec2 : V extends ArrayLike<number> ? ArrayLike<number> : number;
declare type ArithmeticType<U extends Operand, V extends Operand> = Larger<U, V>;
export declare function plus<U extends Operand, V extends Operand>(a: U, b: V, out?: ArithmeticType<U, V> & (vec | ArrayLike<number>)): ArithmeticType<U, V>;
export declare function minus<U extends Operand, V extends Operand>(a: U, b: V, out?: ArithmeticType<U, V> & vec): ArithmeticType<U, V>;
export declare function mul<U extends Operand, V extends Operand>(a: U, b: V, out?: ArithmeticType<U, V> & vec): ArithmeticType<U, V>;
export declare function div<U extends Operand, V extends Operand>(a: U, b: V, out?: ArithmeticType<U, V> & vec): ArithmeticType<U, V>;
export declare function dot(a: vec3, b: vec3): number;
export declare function dot(a: vec2, b: vec2): number;
export declare function dot(a: vec4, b: vec4): number;
export declare function cross(a: vec3, b: vec3): vec3;
export declare function cross(a: vec3, b: vec3, out: vec3): vec3;
export declare function cross(a: ArrayLike<number>, b: ArrayLike<number>): vec3;
export declare function cross(a: ArrayLike<number>, b: ArrayLike<number>, out: ArrayLike<number>): ArrayLike<number>;
export declare function distance<V extends vec>(a: V, b: V): number;
export declare function boxRaycast(box: Rect, center: vec2, direction: vec2): [boolean, number, vec2];
export declare const Deg2Rad: number;
export declare const Rad2Deg: number;
export {};
